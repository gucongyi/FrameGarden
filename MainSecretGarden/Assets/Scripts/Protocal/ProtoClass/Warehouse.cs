// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Warehouse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Game.Protocal {

  /// <summary>Holder for reflection information generated from Warehouse.proto</summary>
  public static partial class WarehouseReflection {

    #region Descriptor
    /// <summary>File descriptor for Warehouse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WarehouseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9XYXJlaG91c2UucHJvdG8SDUdhbWUuUHJvdG9jYWwiLwoMQ1NHb29kU3Ry",
            "dWN0Eg4KBkdvb2RJZBgBIAEoBRIPCgdHb29kTnVtGAIgASgFIkMKDkNTR29v",
            "ZFNlbGxEYXRhEjEKDEdvb2RTZWxsSW5mbxgBIAMoCzIbLkdhbWUuUHJvdG9j",
            "YWwuQ1NHb29kU3RydWN0IkMKDlNDR29vZFNlbGxEYXRhEjEKDEdvb2RTZWxs",
            "SW5mbxgBIAMoCzIbLkdhbWUuUHJvdG9jYWwuQ1NHb29kU3RydWN0IhwKCkNT",
            "R29vZExvY2sSDgoGR29vZElkGAEgAygFIkQKEUNTV2FyZUhvdXNlU3RydWN0",
            "Eg4KBkdvb2RJZBgBIAEoBRIPCgdHb29kTnVtGAIgASgFEg4KBklzTG9jaxgD",
            "IAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSGoodStruct), global::Game.Protocal.CSGoodStruct.Parser, new[]{ "GoodId", "GoodNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSGoodSellData), global::Game.Protocal.CSGoodSellData.Parser, new[]{ "GoodSellInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCGoodSellData), global::Game.Protocal.SCGoodSellData.Parser, new[]{ "GoodSellInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSGoodLock), global::Game.Protocal.CSGoodLock.Parser, new[]{ "GoodId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSWareHouseStruct), global::Game.Protocal.CSWareHouseStruct.Parser, new[]{ "GoodId", "GoodNum", "IsLock" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 道具出售结构
  /// </summary>
  public sealed partial class CSGoodStruct : pb::IMessage<CSGoodStruct> {
    private static readonly pb::MessageParser<CSGoodStruct> _parser = new pb::MessageParser<CSGoodStruct>(() => new CSGoodStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGoodStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.WarehouseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGoodStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGoodStruct(CSGoodStruct other) : this() {
      goodId_ = other.goodId_;
      goodNum_ = other.goodNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGoodStruct Clone() {
      return new CSGoodStruct(this);
    }

    /// <summary>Field number for the "GoodId" field.</summary>
    public const int GoodIdFieldNumber = 1;
    private int goodId_;
    /// <summary>
    /// 道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodId {
      get { return goodId_; }
      set {
        goodId_ = value;
      }
    }

    /// <summary>Field number for the "GoodNum" field.</summary>
    public const int GoodNumFieldNumber = 2;
    private int goodNum_;
    /// <summary>
    /// 道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodNum {
      get { return goodNum_; }
      set {
        goodNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGoodStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGoodStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GoodId != other.GoodId) return false;
      if (GoodNum != other.GoodNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GoodId != 0) hash ^= GoodId.GetHashCode();
      if (GoodNum != 0) hash ^= GoodNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GoodId);
      }
      if (GoodNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoodId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodId);
      }
      if (GoodNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGoodStruct other) {
      if (other == null) {
        return;
      }
      if (other.GoodId != 0) {
        GoodId = other.GoodId;
      }
      if (other.GoodNum != 0) {
        GoodNum = other.GoodNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GoodId = input.ReadInt32();
            break;
          }
          case 16: {
            GoodNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 道具出售
  /// </summary>
  public sealed partial class CSGoodSellData : pb::IMessage<CSGoodSellData> {
    private static readonly pb::MessageParser<CSGoodSellData> _parser = new pb::MessageParser<CSGoodSellData>(() => new CSGoodSellData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGoodSellData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.WarehouseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGoodSellData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGoodSellData(CSGoodSellData other) : this() {
      goodSellInfo_ = other.goodSellInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGoodSellData Clone() {
      return new CSGoodSellData(this);
    }

    /// <summary>Field number for the "GoodSellInfo" field.</summary>
    public const int GoodSellInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSGoodStruct> _repeated_goodSellInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSGoodStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSGoodStruct> goodSellInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSGoodStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSGoodStruct> GoodSellInfo {
      get { return goodSellInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGoodSellData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGoodSellData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!goodSellInfo_.Equals(other.goodSellInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= goodSellInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      goodSellInfo_.WriteTo(output, _repeated_goodSellInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += goodSellInfo_.CalculateSize(_repeated_goodSellInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGoodSellData other) {
      if (other == null) {
        return;
      }
      goodSellInfo_.Add(other.goodSellInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            goodSellInfo_.AddEntriesFrom(input, _repeated_goodSellInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 道具出售返回
  /// </summary>
  public sealed partial class SCGoodSellData : pb::IMessage<SCGoodSellData> {
    private static readonly pb::MessageParser<SCGoodSellData> _parser = new pb::MessageParser<SCGoodSellData>(() => new SCGoodSellData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGoodSellData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.WarehouseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGoodSellData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGoodSellData(SCGoodSellData other) : this() {
      goodSellInfo_ = other.goodSellInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGoodSellData Clone() {
      return new SCGoodSellData(this);
    }

    /// <summary>Field number for the "GoodSellInfo" field.</summary>
    public const int GoodSellInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSGoodStruct> _repeated_goodSellInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSGoodStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSGoodStruct> goodSellInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSGoodStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSGoodStruct> GoodSellInfo {
      get { return goodSellInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGoodSellData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGoodSellData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!goodSellInfo_.Equals(other.goodSellInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= goodSellInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      goodSellInfo_.WriteTo(output, _repeated_goodSellInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += goodSellInfo_.CalculateSize(_repeated_goodSellInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGoodSellData other) {
      if (other == null) {
        return;
      }
      goodSellInfo_.Add(other.goodSellInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            goodSellInfo_.AddEntriesFrom(input, _repeated_goodSellInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 道具锁定
  /// </summary>
  public sealed partial class CSGoodLock : pb::IMessage<CSGoodLock> {
    private static readonly pb::MessageParser<CSGoodLock> _parser = new pb::MessageParser<CSGoodLock>(() => new CSGoodLock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGoodLock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.WarehouseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGoodLock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGoodLock(CSGoodLock other) : this() {
      goodId_ = other.goodId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGoodLock Clone() {
      return new CSGoodLock(this);
    }

    /// <summary>Field number for the "GoodId" field.</summary>
    public const int GoodIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_goodId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> goodId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GoodId {
      get { return goodId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGoodLock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGoodLock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!goodId_.Equals(other.goodId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= goodId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      goodId_.WriteTo(output, _repeated_goodId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += goodId_.CalculateSize(_repeated_goodId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGoodLock other) {
      if (other == null) {
        return;
      }
      goodId_.Add(other.goodId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            goodId_.AddEntriesFrom(input, _repeated_goodId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 仓库信息结构
  /// </summary>
  public sealed partial class CSWareHouseStruct : pb::IMessage<CSWareHouseStruct> {
    private static readonly pb::MessageParser<CSWareHouseStruct> _parser = new pb::MessageParser<CSWareHouseStruct>(() => new CSWareHouseStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSWareHouseStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.WarehouseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWareHouseStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWareHouseStruct(CSWareHouseStruct other) : this() {
      goodId_ = other.goodId_;
      goodNum_ = other.goodNum_;
      isLock_ = other.isLock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWareHouseStruct Clone() {
      return new CSWareHouseStruct(this);
    }

    /// <summary>Field number for the "GoodId" field.</summary>
    public const int GoodIdFieldNumber = 1;
    private int goodId_;
    /// <summary>
    /// 道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodId {
      get { return goodId_; }
      set {
        goodId_ = value;
      }
    }

    /// <summary>Field number for the "GoodNum" field.</summary>
    public const int GoodNumFieldNumber = 2;
    private int goodNum_;
    /// <summary>
    /// 道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodNum {
      get { return goodNum_; }
      set {
        goodNum_ = value;
      }
    }

    /// <summary>Field number for the "IsLock" field.</summary>
    public const int IsLockFieldNumber = 3;
    private bool isLock_;
    /// <summary>
    /// 是否锁定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSWareHouseStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSWareHouseStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GoodId != other.GoodId) return false;
      if (GoodNum != other.GoodNum) return false;
      if (IsLock != other.IsLock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GoodId != 0) hash ^= GoodId.GetHashCode();
      if (GoodNum != 0) hash ^= GoodNum.GetHashCode();
      if (IsLock != false) hash ^= IsLock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GoodId);
      }
      if (GoodNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodNum);
      }
      if (IsLock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsLock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoodId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodId);
      }
      if (GoodNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodNum);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSWareHouseStruct other) {
      if (other == null) {
        return;
      }
      if (other.GoodId != 0) {
        GoodId = other.GoodId;
      }
      if (other.GoodNum != 0) {
        GoodNum = other.GoodNum;
      }
      if (other.IsLock != false) {
        IsLock = other.IsLock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GoodId = input.ReadInt32();
            break;
          }
          case 16: {
            GoodNum = input.ReadInt32();
            break;
          }
          case 24: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
