// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Manor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Game.Protocal {

  /// <summary>Holder for reflection information generated from Manor.proto</summary>
  public static partial class ManorReflection {

    #region Descriptor
    /// <summary>File descriptor for Manor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ManorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtNYW5vci5wcm90bxINR2FtZS5Qcm90b2NhbBoORW51bVR5cGUucHJvdG8a",
            "D1dhcmVob3VzZS5wcm90bxoTU3RhZ2VQcm9wZXJ0eS5wcm90byJECgZDU0Ry",
            "YWcSDAoEVHlwZRgBIAEoBRINCgVYYXhsZRgCIAEoAhINCgVZYXhsZRgDIAEo",
            "AhIOCgZHb29kSWQYBCABKAUiGAoGU0NEcmFnEg4KBlNvaWxJZBgBIAEoAyJA",
            "ChBDU0NoYW5nZUxvY2F0aW9uEg4KBlNvaWxJZBgBIAEoAxINCgVYYXhsZRgC",
            "IAEoAhINCgVZYXhsZRgDIAEoAiIzCg1DU1BsYW50U3RydWN0Eg4KBlNvaWxJ",
            "ZBgBIAEoAxISCgpDcm9wR29vZElkGAIgASgDIj4KC0NTUGxhbnREYXRhEi8K",
            "CVBsYW50SW5mbxgBIAMoCzIcLkdhbWUuUHJvdG9jYWwuQ1NQbGFudFN0cnVj",
            "dCJCCg1TQ1BsYW50UmVzdWx0EjEKC1BsYW50UmVzdWx0GAEgAygLMhwuR2Ft",
            "ZS5Qcm90b2NhbC5DU1BsYW50U3RydWN0Ih0KC0NTRXJhZGljYXRlEg4KBlNv",
            "aWxJZBgBIAEoAyIhCg9DU0hhcnZlc3RTdHJ1Y3QSDgoGU29pbElkGAEgASgD",
            "IkQKDUNTSGFydmVzdERhdGESMwoLSGFydmVzdEluZm8YASADKAsyHi5HYW1l",
            "LlByb3RvY2FsLkNTSGFydmVzdFN0cnVjdCJjCg9TQ0hhcnZlc3RTdHJ1Y3QS",
            "DgoGU29pbElkGAEgASgDEhEKCUhhcnZlc3RJZBgCIAEoBRISCgpIYXJ2ZXN0",
            "TnVtGAMgASgFEhkKEUhhcnZlc3RFeHBlcmllbmNlGAQgASgFIkYKDVNDSGFy",
            "dmVzdERhdGESNQoNSGFydmVzdFJlc3VsdBgBIAMoCzIeLkdhbWUuUHJvdG9j",
            "YWwuU0NIYXJ2ZXN0U3RydWN0Ih8KDUNTU3RlYWxTdHJ1Y3QSDgoGU29pbElk",
            "GAEgASgDIlAKC0NTU3RlYWxEYXRhEi8KCVN0ZWFsSW5mbxgBIAMoCzIcLkdh",
            "bWUuUHJvdG9jYWwuQ1NTdGVhbFN0cnVjdBIQCghTdGVhbFVpZBgCIAEoAyJC",
            "Cg1TQ1N0ZWFsUmVzdWx0Eg4KBlNvaWxJZBgBIAEoAxIPCgdTdGVhbElkGAIg",
            "ASgFEhAKCFN0ZWFsTnVtGAMgASgFIkAKC1NDU3RlYWxEYXRhEjEKC1N0ZWFs",
            "UmVzdWx0GAEgAygLMhwuR2FtZS5Qcm90b2NhbC5TQ1N0ZWFsUmVzdWx0ItYC",
            "Cg1TQ01hbm9yU3RydWN0Eg4KBlNvaWxJZBgBIAEoAxIrCghTb2lsVHlwZRgC",
            "IAEoDjIZLkdhbWUuUHJvdG9jYWwuTWFub3JTY2VuZRISCgpDcm9wR29vZElk",
            "GAMgASgDEg0KBVlpZWxkGAQgASgFEhIKClRvdGFsWWllbGQYBSABKAUSLQoK",
            "U29pbFN0YXR1cxgGIAEoDjIZLkdhbWUuUHJvdG9jYWwuUGVyaW9kR3JvdxIN",
            "CgVYYXhsZRgHIAEoAhINCgVZYXhsZRgIIAEoAhIQCghOZXh0VGltZRgJIAEo",
            "AxIWCg5QYXJjZWxEaXZpc2lvbhgKIAEoBRIPCgdJc1N0ZWFsGAsgASgIEhQK",
            "DEJveENvdW50RG93bhgMIAEoAxIWCg5Cb3hJc1VuTG9ja2luZxgNIAEoCBIb",
            "ChNEZWNvcmF0ZVJvdGF0ZUluZGV4GA4gASgFImUKElNDVW5sb2NrQXJlYVN0",
            "cnVjdBIOCgZBcmVhSWQYASABKAUSJwoFU3RhdGUYAiABKA4yGC5HYW1lLlBy",
            "b3RvY2FsLkFyZWFTdGF0ZRIWCg5BcmVhVW5sb2NrVGltZRgDIAEoAyJ5CgtT",
            "Q01hbm9yRGF0YRIvCglNYW5vckluZm8YASADKAsyHC5HYW1lLlByb3RvY2Fs",
            "LlNDTWFub3JTdHJ1Y3QSOQoOVW5sb2NrQXJlYUluZm8YAiADKAsyIS5HYW1l",
            "LlByb3RvY2FsLlNDVW5sb2NrQXJlYVN0cnVjdCI0CgxDU0ZlcnRpbGl6ZXIS",
            "DgoGU29pbElkGAEgASgDEhQKDEZlcnRpbGl6ZXJJZBgCIAEoBSIgCgxDU1F1",
            "ZXJ5T3RoZXISEAoIT3RoZXJVaWQYASABKAMihAEKEVNDTWFub3JGcmllbmRE",
            "YXRhEjQKDk90aGVyTWFub3JJbmZvGAEgAygLMhwuR2FtZS5Qcm90b2NhbC5T",
            "Q01hbm9yU3RydWN0EjkKDlVubG9ja0FyZWFJbmZvGAIgAygLMiEuR2FtZS5Q",
            "cm90b2NhbC5TQ1VubG9ja0FyZWFTdHJ1Y3QiRwoMQ1NVbmxvY2tBcmVhEg4K",
            "BkFyZWFJZBgBIAEoBRInCgVTdGF0ZRgCIAEoDjIYLkdhbWUuUHJvdG9jYWwu",
            "QXJlYVN0YXRlIoEBCgxTQ1VubG9ja0FyZWESFAoMUm9hZHdvcmtUaW1lGAEg",
            "ASgDEicKBVN0YXRlGAIgASgOMhguR2FtZS5Qcm90b2NhbC5BcmVhU3RhdGUS",
            "MgoJR29vZHNJbmZvGAMgAygLMh8uR2FtZS5Qcm90b2NhbC5TQ0J1eUdvb2Rz",
            "U3RydWN0IiUKE0NTT3JuYW1lbnRhbFJlY3ljbGUSDgoGU29pbElkGAEgASgD",
            "IjMKE1NDRnJpZW5kU3RlYWxTdHJ1Y3QSCwoDVWlkGAEgASgDEg8KB0lzU3Rl",
            "YWwYAiABKAgiRQoRU0NGcmllbmRTdGVhbEluZm8SMAoEaW5mbxgBIAMoCzIi",
            "LkdhbWUuUHJvdG9jYWwuU0NGcmllbmRTdGVhbFN0cnVjdCJaChFDU1dvcmtT",
            "aGVkU3BlZWRVcBIOCgZBcmVhSWQYASABKAUSNQoKU3BlZWRVcFdheRgCIAEo",
            "DjIhLkdhbWUuUHJvdG9jYWwuV29ya1NoZWRTcGVlZFVwV2F5IicKEVNDV29y",
            "a1NoZWRTcGVlZFVwEhIKClVubG9ja1RpbWUYASABKAMi3gEKEUNTTWFub3JM",
            "b2dzU3RydWN0EhEKCVN0ZWFsVGltZRgBIAEoAxILCgNVaWQYAiABKAMSMgoN",
            "U3RlYWxDcm9wSW5mbxgDIAMoCzIbLkdhbWUuUHJvdG9jYWwuQ1NHb29kU3Ry",
            "dWN0EjAKCVN0ZWFsVHlwZRgEIAEoDjIdLkdhbWUuUHJvdG9jYWwuTWFub3JT",
            "dGVhbFR5cGUSDwoHSXNTdGVhbBgFIAEoCBIPCgdBY2NvdW50GAYgASgJEg0K",
            "BUltYWdlGAcgASgFEhIKCkV4cGVyaWVuY2UYCCABKAUiQgoLU0NNYW5vckxv",
            "Z3MSMwoJU3RlYWxJbmZvGAEgAygLMiAuR2FtZS5Qcm90b2NhbC5DU01hbm9y",
            "TG9nc1N0cnVjdCJIChFTQ01hcm1vdEF3YXJkSW5mbxIzCglBd2FyZEluZm8Y",
            "ASABKAsyIC5HYW1lLlByb3RvY2FsLkNTV2FyZUhvdXNlU3RydWN0IiMKD0NT",
            "T25lc2VsZk1hcm1vdBIQCghJc0FkdmVydBgBIAEoCCJGCg9TQ09uZXNlbGZN",
            "YXJtb3QSMwoJQXdhcmRJbmZvGAEgAygLMiAuR2FtZS5Qcm90b2NhbC5DU1dh",
            "cmVIb3VzZVN0cnVjdCI1Cg5DU0ZyaWVuZE1hcm1vdBIRCglGcmllbmRVaWQY",
            "ASABKAMSEAoISXNBZHZlcnQYAiABKAgiRQoOU0NGcmllbmRNYXJtb3QSMwoJ",
            "QXdhcmRJbmZvGAEgAygLMiAuR2FtZS5Qcm90b2NhbC5DU1dhcmVIb3VzZVN0",
            "cnVjdCIeCgxTQ0Nyb3BNYXR1cmUSDgoGTWF0dXJlGAEgASgIIjwKFUNTTWFu",
            "b3JEZWNvcmF0ZVJvdGF0ZRIOCgZTb2lsSWQYASABKAUSEwoLUm90YXRlSW5k",
            "ZXgYAiABKAUiHAoKQ1NEZXJlY3RVcBIOCgZTb2lsSWQYASABKAUiIAoOU0NP",
            "bmNlV2F0ZXJpbmcSDgoGU29pbElkGAEgAygDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Game.Protocal.EnumTypeReflection.Descriptor, global::Game.Protocal.WarehouseReflection.Descriptor, global::Game.Protocal.StagePropertyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSDrag), global::Game.Protocal.CSDrag.Parser, new[]{ "Type", "Xaxle", "Yaxle", "GoodId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCDrag), global::Game.Protocal.SCDrag.Parser, new[]{ "SoilId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSChangeLocation), global::Game.Protocal.CSChangeLocation.Parser, new[]{ "SoilId", "Xaxle", "Yaxle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSPlantStruct), global::Game.Protocal.CSPlantStruct.Parser, new[]{ "SoilId", "CropGoodId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSPlantData), global::Game.Protocal.CSPlantData.Parser, new[]{ "PlantInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCPlantResult), global::Game.Protocal.SCPlantResult.Parser, new[]{ "PlantResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSEradicate), global::Game.Protocal.CSEradicate.Parser, new[]{ "SoilId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSHarvestStruct), global::Game.Protocal.CSHarvestStruct.Parser, new[]{ "SoilId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSHarvestData), global::Game.Protocal.CSHarvestData.Parser, new[]{ "HarvestInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCHarvestStruct), global::Game.Protocal.SCHarvestStruct.Parser, new[]{ "SoilId", "HarvestId", "HarvestNum", "HarvestExperience" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCHarvestData), global::Game.Protocal.SCHarvestData.Parser, new[]{ "HarvestResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSStealStruct), global::Game.Protocal.CSStealStruct.Parser, new[]{ "SoilId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSStealData), global::Game.Protocal.CSStealData.Parser, new[]{ "StealInfo", "StealUid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCStealResult), global::Game.Protocal.SCStealResult.Parser, new[]{ "SoilId", "StealId", "StealNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCStealData), global::Game.Protocal.SCStealData.Parser, new[]{ "StealResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCManorStruct), global::Game.Protocal.SCManorStruct.Parser, new[]{ "SoilId", "SoilType", "CropGoodId", "Yield", "TotalYield", "SoilStatus", "Xaxle", "Yaxle", "NextTime", "ParcelDivision", "IsSteal", "BoxCountDown", "BoxIsUnLocking", "DecorateRotateIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCUnlockAreaStruct), global::Game.Protocal.SCUnlockAreaStruct.Parser, new[]{ "AreaId", "State", "AreaUnlockTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCManorData), global::Game.Protocal.SCManorData.Parser, new[]{ "ManorInfo", "UnlockAreaInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSFertilizer), global::Game.Protocal.CSFertilizer.Parser, new[]{ "SoilId", "FertilizerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSQueryOther), global::Game.Protocal.CSQueryOther.Parser, new[]{ "OtherUid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCManorFriendData), global::Game.Protocal.SCManorFriendData.Parser, new[]{ "OtherManorInfo", "UnlockAreaInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSUnlockArea), global::Game.Protocal.CSUnlockArea.Parser, new[]{ "AreaId", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCUnlockArea), global::Game.Protocal.SCUnlockArea.Parser, new[]{ "RoadworkTime", "State", "GoodsInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSOrnamentalRecycle), global::Game.Protocal.CSOrnamentalRecycle.Parser, new[]{ "SoilId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCFriendStealStruct), global::Game.Protocal.SCFriendStealStruct.Parser, new[]{ "Uid", "IsSteal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCFriendStealInfo), global::Game.Protocal.SCFriendStealInfo.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSWorkShedSpeedUp), global::Game.Protocal.CSWorkShedSpeedUp.Parser, new[]{ "AreaId", "SpeedUpWay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCWorkShedSpeedUp), global::Game.Protocal.SCWorkShedSpeedUp.Parser, new[]{ "UnlockTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSManorLogsStruct), global::Game.Protocal.CSManorLogsStruct.Parser, new[]{ "StealTime", "Uid", "StealCropInfo", "StealType", "IsSteal", "Account", "Image", "Experience" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCManorLogs), global::Game.Protocal.SCManorLogs.Parser, new[]{ "StealInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCMarmotAwardInfo), global::Game.Protocal.SCMarmotAwardInfo.Parser, new[]{ "AwardInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSOneselfMarmot), global::Game.Protocal.CSOneselfMarmot.Parser, new[]{ "IsAdvert" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCOneselfMarmot), global::Game.Protocal.SCOneselfMarmot.Parser, new[]{ "AwardInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSFriendMarmot), global::Game.Protocal.CSFriendMarmot.Parser, new[]{ "FriendUid", "IsAdvert" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCFriendMarmot), global::Game.Protocal.SCFriendMarmot.Parser, new[]{ "AwardInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCCropMature), global::Game.Protocal.SCCropMature.Parser, new[]{ "Mature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSManorDecorateRotate), global::Game.Protocal.CSManorDecorateRotate.Parser, new[]{ "SoilId", "RotateIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSDerectUp), global::Game.Protocal.CSDerectUp.Parser, new[]{ "SoilId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCOnceWatering), global::Game.Protocal.SCOnceWatering.Parser, new[]{ "SoilId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 拖拽创建道具
  /// </summary>
  public sealed partial class CSDrag : pb::IMessage<CSDrag> {
    private static readonly pb::MessageParser<CSDrag> _parser = new pb::MessageParser<CSDrag>(() => new CSDrag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDrag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrag(CSDrag other) : this() {
      type_ = other.type_;
      xaxle_ = other.xaxle_;
      yaxle_ = other.yaxle_;
      goodId_ = other.goodId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrag Clone() {
      return new CSDrag(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 道具类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Xaxle" field.</summary>
    public const int XaxleFieldNumber = 2;
    private float xaxle_;
    /// <summary>
    /// x轴信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xaxle {
      get { return xaxle_; }
      set {
        xaxle_ = value;
      }
    }

    /// <summary>Field number for the "Yaxle" field.</summary>
    public const int YaxleFieldNumber = 3;
    private float yaxle_;
    /// <summary>
    /// y轴信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaxle {
      get { return yaxle_; }
      set {
        yaxle_ = value;
      }
    }

    /// <summary>Field number for the "GoodId" field.</summary>
    public const int GoodIdFieldNumber = 4;
    private int goodId_;
    /// <summary>
    /// 拖拽物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodId {
      get { return goodId_; }
      set {
        goodId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSDrag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSDrag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xaxle, other.Xaxle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaxle, other.Yaxle)) return false;
      if (GoodId != other.GoodId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Xaxle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xaxle);
      if (Yaxle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaxle);
      if (GoodId != 0) hash ^= GoodId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Xaxle != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Xaxle);
      }
      if (Yaxle != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Yaxle);
      }
      if (GoodId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GoodId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Xaxle != 0F) {
        size += 1 + 4;
      }
      if (Yaxle != 0F) {
        size += 1 + 4;
      }
      if (GoodId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSDrag other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Xaxle != 0F) {
        Xaxle = other.Xaxle;
      }
      if (other.Yaxle != 0F) {
        Yaxle = other.Yaxle;
      }
      if (other.GoodId != 0) {
        GoodId = other.GoodId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 21: {
            Xaxle = input.ReadFloat();
            break;
          }
          case 29: {
            Yaxle = input.ReadFloat();
            break;
          }
          case 32: {
            GoodId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCDrag : pb::IMessage<SCDrag> {
    private static readonly pb::MessageParser<SCDrag> _parser = new pb::MessageParser<SCDrag>(() => new SCDrag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCDrag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrag(SCDrag other) : this() {
      soilId_ = other.soilId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrag Clone() {
      return new SCDrag(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    /// <summary>
    /// 拖拽道具唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCDrag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCDrag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCDrag other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 交换位置
  /// </summary>
  public sealed partial class CSChangeLocation : pb::IMessage<CSChangeLocation> {
    private static readonly pb::MessageParser<CSChangeLocation> _parser = new pb::MessageParser<CSChangeLocation>(() => new CSChangeLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChangeLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChangeLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChangeLocation(CSChangeLocation other) : this() {
      soilId_ = other.soilId_;
      xaxle_ = other.xaxle_;
      yaxle_ = other.yaxle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChangeLocation Clone() {
      return new CSChangeLocation(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    /// <summary>
    /// 地id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    /// <summary>Field number for the "Xaxle" field.</summary>
    public const int XaxleFieldNumber = 2;
    private float xaxle_;
    /// <summary>
    /// x轴信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xaxle {
      get { return xaxle_; }
      set {
        xaxle_ = value;
      }
    }

    /// <summary>Field number for the "Yaxle" field.</summary>
    public const int YaxleFieldNumber = 3;
    private float yaxle_;
    /// <summary>
    /// y轴信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaxle {
      get { return yaxle_; }
      set {
        yaxle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSChangeLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSChangeLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xaxle, other.Xaxle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaxle, other.Yaxle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (Xaxle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xaxle);
      if (Yaxle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaxle);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (Xaxle != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Xaxle);
      }
      if (Yaxle != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Yaxle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (Xaxle != 0F) {
        size += 1 + 4;
      }
      if (Yaxle != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSChangeLocation other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      if (other.Xaxle != 0F) {
        Xaxle = other.Xaxle;
      }
      if (other.Yaxle != 0F) {
        Yaxle = other.Yaxle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
          case 21: {
            Xaxle = input.ReadFloat();
            break;
          }
          case 29: {
            Yaxle = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 种植
  /// </summary>
  public sealed partial class CSPlantStruct : pb::IMessage<CSPlantStruct> {
    private static readonly pb::MessageParser<CSPlantStruct> _parser = new pb::MessageParser<CSPlantStruct>(() => new CSPlantStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlantStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPlantStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPlantStruct(CSPlantStruct other) : this() {
      soilId_ = other.soilId_;
      cropGoodId_ = other.cropGoodId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPlantStruct Clone() {
      return new CSPlantStruct(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    /// <summary>
    /// 种植地id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    /// <summary>Field number for the "CropGoodId" field.</summary>
    public const int CropGoodIdFieldNumber = 2;
    private long cropGoodId_;
    /// <summary>
    /// 种植道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CropGoodId {
      get { return cropGoodId_; }
      set {
        cropGoodId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPlantStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPlantStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      if (CropGoodId != other.CropGoodId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (CropGoodId != 0L) hash ^= CropGoodId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (CropGoodId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CropGoodId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (CropGoodId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CropGoodId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPlantStruct other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      if (other.CropGoodId != 0L) {
        CropGoodId = other.CropGoodId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
          case 16: {
            CropGoodId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSPlantData : pb::IMessage<CSPlantData> {
    private static readonly pb::MessageParser<CSPlantData> _parser = new pb::MessageParser<CSPlantData>(() => new CSPlantData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlantData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPlantData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPlantData(CSPlantData other) : this() {
      plantInfo_ = other.plantInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPlantData Clone() {
      return new CSPlantData(this);
    }

    /// <summary>Field number for the "PlantInfo" field.</summary>
    public const int PlantInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSPlantStruct> _repeated_plantInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSPlantStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSPlantStruct> plantInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSPlantStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSPlantStruct> PlantInfo {
      get { return plantInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPlantData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPlantData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plantInfo_.Equals(other.plantInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plantInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plantInfo_.WriteTo(output, _repeated_plantInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plantInfo_.CalculateSize(_repeated_plantInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPlantData other) {
      if (other == null) {
        return;
      }
      plantInfo_.Add(other.plantInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plantInfo_.AddEntriesFrom(input, _repeated_plantInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 种植结果
  /// </summary>
  public sealed partial class SCPlantResult : pb::IMessage<SCPlantResult> {
    private static readonly pb::MessageParser<SCPlantResult> _parser = new pb::MessageParser<SCPlantResult>(() => new SCPlantResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPlantResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPlantResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPlantResult(SCPlantResult other) : this() {
      plantResult_ = other.plantResult_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPlantResult Clone() {
      return new SCPlantResult(this);
    }

    /// <summary>Field number for the "PlantResult" field.</summary>
    public const int PlantResultFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSPlantStruct> _repeated_plantResult_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSPlantStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSPlantStruct> plantResult_ = new pbc::RepeatedField<global::Game.Protocal.CSPlantStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSPlantStruct> PlantResult {
      get { return plantResult_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPlantResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPlantResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plantResult_.Equals(other.plantResult_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plantResult_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plantResult_.WriteTo(output, _repeated_plantResult_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plantResult_.CalculateSize(_repeated_plantResult_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPlantResult other) {
      if (other == null) {
        return;
      }
      plantResult_.Add(other.plantResult_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plantResult_.AddEntriesFrom(input, _repeated_plantResult_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 提前铲除种植物
  /// </summary>
  public sealed partial class CSEradicate : pb::IMessage<CSEradicate> {
    private static readonly pb::MessageParser<CSEradicate> _parser = new pb::MessageParser<CSEradicate>(() => new CSEradicate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEradicate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSEradicate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSEradicate(CSEradicate other) : this() {
      soilId_ = other.soilId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSEradicate Clone() {
      return new CSEradicate(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    /// <summary>
    /// 种植地id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSEradicate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSEradicate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSEradicate other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一键收获
  /// </summary>
  public sealed partial class CSHarvestStruct : pb::IMessage<CSHarvestStruct> {
    private static readonly pb::MessageParser<CSHarvestStruct> _parser = new pb::MessageParser<CSHarvestStruct>(() => new CSHarvestStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHarvestStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHarvestStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHarvestStruct(CSHarvestStruct other) : this() {
      soilId_ = other.soilId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHarvestStruct Clone() {
      return new CSHarvestStruct(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    /// <summary>
    /// 种植地id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSHarvestStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSHarvestStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSHarvestStruct other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSHarvestData : pb::IMessage<CSHarvestData> {
    private static readonly pb::MessageParser<CSHarvestData> _parser = new pb::MessageParser<CSHarvestData>(() => new CSHarvestData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHarvestData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHarvestData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHarvestData(CSHarvestData other) : this() {
      harvestInfo_ = other.harvestInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHarvestData Clone() {
      return new CSHarvestData(this);
    }

    /// <summary>Field number for the "HarvestInfo" field.</summary>
    public const int HarvestInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSHarvestStruct> _repeated_harvestInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSHarvestStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSHarvestStruct> harvestInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSHarvestStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSHarvestStruct> HarvestInfo {
      get { return harvestInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSHarvestData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSHarvestData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!harvestInfo_.Equals(other.harvestInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= harvestInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      harvestInfo_.WriteTo(output, _repeated_harvestInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += harvestInfo_.CalculateSize(_repeated_harvestInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSHarvestData other) {
      if (other == null) {
        return;
      }
      harvestInfo_.Add(other.harvestInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            harvestInfo_.AddEntriesFrom(input, _repeated_harvestInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一键收获结果
  /// </summary>
  public sealed partial class SCHarvestStruct : pb::IMessage<SCHarvestStruct> {
    private static readonly pb::MessageParser<SCHarvestStruct> _parser = new pb::MessageParser<SCHarvestStruct>(() => new SCHarvestStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCHarvestStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHarvestStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHarvestStruct(SCHarvestStruct other) : this() {
      soilId_ = other.soilId_;
      harvestId_ = other.harvestId_;
      harvestNum_ = other.harvestNum_;
      harvestExperience_ = other.harvestExperience_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHarvestStruct Clone() {
      return new SCHarvestStruct(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    /// <summary>
    /// 种植地id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    /// <summary>Field number for the "HarvestId" field.</summary>
    public const int HarvestIdFieldNumber = 2;
    private int harvestId_;
    /// <summary>
    /// 收获物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HarvestId {
      get { return harvestId_; }
      set {
        harvestId_ = value;
      }
    }

    /// <summary>Field number for the "HarvestNum" field.</summary>
    public const int HarvestNumFieldNumber = 3;
    private int harvestNum_;
    /// <summary>
    /// 收获物数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HarvestNum {
      get { return harvestNum_; }
      set {
        harvestNum_ = value;
      }
    }

    /// <summary>Field number for the "HarvestExperience" field.</summary>
    public const int HarvestExperienceFieldNumber = 4;
    private int harvestExperience_;
    /// <summary>
    /// 收获经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HarvestExperience {
      get { return harvestExperience_; }
      set {
        harvestExperience_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCHarvestStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCHarvestStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      if (HarvestId != other.HarvestId) return false;
      if (HarvestNum != other.HarvestNum) return false;
      if (HarvestExperience != other.HarvestExperience) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (HarvestId != 0) hash ^= HarvestId.GetHashCode();
      if (HarvestNum != 0) hash ^= HarvestNum.GetHashCode();
      if (HarvestExperience != 0) hash ^= HarvestExperience.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (HarvestId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HarvestId);
      }
      if (HarvestNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HarvestNum);
      }
      if (HarvestExperience != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HarvestExperience);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (HarvestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HarvestId);
      }
      if (HarvestNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HarvestNum);
      }
      if (HarvestExperience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HarvestExperience);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCHarvestStruct other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      if (other.HarvestId != 0) {
        HarvestId = other.HarvestId;
      }
      if (other.HarvestNum != 0) {
        HarvestNum = other.HarvestNum;
      }
      if (other.HarvestExperience != 0) {
        HarvestExperience = other.HarvestExperience;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
          case 16: {
            HarvestId = input.ReadInt32();
            break;
          }
          case 24: {
            HarvestNum = input.ReadInt32();
            break;
          }
          case 32: {
            HarvestExperience = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCHarvestData : pb::IMessage<SCHarvestData> {
    private static readonly pb::MessageParser<SCHarvestData> _parser = new pb::MessageParser<SCHarvestData>(() => new SCHarvestData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCHarvestData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHarvestData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHarvestData(SCHarvestData other) : this() {
      harvestResult_ = other.harvestResult_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHarvestData Clone() {
      return new SCHarvestData(this);
    }

    /// <summary>Field number for the "HarvestResult" field.</summary>
    public const int HarvestResultFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCHarvestStruct> _repeated_harvestResult_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.SCHarvestStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCHarvestStruct> harvestResult_ = new pbc::RepeatedField<global::Game.Protocal.SCHarvestStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCHarvestStruct> HarvestResult {
      get { return harvestResult_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCHarvestData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCHarvestData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!harvestResult_.Equals(other.harvestResult_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= harvestResult_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      harvestResult_.WriteTo(output, _repeated_harvestResult_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += harvestResult_.CalculateSize(_repeated_harvestResult_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCHarvestData other) {
      if (other == null) {
        return;
      }
      harvestResult_.Add(other.harvestResult_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            harvestResult_.AddEntriesFrom(input, _repeated_harvestResult_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 偷取
  /// </summary>
  public sealed partial class CSStealStruct : pb::IMessage<CSStealStruct> {
    private static readonly pb::MessageParser<CSStealStruct> _parser = new pb::MessageParser<CSStealStruct>(() => new CSStealStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStealStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStealStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStealStruct(CSStealStruct other) : this() {
      soilId_ = other.soilId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStealStruct Clone() {
      return new CSStealStruct(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    /// <summary>
    /// 种植地id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSStealStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSStealStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSStealStruct other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSStealData : pb::IMessage<CSStealData> {
    private static readonly pb::MessageParser<CSStealData> _parser = new pb::MessageParser<CSStealData>(() => new CSStealData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStealData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStealData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStealData(CSStealData other) : this() {
      stealInfo_ = other.stealInfo_.Clone();
      stealUid_ = other.stealUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStealData Clone() {
      return new CSStealData(this);
    }

    /// <summary>Field number for the "StealInfo" field.</summary>
    public const int StealInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSStealStruct> _repeated_stealInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSStealStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSStealStruct> stealInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSStealStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSStealStruct> StealInfo {
      get { return stealInfo_; }
    }

    /// <summary>Field number for the "StealUid" field.</summary>
    public const int StealUidFieldNumber = 2;
    private long stealUid_;
    /// <summary>
    /// 偷取人Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StealUid {
      get { return stealUid_; }
      set {
        stealUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSStealData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSStealData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stealInfo_.Equals(other.stealInfo_)) return false;
      if (StealUid != other.StealUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stealInfo_.GetHashCode();
      if (StealUid != 0L) hash ^= StealUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stealInfo_.WriteTo(output, _repeated_stealInfo_codec);
      if (StealUid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StealUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stealInfo_.CalculateSize(_repeated_stealInfo_codec);
      if (StealUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StealUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSStealData other) {
      if (other == null) {
        return;
      }
      stealInfo_.Add(other.stealInfo_);
      if (other.StealUid != 0L) {
        StealUid = other.StealUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stealInfo_.AddEntriesFrom(input, _repeated_stealInfo_codec);
            break;
          }
          case 16: {
            StealUid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 偷取结果
  /// </summary>
  public sealed partial class SCStealResult : pb::IMessage<SCStealResult> {
    private static readonly pb::MessageParser<SCStealResult> _parser = new pb::MessageParser<SCStealResult>(() => new SCStealResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCStealResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStealResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStealResult(SCStealResult other) : this() {
      soilId_ = other.soilId_;
      stealId_ = other.stealId_;
      stealNum_ = other.stealNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStealResult Clone() {
      return new SCStealResult(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    /// <summary>
    /// 种植地id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    /// <summary>Field number for the "StealId" field.</summary>
    public const int StealIdFieldNumber = 2;
    private int stealId_;
    /// <summary>
    /// 偷取物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StealId {
      get { return stealId_; }
      set {
        stealId_ = value;
      }
    }

    /// <summary>Field number for the "StealNum" field.</summary>
    public const int StealNumFieldNumber = 3;
    private int stealNum_;
    /// <summary>
    /// 偷取数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StealNum {
      get { return stealNum_; }
      set {
        stealNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCStealResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCStealResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      if (StealId != other.StealId) return false;
      if (StealNum != other.StealNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (StealId != 0) hash ^= StealId.GetHashCode();
      if (StealNum != 0) hash ^= StealNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (StealId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StealId);
      }
      if (StealNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StealNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (StealId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StealId);
      }
      if (StealNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StealNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCStealResult other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      if (other.StealId != 0) {
        StealId = other.StealId;
      }
      if (other.StealNum != 0) {
        StealNum = other.StealNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
          case 16: {
            StealId = input.ReadInt32();
            break;
          }
          case 24: {
            StealNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCStealData : pb::IMessage<SCStealData> {
    private static readonly pb::MessageParser<SCStealData> _parser = new pb::MessageParser<SCStealData>(() => new SCStealData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCStealData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStealData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStealData(SCStealData other) : this() {
      stealResult_ = other.stealResult_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStealData Clone() {
      return new SCStealData(this);
    }

    /// <summary>Field number for the "StealResult" field.</summary>
    public const int StealResultFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCStealResult> _repeated_stealResult_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.SCStealResult.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCStealResult> stealResult_ = new pbc::RepeatedField<global::Game.Protocal.SCStealResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCStealResult> StealResult {
      get { return stealResult_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCStealData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCStealData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stealResult_.Equals(other.stealResult_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stealResult_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stealResult_.WriteTo(output, _repeated_stealResult_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stealResult_.CalculateSize(_repeated_stealResult_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCStealData other) {
      if (other == null) {
        return;
      }
      stealResult_.Add(other.stealResult_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stealResult_.AddEntriesFrom(input, _repeated_stealResult_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 庄园信息
  /// </summary>
  public sealed partial class SCManorStruct : pb::IMessage<SCManorStruct> {
    private static readonly pb::MessageParser<SCManorStruct> _parser = new pb::MessageParser<SCManorStruct>(() => new SCManorStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCManorStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorStruct(SCManorStruct other) : this() {
      soilId_ = other.soilId_;
      soilType_ = other.soilType_;
      cropGoodId_ = other.cropGoodId_;
      yield_ = other.yield_;
      totalYield_ = other.totalYield_;
      soilStatus_ = other.soilStatus_;
      xaxle_ = other.xaxle_;
      yaxle_ = other.yaxle_;
      nextTime_ = other.nextTime_;
      parcelDivision_ = other.parcelDivision_;
      isSteal_ = other.isSteal_;
      boxCountDown_ = other.boxCountDown_;
      boxIsUnLocking_ = other.boxIsUnLocking_;
      decorateRotateIndex_ = other.decorateRotateIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorStruct Clone() {
      return new SCManorStruct(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    /// <summary>
    /// 种植地id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    /// <summary>Field number for the "SoilType" field.</summary>
    public const int SoilTypeFieldNumber = 2;
    private global::Game.Protocal.ManorScene soilType_ = 0;
    /// <summary>
    /// 地类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.Protocal.ManorScene SoilType {
      get { return soilType_; }
      set {
        soilType_ = value;
      }
    }

    /// <summary>Field number for the "CropGoodId" field.</summary>
    public const int CropGoodIdFieldNumber = 3;
    private long cropGoodId_;
    /// <summary>
    /// 种植道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CropGoodId {
      get { return cropGoodId_; }
      set {
        cropGoodId_ = value;
      }
    }

    /// <summary>Field number for the "Yield" field.</summary>
    public const int YieldFieldNumber = 4;
    private int yield_;
    /// <summary>
    /// 当前产量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Yield {
      get { return yield_; }
      set {
        yield_ = value;
      }
    }

    /// <summary>Field number for the "TotalYield" field.</summary>
    public const int TotalYieldFieldNumber = 5;
    private int totalYield_;
    /// <summary>
    /// 总产量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalYield {
      get { return totalYield_; }
      set {
        totalYield_ = value;
      }
    }

    /// <summary>Field number for the "SoilStatus" field.</summary>
    public const int SoilStatusFieldNumber = 6;
    private global::Game.Protocal.PeriodGrow soilStatus_ = 0;
    /// <summary>
    /// 状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.Protocal.PeriodGrow SoilStatus {
      get { return soilStatus_; }
      set {
        soilStatus_ = value;
      }
    }

    /// <summary>Field number for the "Xaxle" field.</summary>
    public const int XaxleFieldNumber = 7;
    private float xaxle_;
    /// <summary>
    /// x轴信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xaxle {
      get { return xaxle_; }
      set {
        xaxle_ = value;
      }
    }

    /// <summary>Field number for the "Yaxle" field.</summary>
    public const int YaxleFieldNumber = 8;
    private float yaxle_;
    /// <summary>
    /// y轴信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaxle {
      get { return yaxle_; }
      set {
        yaxle_ = value;
      }
    }

    /// <summary>Field number for the "NextTime" field.</summary>
    public const int NextTimeFieldNumber = 9;
    private long nextTime_;
    /// <summary>
    /// 成熟时间
    /// 到下一阶段的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextTime {
      get { return nextTime_; }
      set {
        nextTime_ = value;
      }
    }

    /// <summary>Field number for the "ParcelDivision" field.</summary>
    public const int ParcelDivisionFieldNumber = 10;
    private int parcelDivision_;
    /// <summary>
    /// 属于哪个地块
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParcelDivision {
      get { return parcelDivision_; }
      set {
        parcelDivision_ = value;
      }
    }

    /// <summary>Field number for the "IsSteal" field.</summary>
    public const int IsStealFieldNumber = 11;
    private bool isSteal_;
    /// <summary>
    /// 是否能偷取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSteal {
      get { return isSteal_; }
      set {
        isSteal_ = value;
      }
    }

    /// <summary>Field number for the "BoxCountDown" field.</summary>
    public const int BoxCountDownFieldNumber = 12;
    private long boxCountDown_;
    /// <summary>
    /// 宝箱倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BoxCountDown {
      get { return boxCountDown_; }
      set {
        boxCountDown_ = value;
      }
    }

    /// <summary>Field number for the "BoxIsUnLocking" field.</summary>
    public const int BoxIsUnLockingFieldNumber = 13;
    private bool boxIsUnLocking_;
    /// <summary>
    /// 宝箱是否在解锁中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoxIsUnLocking {
      get { return boxIsUnLocking_; }
      set {
        boxIsUnLocking_ = value;
      }
    }

    /// <summary>Field number for the "DecorateRotateIndex" field.</summary>
    public const int DecorateRotateIndexFieldNumber = 14;
    private int decorateRotateIndex_;
    /// <summary>
    /// 装饰物旋转下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DecorateRotateIndex {
      get { return decorateRotateIndex_; }
      set {
        decorateRotateIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCManorStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCManorStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      if (SoilType != other.SoilType) return false;
      if (CropGoodId != other.CropGoodId) return false;
      if (Yield != other.Yield) return false;
      if (TotalYield != other.TotalYield) return false;
      if (SoilStatus != other.SoilStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xaxle, other.Xaxle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaxle, other.Yaxle)) return false;
      if (NextTime != other.NextTime) return false;
      if (ParcelDivision != other.ParcelDivision) return false;
      if (IsSteal != other.IsSteal) return false;
      if (BoxCountDown != other.BoxCountDown) return false;
      if (BoxIsUnLocking != other.BoxIsUnLocking) return false;
      if (DecorateRotateIndex != other.DecorateRotateIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (SoilType != 0) hash ^= SoilType.GetHashCode();
      if (CropGoodId != 0L) hash ^= CropGoodId.GetHashCode();
      if (Yield != 0) hash ^= Yield.GetHashCode();
      if (TotalYield != 0) hash ^= TotalYield.GetHashCode();
      if (SoilStatus != 0) hash ^= SoilStatus.GetHashCode();
      if (Xaxle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xaxle);
      if (Yaxle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaxle);
      if (NextTime != 0L) hash ^= NextTime.GetHashCode();
      if (ParcelDivision != 0) hash ^= ParcelDivision.GetHashCode();
      if (IsSteal != false) hash ^= IsSteal.GetHashCode();
      if (BoxCountDown != 0L) hash ^= BoxCountDown.GetHashCode();
      if (BoxIsUnLocking != false) hash ^= BoxIsUnLocking.GetHashCode();
      if (DecorateRotateIndex != 0) hash ^= DecorateRotateIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (SoilType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SoilType);
      }
      if (CropGoodId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CropGoodId);
      }
      if (Yield != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Yield);
      }
      if (TotalYield != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalYield);
      }
      if (SoilStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SoilStatus);
      }
      if (Xaxle != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Xaxle);
      }
      if (Yaxle != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Yaxle);
      }
      if (NextTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(NextTime);
      }
      if (ParcelDivision != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ParcelDivision);
      }
      if (IsSteal != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsSteal);
      }
      if (BoxCountDown != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(BoxCountDown);
      }
      if (BoxIsUnLocking != false) {
        output.WriteRawTag(104);
        output.WriteBool(BoxIsUnLocking);
      }
      if (DecorateRotateIndex != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(DecorateRotateIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (SoilType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SoilType);
      }
      if (CropGoodId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CropGoodId);
      }
      if (Yield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Yield);
      }
      if (TotalYield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalYield);
      }
      if (SoilStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SoilStatus);
      }
      if (Xaxle != 0F) {
        size += 1 + 4;
      }
      if (Yaxle != 0F) {
        size += 1 + 4;
      }
      if (NextTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextTime);
      }
      if (ParcelDivision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParcelDivision);
      }
      if (IsSteal != false) {
        size += 1 + 1;
      }
      if (BoxCountDown != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BoxCountDown);
      }
      if (BoxIsUnLocking != false) {
        size += 1 + 1;
      }
      if (DecorateRotateIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DecorateRotateIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCManorStruct other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      if (other.SoilType != 0) {
        SoilType = other.SoilType;
      }
      if (other.CropGoodId != 0L) {
        CropGoodId = other.CropGoodId;
      }
      if (other.Yield != 0) {
        Yield = other.Yield;
      }
      if (other.TotalYield != 0) {
        TotalYield = other.TotalYield;
      }
      if (other.SoilStatus != 0) {
        SoilStatus = other.SoilStatus;
      }
      if (other.Xaxle != 0F) {
        Xaxle = other.Xaxle;
      }
      if (other.Yaxle != 0F) {
        Yaxle = other.Yaxle;
      }
      if (other.NextTime != 0L) {
        NextTime = other.NextTime;
      }
      if (other.ParcelDivision != 0) {
        ParcelDivision = other.ParcelDivision;
      }
      if (other.IsSteal != false) {
        IsSteal = other.IsSteal;
      }
      if (other.BoxCountDown != 0L) {
        BoxCountDown = other.BoxCountDown;
      }
      if (other.BoxIsUnLocking != false) {
        BoxIsUnLocking = other.BoxIsUnLocking;
      }
      if (other.DecorateRotateIndex != 0) {
        DecorateRotateIndex = other.DecorateRotateIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
          case 16: {
            SoilType = (global::Game.Protocal.ManorScene) input.ReadEnum();
            break;
          }
          case 24: {
            CropGoodId = input.ReadInt64();
            break;
          }
          case 32: {
            Yield = input.ReadInt32();
            break;
          }
          case 40: {
            TotalYield = input.ReadInt32();
            break;
          }
          case 48: {
            SoilStatus = (global::Game.Protocal.PeriodGrow) input.ReadEnum();
            break;
          }
          case 61: {
            Xaxle = input.ReadFloat();
            break;
          }
          case 69: {
            Yaxle = input.ReadFloat();
            break;
          }
          case 72: {
            NextTime = input.ReadInt64();
            break;
          }
          case 80: {
            ParcelDivision = input.ReadInt32();
            break;
          }
          case 88: {
            IsSteal = input.ReadBool();
            break;
          }
          case 96: {
            BoxCountDown = input.ReadInt64();
            break;
          }
          case 104: {
            BoxIsUnLocking = input.ReadBool();
            break;
          }
          case 112: {
            DecorateRotateIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大区域解锁
  /// </summary>
  public sealed partial class SCUnlockAreaStruct : pb::IMessage<SCUnlockAreaStruct> {
    private static readonly pb::MessageParser<SCUnlockAreaStruct> _parser = new pb::MessageParser<SCUnlockAreaStruct>(() => new SCUnlockAreaStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUnlockAreaStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUnlockAreaStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUnlockAreaStruct(SCUnlockAreaStruct other) : this() {
      areaId_ = other.areaId_;
      state_ = other.state_;
      areaUnlockTime_ = other.areaUnlockTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUnlockAreaStruct Clone() {
      return new SCUnlockAreaStruct(this);
    }

    /// <summary>Field number for the "AreaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    /// <summary>
    /// 区域id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Game.Protocal.AreaState state_ = 0;
    /// <summary>
    /// 区域状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.Protocal.AreaState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "AreaUnlockTime" field.</summary>
    public const int AreaUnlockTimeFieldNumber = 3;
    private long areaUnlockTime_;
    /// <summary>
    /// 区域解锁时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AreaUnlockTime {
      get { return areaUnlockTime_; }
      set {
        areaUnlockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUnlockAreaStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUnlockAreaStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (State != other.State) return false;
      if (AreaUnlockTime != other.AreaUnlockTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (AreaUnlockTime != 0L) hash ^= AreaUnlockTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (AreaUnlockTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AreaUnlockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (AreaUnlockTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AreaUnlockTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUnlockAreaStruct other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.AreaUnlockTime != 0L) {
        AreaUnlockTime = other.AreaUnlockTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
          case 16: {
            State = (global::Game.Protocal.AreaState) input.ReadEnum();
            break;
          }
          case 24: {
            AreaUnlockTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCManorData : pb::IMessage<SCManorData> {
    private static readonly pb::MessageParser<SCManorData> _parser = new pb::MessageParser<SCManorData>(() => new SCManorData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCManorData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorData(SCManorData other) : this() {
      manorInfo_ = other.manorInfo_.Clone();
      unlockAreaInfo_ = other.unlockAreaInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorData Clone() {
      return new SCManorData(this);
    }

    /// <summary>Field number for the "ManorInfo" field.</summary>
    public const int ManorInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCManorStruct> _repeated_manorInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.SCManorStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCManorStruct> manorInfo_ = new pbc::RepeatedField<global::Game.Protocal.SCManorStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCManorStruct> ManorInfo {
      get { return manorInfo_; }
    }

    /// <summary>Field number for the "UnlockAreaInfo" field.</summary>
    public const int UnlockAreaInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCUnlockAreaStruct> _repeated_unlockAreaInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Game.Protocal.SCUnlockAreaStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCUnlockAreaStruct> unlockAreaInfo_ = new pbc::RepeatedField<global::Game.Protocal.SCUnlockAreaStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCUnlockAreaStruct> UnlockAreaInfo {
      get { return unlockAreaInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCManorData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCManorData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!manorInfo_.Equals(other.manorInfo_)) return false;
      if(!unlockAreaInfo_.Equals(other.unlockAreaInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= manorInfo_.GetHashCode();
      hash ^= unlockAreaInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      manorInfo_.WriteTo(output, _repeated_manorInfo_codec);
      unlockAreaInfo_.WriteTo(output, _repeated_unlockAreaInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += manorInfo_.CalculateSize(_repeated_manorInfo_codec);
      size += unlockAreaInfo_.CalculateSize(_repeated_unlockAreaInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCManorData other) {
      if (other == null) {
        return;
      }
      manorInfo_.Add(other.manorInfo_);
      unlockAreaInfo_.Add(other.unlockAreaInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            manorInfo_.AddEntriesFrom(input, _repeated_manorInfo_codec);
            break;
          }
          case 18: {
            unlockAreaInfo_.AddEntriesFrom(input, _repeated_unlockAreaInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 使用化肥
  /// </summary>
  public sealed partial class CSFertilizer : pb::IMessage<CSFertilizer> {
    private static readonly pb::MessageParser<CSFertilizer> _parser = new pb::MessageParser<CSFertilizer>(() => new CSFertilizer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFertilizer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFertilizer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFertilizer(CSFertilizer other) : this() {
      soilId_ = other.soilId_;
      fertilizerId_ = other.fertilizerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFertilizer Clone() {
      return new CSFertilizer(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    /// <summary>
    /// 种植地id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    /// <summary>Field number for the "FertilizerId" field.</summary>
    public const int FertilizerIdFieldNumber = 2;
    private int fertilizerId_;
    /// <summary>
    /// 道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FertilizerId {
      get { return fertilizerId_; }
      set {
        fertilizerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSFertilizer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSFertilizer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      if (FertilizerId != other.FertilizerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (FertilizerId != 0) hash ^= FertilizerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (FertilizerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FertilizerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (FertilizerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FertilizerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSFertilizer other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      if (other.FertilizerId != 0) {
        FertilizerId = other.FertilizerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
          case 16: {
            FertilizerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 查询其它人庄园信息
  /// </summary>
  public sealed partial class CSQueryOther : pb::IMessage<CSQueryOther> {
    private static readonly pb::MessageParser<CSQueryOther> _parser = new pb::MessageParser<CSQueryOther>(() => new CSQueryOther());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSQueryOther> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryOther() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryOther(CSQueryOther other) : this() {
      otherUid_ = other.otherUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryOther Clone() {
      return new CSQueryOther(this);
    }

    /// <summary>Field number for the "OtherUid" field.</summary>
    public const int OtherUidFieldNumber = 1;
    private long otherUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OtherUid {
      get { return otherUid_; }
      set {
        otherUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSQueryOther);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSQueryOther other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OtherUid != other.OtherUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OtherUid != 0L) hash ^= OtherUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OtherUid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OtherUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OtherUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OtherUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSQueryOther other) {
      if (other == null) {
        return;
      }
      if (other.OtherUid != 0L) {
        OtherUid = other.OtherUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OtherUid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 返回其它人庄园信息
  /// </summary>
  public sealed partial class SCManorFriendData : pb::IMessage<SCManorFriendData> {
    private static readonly pb::MessageParser<SCManorFriendData> _parser = new pb::MessageParser<SCManorFriendData>(() => new SCManorFriendData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCManorFriendData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorFriendData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorFriendData(SCManorFriendData other) : this() {
      otherManorInfo_ = other.otherManorInfo_.Clone();
      unlockAreaInfo_ = other.unlockAreaInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorFriendData Clone() {
      return new SCManorFriendData(this);
    }

    /// <summary>Field number for the "OtherManorInfo" field.</summary>
    public const int OtherManorInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCManorStruct> _repeated_otherManorInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.SCManorStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCManorStruct> otherManorInfo_ = new pbc::RepeatedField<global::Game.Protocal.SCManorStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCManorStruct> OtherManorInfo {
      get { return otherManorInfo_; }
    }

    /// <summary>Field number for the "UnlockAreaInfo" field.</summary>
    public const int UnlockAreaInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCUnlockAreaStruct> _repeated_unlockAreaInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Game.Protocal.SCUnlockAreaStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCUnlockAreaStruct> unlockAreaInfo_ = new pbc::RepeatedField<global::Game.Protocal.SCUnlockAreaStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCUnlockAreaStruct> UnlockAreaInfo {
      get { return unlockAreaInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCManorFriendData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCManorFriendData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!otherManorInfo_.Equals(other.otherManorInfo_)) return false;
      if(!unlockAreaInfo_.Equals(other.unlockAreaInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= otherManorInfo_.GetHashCode();
      hash ^= unlockAreaInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      otherManorInfo_.WriteTo(output, _repeated_otherManorInfo_codec);
      unlockAreaInfo_.WriteTo(output, _repeated_unlockAreaInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += otherManorInfo_.CalculateSize(_repeated_otherManorInfo_codec);
      size += unlockAreaInfo_.CalculateSize(_repeated_unlockAreaInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCManorFriendData other) {
      if (other == null) {
        return;
      }
      otherManorInfo_.Add(other.otherManorInfo_);
      unlockAreaInfo_.Add(other.unlockAreaInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            otherManorInfo_.AddEntriesFrom(input, _repeated_otherManorInfo_codec);
            break;
          }
          case 18: {
            unlockAreaInfo_.AddEntriesFrom(input, _repeated_unlockAreaInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 解锁大区域
  /// </summary>
  public sealed partial class CSUnlockArea : pb::IMessage<CSUnlockArea> {
    private static readonly pb::MessageParser<CSUnlockArea> _parser = new pb::MessageParser<CSUnlockArea>(() => new CSUnlockArea());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUnlockArea> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUnlockArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUnlockArea(CSUnlockArea other) : this() {
      areaId_ = other.areaId_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUnlockArea Clone() {
      return new CSUnlockArea(this);
    }

    /// <summary>Field number for the "AreaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    /// <summary>
    /// 区域id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Game.Protocal.AreaState state_ = 0;
    /// <summary>
    /// 区域状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.Protocal.AreaState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUnlockArea);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUnlockArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUnlockArea other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
          case 16: {
            State = (global::Game.Protocal.AreaState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 解锁大区域返回
  /// </summary>
  public sealed partial class SCUnlockArea : pb::IMessage<SCUnlockArea> {
    private static readonly pb::MessageParser<SCUnlockArea> _parser = new pb::MessageParser<SCUnlockArea>(() => new SCUnlockArea());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUnlockArea> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUnlockArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUnlockArea(SCUnlockArea other) : this() {
      roadworkTime_ = other.roadworkTime_;
      state_ = other.state_;
      goodsInfo_ = other.goodsInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUnlockArea Clone() {
      return new SCUnlockArea(this);
    }

    /// <summary>Field number for the "RoadworkTime" field.</summary>
    public const int RoadworkTimeFieldNumber = 1;
    private long roadworkTime_;
    /// <summary>
    /// 施工时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoadworkTime {
      get { return roadworkTime_; }
      set {
        roadworkTime_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Game.Protocal.AreaState state_ = 0;
    /// <summary>
    /// 状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.Protocal.AreaState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "GoodsInfo" field.</summary>
    public const int GoodsInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCBuyGoodsStruct> _repeated_goodsInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Game.Protocal.SCBuyGoodsStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCBuyGoodsStruct> goodsInfo_ = new pbc::RepeatedField<global::Game.Protocal.SCBuyGoodsStruct>();
    /// <summary>
    /// 大区解锁获得奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCBuyGoodsStruct> GoodsInfo {
      get { return goodsInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUnlockArea);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUnlockArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoadworkTime != other.RoadworkTime) return false;
      if (State != other.State) return false;
      if(!goodsInfo_.Equals(other.goodsInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoadworkTime != 0L) hash ^= RoadworkTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= goodsInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoadworkTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoadworkTime);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      goodsInfo_.WriteTo(output, _repeated_goodsInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoadworkTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadworkTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += goodsInfo_.CalculateSize(_repeated_goodsInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUnlockArea other) {
      if (other == null) {
        return;
      }
      if (other.RoadworkTime != 0L) {
        RoadworkTime = other.RoadworkTime;
      }
      if (other.State != 0) {
        State = other.State;
      }
      goodsInfo_.Add(other.goodsInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoadworkTime = input.ReadInt64();
            break;
          }
          case 16: {
            State = (global::Game.Protocal.AreaState) input.ReadEnum();
            break;
          }
          case 26: {
            goodsInfo_.AddEntriesFrom(input, _repeated_goodsInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装饰物收回
  /// </summary>
  public sealed partial class CSOrnamentalRecycle : pb::IMessage<CSOrnamentalRecycle> {
    private static readonly pb::MessageParser<CSOrnamentalRecycle> _parser = new pb::MessageParser<CSOrnamentalRecycle>(() => new CSOrnamentalRecycle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOrnamentalRecycle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOrnamentalRecycle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOrnamentalRecycle(CSOrnamentalRecycle other) : this() {
      soilId_ = other.soilId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOrnamentalRecycle Clone() {
      return new CSOrnamentalRecycle(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private long soilId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOrnamentalRecycle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOrnamentalRecycle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0L) hash ^= SoilId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SoilId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoilId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOrnamentalRecycle other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0L) {
        SoilId = other.SoilId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 返回好友列表成熟信息
  /// </summary>
  public sealed partial class SCFriendStealStruct : pb::IMessage<SCFriendStealStruct> {
    private static readonly pb::MessageParser<SCFriendStealStruct> _parser = new pb::MessageParser<SCFriendStealStruct>(() => new SCFriendStealStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFriendStealStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendStealStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendStealStruct(SCFriendStealStruct other) : this() {
      uid_ = other.uid_;
      isSteal_ = other.isSteal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendStealStruct Clone() {
      return new SCFriendStealStruct(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "IsSteal" field.</summary>
    public const int IsStealFieldNumber = 2;
    private bool isSteal_;
    /// <summary>
    /// 是否能偷取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSteal {
      get { return isSteal_; }
      set {
        isSteal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFriendStealStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFriendStealStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (IsSteal != other.IsSteal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (IsSteal != false) hash ^= IsSteal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (IsSteal != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSteal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (IsSteal != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFriendStealStruct other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.IsSteal != false) {
        IsSteal = other.IsSteal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            IsSteal = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCFriendStealInfo : pb::IMessage<SCFriendStealInfo> {
    private static readonly pb::MessageParser<SCFriendStealInfo> _parser = new pb::MessageParser<SCFriendStealInfo>(() => new SCFriendStealInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFriendStealInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendStealInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendStealInfo(SCFriendStealInfo other) : this() {
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendStealInfo Clone() {
      return new SCFriendStealInfo(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCFriendStealStruct> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.SCFriendStealStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCFriendStealStruct> info_ = new pbc::RepeatedField<global::Game.Protocal.SCFriendStealStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCFriendStealStruct> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFriendStealInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFriendStealInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFriendStealInfo other) {
      if (other == null) {
        return;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 工棚施工加速
  /// </summary>
  public sealed partial class CSWorkShedSpeedUp : pb::IMessage<CSWorkShedSpeedUp> {
    private static readonly pb::MessageParser<CSWorkShedSpeedUp> _parser = new pb::MessageParser<CSWorkShedSpeedUp>(() => new CSWorkShedSpeedUp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSWorkShedSpeedUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWorkShedSpeedUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWorkShedSpeedUp(CSWorkShedSpeedUp other) : this() {
      areaId_ = other.areaId_;
      speedUpWay_ = other.speedUpWay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWorkShedSpeedUp Clone() {
      return new CSWorkShedSpeedUp(this);
    }

    /// <summary>Field number for the "AreaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    /// <summary>
    /// 区域id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "SpeedUpWay" field.</summary>
    public const int SpeedUpWayFieldNumber = 2;
    private global::Game.Protocal.WorkShedSpeedUpWay speedUpWay_ = 0;
    /// <summary>
    /// 加速方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.Protocal.WorkShedSpeedUpWay SpeedUpWay {
      get { return speedUpWay_; }
      set {
        speedUpWay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSWorkShedSpeedUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSWorkShedSpeedUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (SpeedUpWay != other.SpeedUpWay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (SpeedUpWay != 0) hash ^= SpeedUpWay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      if (SpeedUpWay != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SpeedUpWay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (SpeedUpWay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpeedUpWay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSWorkShedSpeedUp other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      if (other.SpeedUpWay != 0) {
        SpeedUpWay = other.SpeedUpWay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
          case 16: {
            SpeedUpWay = (global::Game.Protocal.WorkShedSpeedUpWay) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 工棚施工加速返回
  /// </summary>
  public sealed partial class SCWorkShedSpeedUp : pb::IMessage<SCWorkShedSpeedUp> {
    private static readonly pb::MessageParser<SCWorkShedSpeedUp> _parser = new pb::MessageParser<SCWorkShedSpeedUp>(() => new SCWorkShedSpeedUp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCWorkShedSpeedUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWorkShedSpeedUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWorkShedSpeedUp(SCWorkShedSpeedUp other) : this() {
      unlockTime_ = other.unlockTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWorkShedSpeedUp Clone() {
      return new SCWorkShedSpeedUp(this);
    }

    /// <summary>Field number for the "UnlockTime" field.</summary>
    public const int UnlockTimeFieldNumber = 1;
    private long unlockTime_;
    /// <summary>
    /// 解锁时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnlockTime {
      get { return unlockTime_; }
      set {
        unlockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCWorkShedSpeedUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCWorkShedSpeedUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnlockTime != other.UnlockTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnlockTime != 0L) hash ^= UnlockTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnlockTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnlockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnlockTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnlockTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCWorkShedSpeedUp other) {
      if (other == null) {
        return;
      }
      if (other.UnlockTime != 0L) {
        UnlockTime = other.UnlockTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnlockTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 庄园日志返回结构
  /// </summary>
  public sealed partial class CSManorLogsStruct : pb::IMessage<CSManorLogsStruct> {
    private static readonly pb::MessageParser<CSManorLogsStruct> _parser = new pb::MessageParser<CSManorLogsStruct>(() => new CSManorLogsStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSManorLogsStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSManorLogsStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSManorLogsStruct(CSManorLogsStruct other) : this() {
      stealTime_ = other.stealTime_;
      uid_ = other.uid_;
      stealCropInfo_ = other.stealCropInfo_.Clone();
      stealType_ = other.stealType_;
      isSteal_ = other.isSteal_;
      account_ = other.account_;
      image_ = other.image_;
      experience_ = other.experience_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSManorLogsStruct Clone() {
      return new CSManorLogsStruct(this);
    }

    /// <summary>Field number for the "StealTime" field.</summary>
    public const int StealTimeFieldNumber = 1;
    private long stealTime_;
    /// <summary>
    /// 偷取时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StealTime {
      get { return stealTime_; }
      set {
        stealTime_ = value;
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    /// <summary>
    /// 偷取人Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "StealCropInfo" field.</summary>
    public const int StealCropInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSGoodStruct> _repeated_stealCropInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Game.Protocal.CSGoodStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSGoodStruct> stealCropInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSGoodStruct>();
    /// <summary>
    /// 偷取农作物信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSGoodStruct> StealCropInfo {
      get { return stealCropInfo_; }
    }

    /// <summary>Field number for the "StealType" field.</summary>
    public const int StealTypeFieldNumber = 4;
    private global::Game.Protocal.ManorStealType stealType_ = 0;
    /// <summary>
    /// 偷取类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.Protocal.ManorStealType StealType {
      get { return stealType_; }
      set {
        stealType_ = value;
      }
    }

    /// <summary>Field number for the "IsSteal" field.</summary>
    public const int IsStealFieldNumber = 5;
    private bool isSteal_;
    /// <summary>
    /// 是否能偷取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSteal {
      get { return isSteal_; }
      set {
        isSteal_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 6;
    private string account_ = "";
    /// <summary>
    /// 偷取人名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Image" field.</summary>
    public const int ImageFieldNumber = 7;
    private int image_;
    /// <summary>
    /// 偷取人头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "Experience" field.</summary>
    public const int ExperienceFieldNumber = 8;
    private int experience_;
    /// <summary>
    /// 偷取人经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSManorLogsStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSManorLogsStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StealTime != other.StealTime) return false;
      if (Uid != other.Uid) return false;
      if(!stealCropInfo_.Equals(other.stealCropInfo_)) return false;
      if (StealType != other.StealType) return false;
      if (IsSteal != other.IsSteal) return false;
      if (Account != other.Account) return false;
      if (Image != other.Image) return false;
      if (Experience != other.Experience) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StealTime != 0L) hash ^= StealTime.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      hash ^= stealCropInfo_.GetHashCode();
      if (StealType != 0) hash ^= StealType.GetHashCode();
      if (IsSteal != false) hash ^= IsSteal.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Image != 0) hash ^= Image.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StealTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StealTime);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      stealCropInfo_.WriteTo(output, _repeated_stealCropInfo_codec);
      if (StealType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) StealType);
      }
      if (IsSteal != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSteal);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Account);
      }
      if (Image != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Image);
      }
      if (Experience != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Experience);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StealTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StealTime);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      size += stealCropInfo_.CalculateSize(_repeated_stealCropInfo_codec);
      if (StealType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StealType);
      }
      if (IsSteal != false) {
        size += 1 + 1;
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Image != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Image);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSManorLogsStruct other) {
      if (other == null) {
        return;
      }
      if (other.StealTime != 0L) {
        StealTime = other.StealTime;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      stealCropInfo_.Add(other.stealCropInfo_);
      if (other.StealType != 0) {
        StealType = other.StealType;
      }
      if (other.IsSteal != false) {
        IsSteal = other.IsSteal;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Image != 0) {
        Image = other.Image;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StealTime = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 26: {
            stealCropInfo_.AddEntriesFrom(input, _repeated_stealCropInfo_codec);
            break;
          }
          case 32: {
            StealType = (global::Game.Protocal.ManorStealType) input.ReadEnum();
            break;
          }
          case 40: {
            IsSteal = input.ReadBool();
            break;
          }
          case 50: {
            Account = input.ReadString();
            break;
          }
          case 56: {
            Image = input.ReadInt32();
            break;
          }
          case 64: {
            Experience = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 庄园日志
  /// </summary>
  public sealed partial class SCManorLogs : pb::IMessage<SCManorLogs> {
    private static readonly pb::MessageParser<SCManorLogs> _parser = new pb::MessageParser<SCManorLogs>(() => new SCManorLogs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCManorLogs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorLogs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorLogs(SCManorLogs other) : this() {
      stealInfo_ = other.stealInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCManorLogs Clone() {
      return new SCManorLogs(this);
    }

    /// <summary>Field number for the "StealInfo" field.</summary>
    public const int StealInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSManorLogsStruct> _repeated_stealInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSManorLogsStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSManorLogsStruct> stealInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSManorLogsStruct>();
    /// <summary>
    /// 偷取信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSManorLogsStruct> StealInfo {
      get { return stealInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCManorLogs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCManorLogs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stealInfo_.Equals(other.stealInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stealInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stealInfo_.WriteTo(output, _repeated_stealInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stealInfo_.CalculateSize(_repeated_stealInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCManorLogs other) {
      if (other == null) {
        return;
      }
      stealInfo_.Add(other.stealInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stealInfo_.AddEntriesFrom(input, _repeated_stealInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求地鼠奖励信息
  /// </summary>
  public sealed partial class SCMarmotAwardInfo : pb::IMessage<SCMarmotAwardInfo> {
    private static readonly pb::MessageParser<SCMarmotAwardInfo> _parser = new pb::MessageParser<SCMarmotAwardInfo>(() => new SCMarmotAwardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMarmotAwardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMarmotAwardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMarmotAwardInfo(SCMarmotAwardInfo other) : this() {
      awardInfo_ = other.awardInfo_ != null ? other.awardInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMarmotAwardInfo Clone() {
      return new SCMarmotAwardInfo(this);
    }

    /// <summary>Field number for the "AwardInfo" field.</summary>
    public const int AwardInfoFieldNumber = 1;
    private global::Game.Protocal.CSWareHouseStruct awardInfo_;
    /// <summary>
    /// 奖励信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.Protocal.CSWareHouseStruct AwardInfo {
      get { return awardInfo_; }
      set {
        awardInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMarmotAwardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMarmotAwardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AwardInfo, other.AwardInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (awardInfo_ != null) hash ^= AwardInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (awardInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AwardInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (awardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AwardInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMarmotAwardInfo other) {
      if (other == null) {
        return;
      }
      if (other.awardInfo_ != null) {
        if (awardInfo_ == null) {
          AwardInfo = new global::Game.Protocal.CSWareHouseStruct();
        }
        AwardInfo.MergeFrom(other.AwardInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (awardInfo_ == null) {
              AwardInfo = new global::Game.Protocal.CSWareHouseStruct();
            }
            input.ReadMessage(AwardInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求自己庄园地鼠奖励
  /// </summary>
  public sealed partial class CSOneselfMarmot : pb::IMessage<CSOneselfMarmot> {
    private static readonly pb::MessageParser<CSOneselfMarmot> _parser = new pb::MessageParser<CSOneselfMarmot>(() => new CSOneselfMarmot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOneselfMarmot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOneselfMarmot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOneselfMarmot(CSOneselfMarmot other) : this() {
      isAdvert_ = other.isAdvert_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOneselfMarmot Clone() {
      return new CSOneselfMarmot(this);
    }

    /// <summary>Field number for the "IsAdvert" field.</summary>
    public const int IsAdvertFieldNumber = 1;
    private bool isAdvert_;
    /// <summary>
    /// 是否观看广告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdvert {
      get { return isAdvert_; }
      set {
        isAdvert_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOneselfMarmot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOneselfMarmot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsAdvert != other.IsAdvert) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsAdvert != false) hash ^= IsAdvert.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAdvert != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAdvert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsAdvert != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOneselfMarmot other) {
      if (other == null) {
        return;
      }
      if (other.IsAdvert != false) {
        IsAdvert = other.IsAdvert;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsAdvert = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取自己庄园的地鼠奖励
  /// </summary>
  public sealed partial class SCOneselfMarmot : pb::IMessage<SCOneselfMarmot> {
    private static readonly pb::MessageParser<SCOneselfMarmot> _parser = new pb::MessageParser<SCOneselfMarmot>(() => new SCOneselfMarmot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOneselfMarmot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOneselfMarmot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOneselfMarmot(SCOneselfMarmot other) : this() {
      awardInfo_ = other.awardInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOneselfMarmot Clone() {
      return new SCOneselfMarmot(this);
    }

    /// <summary>Field number for the "AwardInfo" field.</summary>
    public const int AwardInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSWareHouseStruct> _repeated_awardInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSWareHouseStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSWareHouseStruct> awardInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSWareHouseStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSWareHouseStruct> AwardInfo {
      get { return awardInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOneselfMarmot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOneselfMarmot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!awardInfo_.Equals(other.awardInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= awardInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      awardInfo_.WriteTo(output, _repeated_awardInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awardInfo_.CalculateSize(_repeated_awardInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOneselfMarmot other) {
      if (other == null) {
        return;
      }
      awardInfo_.Add(other.awardInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            awardInfo_.AddEntriesFrom(input, _repeated_awardInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求好友庄园的地鼠奖励
  /// </summary>
  public sealed partial class CSFriendMarmot : pb::IMessage<CSFriendMarmot> {
    private static readonly pb::MessageParser<CSFriendMarmot> _parser = new pb::MessageParser<CSFriendMarmot>(() => new CSFriendMarmot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFriendMarmot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFriendMarmot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFriendMarmot(CSFriendMarmot other) : this() {
      friendUid_ = other.friendUid_;
      isAdvert_ = other.isAdvert_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFriendMarmot Clone() {
      return new CSFriendMarmot(this);
    }

    /// <summary>Field number for the "FriendUid" field.</summary>
    public const int FriendUidFieldNumber = 1;
    private long friendUid_;
    /// <summary>
    /// 好友Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FriendUid {
      get { return friendUid_; }
      set {
        friendUid_ = value;
      }
    }

    /// <summary>Field number for the "IsAdvert" field.</summary>
    public const int IsAdvertFieldNumber = 2;
    private bool isAdvert_;
    /// <summary>
    /// 是否观看广告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdvert {
      get { return isAdvert_; }
      set {
        isAdvert_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSFriendMarmot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSFriendMarmot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendUid != other.FriendUid) return false;
      if (IsAdvert != other.IsAdvert) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FriendUid != 0L) hash ^= FriendUid.GetHashCode();
      if (IsAdvert != false) hash ^= IsAdvert.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendUid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FriendUid);
      }
      if (IsAdvert != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAdvert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FriendUid);
      }
      if (IsAdvert != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSFriendMarmot other) {
      if (other == null) {
        return;
      }
      if (other.FriendUid != 0L) {
        FriendUid = other.FriendUid;
      }
      if (other.IsAdvert != false) {
        IsAdvert = other.IsAdvert;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FriendUid = input.ReadInt64();
            break;
          }
          case 16: {
            IsAdvert = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取好友庄园的地鼠奖励
  /// </summary>
  public sealed partial class SCFriendMarmot : pb::IMessage<SCFriendMarmot> {
    private static readonly pb::MessageParser<SCFriendMarmot> _parser = new pb::MessageParser<SCFriendMarmot>(() => new SCFriendMarmot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFriendMarmot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendMarmot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendMarmot(SCFriendMarmot other) : this() {
      awardInfo_ = other.awardInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendMarmot Clone() {
      return new SCFriendMarmot(this);
    }

    /// <summary>Field number for the "AwardInfo" field.</summary>
    public const int AwardInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSWareHouseStruct> _repeated_awardInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSWareHouseStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSWareHouseStruct> awardInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSWareHouseStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSWareHouseStruct> AwardInfo {
      get { return awardInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFriendMarmot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFriendMarmot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!awardInfo_.Equals(other.awardInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= awardInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      awardInfo_.WriteTo(output, _repeated_awardInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awardInfo_.CalculateSize(_repeated_awardInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFriendMarmot other) {
      if (other == null) {
        return;
      }
      awardInfo_.Add(other.awardInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            awardInfo_.AddEntriesFrom(input, _repeated_awardInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 庄园是否有作物成熟
  /// </summary>
  public sealed partial class SCCropMature : pb::IMessage<SCCropMature> {
    private static readonly pb::MessageParser<SCCropMature> _parser = new pb::MessageParser<SCCropMature>(() => new SCCropMature());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCCropMature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCropMature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCropMature(SCCropMature other) : this() {
      mature_ = other.mature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCropMature Clone() {
      return new SCCropMature(this);
    }

    /// <summary>Field number for the "Mature" field.</summary>
    public const int MatureFieldNumber = 1;
    private bool mature_;
    /// <summary>
    /// 是否成熟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mature {
      get { return mature_; }
      set {
        mature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCCropMature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCCropMature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mature != other.Mature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mature != false) hash ^= Mature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mature != false) {
        output.WriteRawTag(8);
        output.WriteBool(Mature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mature != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCCropMature other) {
      if (other == null) {
        return;
      }
      if (other.Mature != false) {
        Mature = other.Mature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mature = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 庄园装饰旋转
  /// </summary>
  public sealed partial class CSManorDecorateRotate : pb::IMessage<CSManorDecorateRotate> {
    private static readonly pb::MessageParser<CSManorDecorateRotate> _parser = new pb::MessageParser<CSManorDecorateRotate>(() => new CSManorDecorateRotate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSManorDecorateRotate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSManorDecorateRotate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSManorDecorateRotate(CSManorDecorateRotate other) : this() {
      soilId_ = other.soilId_;
      rotateIndex_ = other.rotateIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSManorDecorateRotate Clone() {
      return new CSManorDecorateRotate(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private int soilId_;
    /// <summary>
    /// 地块id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    /// <summary>Field number for the "RotateIndex" field.</summary>
    public const int RotateIndexFieldNumber = 2;
    private int rotateIndex_;
    /// <summary>
    /// 旋转下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotateIndex {
      get { return rotateIndex_; }
      set {
        rotateIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSManorDecorateRotate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSManorDecorateRotate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      if (RotateIndex != other.RotateIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0) hash ^= SoilId.GetHashCode();
      if (RotateIndex != 0) hash ^= RotateIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SoilId);
      }
      if (RotateIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RotateIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoilId);
      }
      if (RotateIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotateIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSManorDecorateRotate other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0) {
        SoilId = other.SoilId;
      }
      if (other.RotateIndex != 0) {
        RotateIndex = other.RotateIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt32();
            break;
          }
          case 16: {
            RotateIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装饰物升级
  /// </summary>
  public sealed partial class CSDerectUp : pb::IMessage<CSDerectUp> {
    private static readonly pb::MessageParser<CSDerectUp> _parser = new pb::MessageParser<CSDerectUp>(() => new CSDerectUp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDerectUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDerectUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDerectUp(CSDerectUp other) : this() {
      soilId_ = other.soilId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDerectUp Clone() {
      return new CSDerectUp(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private int soilId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoilId {
      get { return soilId_; }
      set {
        soilId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSDerectUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSDerectUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoilId != other.SoilId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoilId != 0) hash ^= SoilId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoilId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SoilId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoilId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoilId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSDerectUp other) {
      if (other == null) {
        return;
      }
      if (other.SoilId != 0) {
        SoilId = other.SoilId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoilId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一键浇水返回 
  /// </summary>
  public sealed partial class SCOnceWatering : pb::IMessage<SCOnceWatering> {
    private static readonly pb::MessageParser<SCOnceWatering> _parser = new pb::MessageParser<SCOnceWatering>(() => new SCOnceWatering());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOnceWatering> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ManorReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOnceWatering() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOnceWatering(SCOnceWatering other) : this() {
      soilId_ = other.soilId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOnceWatering Clone() {
      return new SCOnceWatering(this);
    }

    /// <summary>Field number for the "SoilId" field.</summary>
    public const int SoilIdFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_soilId_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> soilId_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> SoilId {
      get { return soilId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOnceWatering);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOnceWatering other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!soilId_.Equals(other.soilId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= soilId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      soilId_.WriteTo(output, _repeated_soilId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += soilId_.CalculateSize(_repeated_soilId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOnceWatering other) {
      if (other == null) {
        return;
      }
      soilId_.Add(other.soilId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            soilId_.AddEntriesFrom(input, _repeated_soilId_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
