// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Account.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Game.Protocal {

  /// <summary>Holder for reflection information generated from Account.proto</summary>
  public static partial class AccountReflection {

    #region Descriptor
    /// <summary>File descriptor for Account.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccountReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1BY2NvdW50LnByb3RvEg1HYW1lLlByb3RvY2FsGgpSb2xlLnByb3RvGg9X",
            "YXJlaG91c2UucHJvdG8aDkhhbGxSb2xlLnByb3RvGg1TZWN0aW9uLnByb3Rv",
            "Gg1JbXB1bHNlLnByb3RvGgxTaWduSW4ucHJvdG8aClRhc2sucHJvdG8iRAoP",
            "Q1NTZXRCYXNpY3NJbmZvEgwKBE5hbWUYASABKAkSDQoFSW1hZ2UYAiABKAUS",
            "FAoMSW1hZ2VBZGRyZXNzGAMgASgJIugFCgpTQ1VzZXJJbmZvEgwKBE5hbWUY",
            "ASABKAkSDQoFSW1hZ2UYAiABKAUSEgoKRXhwZXJpZW5jZRgDIAEoBRITCgtQ",
            "cmVzZW50VGltZRgEIAEoAxIuCglSb2xlU0luZm8YBSADKAsyGy5HYW1lLlBy",
            "b3RvY2FsLkNTUm9sZVN0cnVjdBIWCg5aaWxsaW9uYWlyZU1hcBgGIAEoCRIY",
            "ChBaaWxsaW9uYWlyZUNvdW50GAcgASgFEhYKDldhcmVob3VzZUNvdW50GAgg",
            "ASgFEhEKCVNlY3Rpb25JZBgJIAEoBRISCgpQbG90VXNlTnVtGAogASgFEjYK",
            "DFdhcmVIb3NlSW5mbxgLIAMoCzIgLkdhbWUuUHJvdG9jYWwuQ1NXYXJlSG91",
            "c2VTdHJ1Y3QSEgoKRXh0cmFTdG9yeRgMIAEoCRIXCg9VbmxvY2tTZWN0aW9u",
            "SWQYDSABKAUSNQoMSGFsbFJvbGVJbmZvGA4gAygLMh8uR2FtZS5Qcm90b2Nh",
            "bC5DU0hhbGxSb2xlU3RydWN0EhgKEElzRmlyc3REaXNjb3VudHMYDyABKAgS",
            "KwoHQWR2SW5mbxgQIAMoCzIaLkdhbWUuUHJvdG9jYWwuQ1NBZHZTdHJ1Y3QS",
            "RAoVR2V0RmF2b3JhYmxlU3RhdGVJbmZvGBEgASgLMiUuR2FtZS5Qcm90b2Nh",
            "bC5DU0xvZ2luRmF2b3JhYmxlU3RydWN0EhQKDEFjaGlldmVJbWFnZRgSIAEo",
            "CRIxCgpTaWduSW5JbmZvGBMgAygLMh0uR2FtZS5Qcm90b2NhbC5TQ1NpZ25J",
            "blN0cnVjdBIQCghTaWduRGF5cxgUIAEoBRI0CghUYXNrSW5mbxgVIAMoCzIi",
            "LkdhbWUuUHJvdG9jYWwuU0NHZXRUYXNrSW5mb1N0cnVjdBIRCglDcm9wQ291",
            "bnQYFiABKAUSEAoIR3VpZGFuY2UYGCADKAUSFAoMSW1hZ2VBZGRyZXNzGBkg",
            "ASgJIh0KCkNTQnV5SW1hZ2USDwoHSW1hZ2VJZBgBIAEoBSJAChNTQ0N1cnJl",
            "bnRFeHBlcmllbmNlEhMKC0JlZm91ckdyYWRlGAEgASgFEhQKDEN1cnJlbnRH",
            "cmFkZRgCIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Game.Protocal.RoleReflection.Descriptor, global::Game.Protocal.WarehouseReflection.Descriptor, global::Game.Protocal.HallRoleReflection.Descriptor, global::Game.Protocal.SectionReflection.Descriptor, global::Game.Protocal.ImpulseReflection.Descriptor, global::Game.Protocal.SignInReflection.Descriptor, global::Game.Protocal.TaskReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSSetBasicsInfo), global::Game.Protocal.CSSetBasicsInfo.Parser, new[]{ "Name", "Image", "ImageAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCUserInfo), global::Game.Protocal.SCUserInfo.Parser, new[]{ "Name", "Image", "Experience", "PresentTime", "RoleSInfo", "ZillionaireMap", "ZillionaireCount", "WarehouseCount", "SectionId", "PlotUseNum", "WareHoseInfo", "ExtraStory", "UnlockSectionId", "HallRoleInfo", "IsFirstDiscounts", "AdvInfo", "GetFavorableStateInfo", "AchieveImage", "SignInInfo", "SignDays", "TaskInfo", "CropCount", "Guidance", "ImageAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSBuyImage), global::Game.Protocal.CSBuyImage.Parser, new[]{ "ImageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCCurrentExperience), global::Game.Protocal.SCCurrentExperience.Parser, new[]{ "BefourGrade", "CurrentGrade" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 设置用户昵称,头像或者头像url
  /// </summary>
  public sealed partial class CSSetBasicsInfo : pb::IMessage<CSSetBasicsInfo> {
    private static readonly pb::MessageParser<CSSetBasicsInfo> _parser = new pb::MessageParser<CSSetBasicsInfo>(() => new CSSetBasicsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSetBasicsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.AccountReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetBasicsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetBasicsInfo(CSSetBasicsInfo other) : this() {
      name_ = other.name_;
      image_ = other.image_;
      imageAddress_ = other.imageAddress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetBasicsInfo Clone() {
      return new CSSetBasicsInfo(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Image" field.</summary>
    public const int ImageFieldNumber = 2;
    private int image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "ImageAddress" field.</summary>
    public const int ImageAddressFieldNumber = 3;
    private string imageAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageAddress {
      get { return imageAddress_; }
      set {
        imageAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSetBasicsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSetBasicsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Image != other.Image) return false;
      if (ImageAddress != other.ImageAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Image != 0) hash ^= Image.GetHashCode();
      if (ImageAddress.Length != 0) hash ^= ImageAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Image != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Image);
      }
      if (ImageAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImageAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Image != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Image);
      }
      if (ImageAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSetBasicsInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Image != 0) {
        Image = other.Image;
      }
      if (other.ImageAddress.Length != 0) {
        ImageAddress = other.ImageAddress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Image = input.ReadInt32();
            break;
          }
          case 26: {
            ImageAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 返回用户信息
  /// </summary>
  public sealed partial class SCUserInfo : pb::IMessage<SCUserInfo> {
    private static readonly pb::MessageParser<SCUserInfo> _parser = new pb::MessageParser<SCUserInfo>(() => new SCUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.AccountReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserInfo(SCUserInfo other) : this() {
      name_ = other.name_;
      image_ = other.image_;
      experience_ = other.experience_;
      presentTime_ = other.presentTime_;
      roleSInfo_ = other.roleSInfo_.Clone();
      zillionaireMap_ = other.zillionaireMap_;
      zillionaireCount_ = other.zillionaireCount_;
      warehouseCount_ = other.warehouseCount_;
      sectionId_ = other.sectionId_;
      plotUseNum_ = other.plotUseNum_;
      wareHoseInfo_ = other.wareHoseInfo_.Clone();
      extraStory_ = other.extraStory_;
      unlockSectionId_ = other.unlockSectionId_;
      hallRoleInfo_ = other.hallRoleInfo_.Clone();
      isFirstDiscounts_ = other.isFirstDiscounts_;
      advInfo_ = other.advInfo_.Clone();
      getFavorableStateInfo_ = other.getFavorableStateInfo_ != null ? other.getFavorableStateInfo_.Clone() : null;
      achieveImage_ = other.achieveImage_;
      signInInfo_ = other.signInInfo_.Clone();
      signDays_ = other.signDays_;
      taskInfo_ = other.taskInfo_.Clone();
      cropCount_ = other.cropCount_;
      guidance_ = other.guidance_.Clone();
      imageAddress_ = other.imageAddress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserInfo Clone() {
      return new SCUserInfo(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Image" field.</summary>
    public const int ImageFieldNumber = 2;
    private int image_;
    /// <summary>
    /// 玩家头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "Experience" field.</summary>
    public const int ExperienceFieldNumber = 3;
    private int experience_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "PresentTime" field.</summary>
    public const int PresentTimeFieldNumber = 4;
    private long presentTime_;
    /// <summary>
    /// 当前服务器时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PresentTime {
      get { return presentTime_; }
      set {
        presentTime_ = value;
      }
    }

    /// <summary>Field number for the "RoleSInfo" field.</summary>
    public const int RoleSInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSRoleStruct> _repeated_roleSInfo_codec
        = pb::FieldCodec.ForMessage(42, global::Game.Protocal.CSRoleStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSRoleStruct> roleSInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSRoleStruct>();
    /// <summary>
    /// 角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSRoleStruct> RoleSInfo {
      get { return roleSInfo_; }
    }

    /// <summary>Field number for the "ZillionaireMap" field.</summary>
    public const int ZillionaireMapFieldNumber = 6;
    private string zillionaireMap_ = "";
    /// <summary>
    /// 解锁大富翁地图列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZillionaireMap {
      get { return zillionaireMap_; }
      set {
        zillionaireMap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ZillionaireCount" field.</summary>
    public const int ZillionaireCountFieldNumber = 7;
    private int zillionaireCount_;
    /// <summary>
    /// 当日进入大富翁的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZillionaireCount {
      get { return zillionaireCount_; }
      set {
        zillionaireCount_ = value;
      }
    }

    /// <summary>Field number for the "WarehouseCount" field.</summary>
    public const int WarehouseCountFieldNumber = 8;
    private int warehouseCount_;
    /// <summary>
    /// 仓库格子总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarehouseCount {
      get { return warehouseCount_; }
      set {
        warehouseCount_ = value;
      }
    }

    /// <summary>Field number for the "SectionId" field.</summary>
    public const int SectionIdFieldNumber = 9;
    private int sectionId_;
    /// <summary>
    /// 当前阅读章节ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionId {
      get { return sectionId_; }
      set {
        sectionId_ = value;
      }
    }

    /// <summary>Field number for the "PlotUseNum" field.</summary>
    public const int PlotUseNumFieldNumber = 10;
    private int plotUseNum_;
    /// <summary>
    /// 地块使用数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlotUseNum {
      get { return plotUseNum_; }
      set {
        plotUseNum_ = value;
      }
    }

    /// <summary>Field number for the "WareHoseInfo" field.</summary>
    public const int WareHoseInfoFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSWareHouseStruct> _repeated_wareHoseInfo_codec
        = pb::FieldCodec.ForMessage(90, global::Game.Protocal.CSWareHouseStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSWareHouseStruct> wareHoseInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSWareHouseStruct>();
    /// <summary>
    /// 仓库信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSWareHouseStruct> WareHoseInfo {
      get { return wareHoseInfo_; }
    }

    /// <summary>Field number for the "ExtraStory" field.</summary>
    public const int ExtraStoryFieldNumber = 12;
    private string extraStory_ = "";
    /// <summary>
    /// 番外剧情id用西文逗号分隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraStory {
      get { return extraStory_; }
      set {
        extraStory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnlockSectionId" field.</summary>
    public const int UnlockSectionIdFieldNumber = 13;
    private int unlockSectionId_;
    /// <summary>
    /// 最大解锁章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnlockSectionId {
      get { return unlockSectionId_; }
      set {
        unlockSectionId_ = value;
      }
    }

    /// <summary>Field number for the "HallRoleInfo" field.</summary>
    public const int HallRoleInfoFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSHallRoleStruct> _repeated_hallRoleInfo_codec
        = pb::FieldCodec.ForMessage(114, global::Game.Protocal.CSHallRoleStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSHallRoleStruct> hallRoleInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSHallRoleStruct>();
    /// <summary>
    /// 大厅角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSHallRoleStruct> HallRoleInfo {
      get { return hallRoleInfo_; }
    }

    /// <summary>Field number for the "IsFirstDiscounts" field.</summary>
    public const int IsFirstDiscountsFieldNumber = 15;
    private bool isFirstDiscounts_;
    /// <summary>
    /// 是否有首充优惠
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirstDiscounts {
      get { return isFirstDiscounts_; }
      set {
        isFirstDiscounts_ = value;
      }
    }

    /// <summary>Field number for the "AdvInfo" field.</summary>
    public const int AdvInfoFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSAdvStruct> _repeated_advInfo_codec
        = pb::FieldCodec.ForMessage(130, global::Game.Protocal.CSAdvStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSAdvStruct> advInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSAdvStruct>();
    /// <summary>
    /// 番外剧情广告信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSAdvStruct> AdvInfo {
      get { return advInfo_; }
    }

    /// <summary>Field number for the "GetFavorableStateInfo" field.</summary>
    public const int GetFavorableStateInfoFieldNumber = 17;
    private global::Game.Protocal.CSLoginFavorableStruct getFavorableStateInfo_;
    /// <summary>
    /// 好感值领取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.Protocal.CSLoginFavorableStruct GetFavorableStateInfo {
      get { return getFavorableStateInfo_; }
      set {
        getFavorableStateInfo_ = value;
      }
    }

    /// <summary>Field number for the "AchieveImage" field.</summary>
    public const int AchieveImageFieldNumber = 18;
    private string achieveImage_ = "";
    /// <summary>
    /// 玩家已获得头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AchieveImage {
      get { return achieveImage_; }
      set {
        achieveImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SignInInfo" field.</summary>
    public const int SignInInfoFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCSignInStruct> _repeated_signInInfo_codec
        = pb::FieldCodec.ForMessage(154, global::Game.Protocal.SCSignInStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCSignInStruct> signInInfo_ = new pbc::RepeatedField<global::Game.Protocal.SCSignInStruct>();
    /// <summary>
    /// 获取签到信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCSignInStruct> SignInInfo {
      get { return signInInfo_; }
    }

    /// <summary>Field number for the "SignDays" field.</summary>
    public const int SignDaysFieldNumber = 20;
    private int signDays_;
    /// <summary>
    /// 获取签到天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignDays {
      get { return signDays_; }
      set {
        signDays_ = value;
      }
    }

    /// <summary>Field number for the "TaskInfo" field.</summary>
    public const int TaskInfoFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCGetTaskInfoStruct> _repeated_taskInfo_codec
        = pb::FieldCodec.ForMessage(170, global::Game.Protocal.SCGetTaskInfoStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCGetTaskInfoStruct> taskInfo_ = new pbc::RepeatedField<global::Game.Protocal.SCGetTaskInfoStruct>();
    /// <summary>
    /// 获取引导列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCGetTaskInfoStruct> TaskInfo {
      get { return taskInfo_; }
    }

    /// <summary>Field number for the "CropCount" field.</summary>
    public const int CropCountFieldNumber = 22;
    private int cropCount_;
    /// <summary>
    /// 庄园免费使用次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CropCount {
      get { return cropCount_; }
      set {
        cropCount_ = value;
      }
    }

    /// <summary>Field number for the "Guidance" field.</summary>
    public const int GuidanceFieldNumber = 24;
    private static readonly pb::FieldCodec<int> _repeated_guidance_codec
        = pb::FieldCodec.ForInt32(194);
    private readonly pbc::RepeatedField<int> guidance_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 是否有首充优惠
    /// repeated int32 IsFirstDiscounts = 23;
    /// 引导id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Guidance {
      get { return guidance_; }
    }

    /// <summary>Field number for the "ImageAddress" field.</summary>
    public const int ImageAddressFieldNumber = 25;
    private string imageAddress_ = "";
    /// <summary>
    /// 用户自定义头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageAddress {
      get { return imageAddress_; }
      set {
        imageAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Image != other.Image) return false;
      if (Experience != other.Experience) return false;
      if (PresentTime != other.PresentTime) return false;
      if(!roleSInfo_.Equals(other.roleSInfo_)) return false;
      if (ZillionaireMap != other.ZillionaireMap) return false;
      if (ZillionaireCount != other.ZillionaireCount) return false;
      if (WarehouseCount != other.WarehouseCount) return false;
      if (SectionId != other.SectionId) return false;
      if (PlotUseNum != other.PlotUseNum) return false;
      if(!wareHoseInfo_.Equals(other.wareHoseInfo_)) return false;
      if (ExtraStory != other.ExtraStory) return false;
      if (UnlockSectionId != other.UnlockSectionId) return false;
      if(!hallRoleInfo_.Equals(other.hallRoleInfo_)) return false;
      if (IsFirstDiscounts != other.IsFirstDiscounts) return false;
      if(!advInfo_.Equals(other.advInfo_)) return false;
      if (!object.Equals(GetFavorableStateInfo, other.GetFavorableStateInfo)) return false;
      if (AchieveImage != other.AchieveImage) return false;
      if(!signInInfo_.Equals(other.signInInfo_)) return false;
      if (SignDays != other.SignDays) return false;
      if(!taskInfo_.Equals(other.taskInfo_)) return false;
      if (CropCount != other.CropCount) return false;
      if(!guidance_.Equals(other.guidance_)) return false;
      if (ImageAddress != other.ImageAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Image != 0) hash ^= Image.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (PresentTime != 0L) hash ^= PresentTime.GetHashCode();
      hash ^= roleSInfo_.GetHashCode();
      if (ZillionaireMap.Length != 0) hash ^= ZillionaireMap.GetHashCode();
      if (ZillionaireCount != 0) hash ^= ZillionaireCount.GetHashCode();
      if (WarehouseCount != 0) hash ^= WarehouseCount.GetHashCode();
      if (SectionId != 0) hash ^= SectionId.GetHashCode();
      if (PlotUseNum != 0) hash ^= PlotUseNum.GetHashCode();
      hash ^= wareHoseInfo_.GetHashCode();
      if (ExtraStory.Length != 0) hash ^= ExtraStory.GetHashCode();
      if (UnlockSectionId != 0) hash ^= UnlockSectionId.GetHashCode();
      hash ^= hallRoleInfo_.GetHashCode();
      if (IsFirstDiscounts != false) hash ^= IsFirstDiscounts.GetHashCode();
      hash ^= advInfo_.GetHashCode();
      if (getFavorableStateInfo_ != null) hash ^= GetFavorableStateInfo.GetHashCode();
      if (AchieveImage.Length != 0) hash ^= AchieveImage.GetHashCode();
      hash ^= signInInfo_.GetHashCode();
      if (SignDays != 0) hash ^= SignDays.GetHashCode();
      hash ^= taskInfo_.GetHashCode();
      if (CropCount != 0) hash ^= CropCount.GetHashCode();
      hash ^= guidance_.GetHashCode();
      if (ImageAddress.Length != 0) hash ^= ImageAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Image != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Image);
      }
      if (Experience != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Experience);
      }
      if (PresentTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PresentTime);
      }
      roleSInfo_.WriteTo(output, _repeated_roleSInfo_codec);
      if (ZillionaireMap.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ZillionaireMap);
      }
      if (ZillionaireCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ZillionaireCount);
      }
      if (WarehouseCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WarehouseCount);
      }
      if (SectionId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SectionId);
      }
      if (PlotUseNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PlotUseNum);
      }
      wareHoseInfo_.WriteTo(output, _repeated_wareHoseInfo_codec);
      if (ExtraStory.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ExtraStory);
      }
      if (UnlockSectionId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(UnlockSectionId);
      }
      hallRoleInfo_.WriteTo(output, _repeated_hallRoleInfo_codec);
      if (IsFirstDiscounts != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsFirstDiscounts);
      }
      advInfo_.WriteTo(output, _repeated_advInfo_codec);
      if (getFavorableStateInfo_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(GetFavorableStateInfo);
      }
      if (AchieveImage.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AchieveImage);
      }
      signInInfo_.WriteTo(output, _repeated_signInInfo_codec);
      if (SignDays != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SignDays);
      }
      taskInfo_.WriteTo(output, _repeated_taskInfo_codec);
      if (CropCount != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(CropCount);
      }
      guidance_.WriteTo(output, _repeated_guidance_codec);
      if (ImageAddress.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(ImageAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Image != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Image);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (PresentTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PresentTime);
      }
      size += roleSInfo_.CalculateSize(_repeated_roleSInfo_codec);
      if (ZillionaireMap.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZillionaireMap);
      }
      if (ZillionaireCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZillionaireCount);
      }
      if (WarehouseCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarehouseCount);
      }
      if (SectionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionId);
      }
      if (PlotUseNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlotUseNum);
      }
      size += wareHoseInfo_.CalculateSize(_repeated_wareHoseInfo_codec);
      if (ExtraStory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraStory);
      }
      if (UnlockSectionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnlockSectionId);
      }
      size += hallRoleInfo_.CalculateSize(_repeated_hallRoleInfo_codec);
      if (IsFirstDiscounts != false) {
        size += 1 + 1;
      }
      size += advInfo_.CalculateSize(_repeated_advInfo_codec);
      if (getFavorableStateInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetFavorableStateInfo);
      }
      if (AchieveImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AchieveImage);
      }
      size += signInInfo_.CalculateSize(_repeated_signInInfo_codec);
      if (SignDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SignDays);
      }
      size += taskInfo_.CalculateSize(_repeated_taskInfo_codec);
      if (CropCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CropCount);
      }
      size += guidance_.CalculateSize(_repeated_guidance_codec);
      if (ImageAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ImageAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Image != 0) {
        Image = other.Image;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      if (other.PresentTime != 0L) {
        PresentTime = other.PresentTime;
      }
      roleSInfo_.Add(other.roleSInfo_);
      if (other.ZillionaireMap.Length != 0) {
        ZillionaireMap = other.ZillionaireMap;
      }
      if (other.ZillionaireCount != 0) {
        ZillionaireCount = other.ZillionaireCount;
      }
      if (other.WarehouseCount != 0) {
        WarehouseCount = other.WarehouseCount;
      }
      if (other.SectionId != 0) {
        SectionId = other.SectionId;
      }
      if (other.PlotUseNum != 0) {
        PlotUseNum = other.PlotUseNum;
      }
      wareHoseInfo_.Add(other.wareHoseInfo_);
      if (other.ExtraStory.Length != 0) {
        ExtraStory = other.ExtraStory;
      }
      if (other.UnlockSectionId != 0) {
        UnlockSectionId = other.UnlockSectionId;
      }
      hallRoleInfo_.Add(other.hallRoleInfo_);
      if (other.IsFirstDiscounts != false) {
        IsFirstDiscounts = other.IsFirstDiscounts;
      }
      advInfo_.Add(other.advInfo_);
      if (other.getFavorableStateInfo_ != null) {
        if (getFavorableStateInfo_ == null) {
          GetFavorableStateInfo = new global::Game.Protocal.CSLoginFavorableStruct();
        }
        GetFavorableStateInfo.MergeFrom(other.GetFavorableStateInfo);
      }
      if (other.AchieveImage.Length != 0) {
        AchieveImage = other.AchieveImage;
      }
      signInInfo_.Add(other.signInInfo_);
      if (other.SignDays != 0) {
        SignDays = other.SignDays;
      }
      taskInfo_.Add(other.taskInfo_);
      if (other.CropCount != 0) {
        CropCount = other.CropCount;
      }
      guidance_.Add(other.guidance_);
      if (other.ImageAddress.Length != 0) {
        ImageAddress = other.ImageAddress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Image = input.ReadInt32();
            break;
          }
          case 24: {
            Experience = input.ReadInt32();
            break;
          }
          case 32: {
            PresentTime = input.ReadInt64();
            break;
          }
          case 42: {
            roleSInfo_.AddEntriesFrom(input, _repeated_roleSInfo_codec);
            break;
          }
          case 50: {
            ZillionaireMap = input.ReadString();
            break;
          }
          case 56: {
            ZillionaireCount = input.ReadInt32();
            break;
          }
          case 64: {
            WarehouseCount = input.ReadInt32();
            break;
          }
          case 72: {
            SectionId = input.ReadInt32();
            break;
          }
          case 80: {
            PlotUseNum = input.ReadInt32();
            break;
          }
          case 90: {
            wareHoseInfo_.AddEntriesFrom(input, _repeated_wareHoseInfo_codec);
            break;
          }
          case 98: {
            ExtraStory = input.ReadString();
            break;
          }
          case 104: {
            UnlockSectionId = input.ReadInt32();
            break;
          }
          case 114: {
            hallRoleInfo_.AddEntriesFrom(input, _repeated_hallRoleInfo_codec);
            break;
          }
          case 120: {
            IsFirstDiscounts = input.ReadBool();
            break;
          }
          case 130: {
            advInfo_.AddEntriesFrom(input, _repeated_advInfo_codec);
            break;
          }
          case 138: {
            if (getFavorableStateInfo_ == null) {
              GetFavorableStateInfo = new global::Game.Protocal.CSLoginFavorableStruct();
            }
            input.ReadMessage(GetFavorableStateInfo);
            break;
          }
          case 146: {
            AchieveImage = input.ReadString();
            break;
          }
          case 154: {
            signInInfo_.AddEntriesFrom(input, _repeated_signInInfo_codec);
            break;
          }
          case 160: {
            SignDays = input.ReadInt32();
            break;
          }
          case 170: {
            taskInfo_.AddEntriesFrom(input, _repeated_taskInfo_codec);
            break;
          }
          case 176: {
            CropCount = input.ReadInt32();
            break;
          }
          case 194:
          case 192: {
            guidance_.AddEntriesFrom(input, _repeated_guidance_codec);
            break;
          }
          case 202: {
            ImageAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 购买内置头像
  /// </summary>
  public sealed partial class CSBuyImage : pb::IMessage<CSBuyImage> {
    private static readonly pb::MessageParser<CSBuyImage> _parser = new pb::MessageParser<CSBuyImage>(() => new CSBuyImage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBuyImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.AccountReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyImage(CSBuyImage other) : this() {
      imageId_ = other.imageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyImage Clone() {
      return new CSBuyImage(this);
    }

    /// <summary>Field number for the "ImageId" field.</summary>
    public const int ImageIdFieldNumber = 1;
    private int imageId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImageId {
      get { return imageId_; }
      set {
        imageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBuyImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBuyImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageId != other.ImageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageId != 0) hash ^= ImageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ImageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBuyImage other) {
      if (other == null) {
        return;
      }
      if (other.ImageId != 0) {
        ImageId = other.ImageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ImageId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 返回玩家等级
  /// </summary>
  public sealed partial class SCCurrentExperience : pb::IMessage<SCCurrentExperience> {
    private static readonly pb::MessageParser<SCCurrentExperience> _parser = new pb::MessageParser<SCCurrentExperience>(() => new SCCurrentExperience());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCCurrentExperience> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.AccountReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCurrentExperience() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCurrentExperience(SCCurrentExperience other) : this() {
      befourGrade_ = other.befourGrade_;
      currentGrade_ = other.currentGrade_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCurrentExperience Clone() {
      return new SCCurrentExperience(this);
    }

    /// <summary>Field number for the "BefourGrade" field.</summary>
    public const int BefourGradeFieldNumber = 1;
    private int befourGrade_;
    /// <summary>
    /// 之前等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BefourGrade {
      get { return befourGrade_; }
      set {
        befourGrade_ = value;
      }
    }

    /// <summary>Field number for the "CurrentGrade" field.</summary>
    public const int CurrentGradeFieldNumber = 2;
    private int currentGrade_;
    /// <summary>
    /// 现在等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentGrade {
      get { return currentGrade_; }
      set {
        currentGrade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCCurrentExperience);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCCurrentExperience other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BefourGrade != other.BefourGrade) return false;
      if (CurrentGrade != other.CurrentGrade) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BefourGrade != 0) hash ^= BefourGrade.GetHashCode();
      if (CurrentGrade != 0) hash ^= CurrentGrade.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BefourGrade != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BefourGrade);
      }
      if (CurrentGrade != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentGrade);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BefourGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BefourGrade);
      }
      if (CurrentGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentGrade);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCCurrentExperience other) {
      if (other == null) {
        return;
      }
      if (other.BefourGrade != 0) {
        BefourGrade = other.BefourGrade;
      }
      if (other.CurrentGrade != 0) {
        CurrentGrade = other.CurrentGrade;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BefourGrade = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentGrade = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
