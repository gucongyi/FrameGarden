// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SignIn.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Game.Protocal {

  /// <summary>Holder for reflection information generated from SignIn.proto</summary>
  public static partial class SignInReflection {

    #region Descriptor
    /// <summary>File descriptor for SignIn.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SignInReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxTaWduSW4ucHJvdG8SDUdhbWUuUHJvdG9jYWwiNwoOU0NTaWduSW5TdHJ1",
            "Y3QSEQoJRGF5TnVtYmVyGAEgASgFEhIKClNpZ25JblRpbWUYAiABKAMiRAoP",
            "U0NFdmVyeWRheUF3YXJkEhAKCFBhcmNlbElkGAEgASgFEg4KBkdvb2RJZBgC",
            "IAEoBRIPCgdHb29kTnVtGAMgASgFIisKEkNTQWNjdW11bGF0ZVNpZ25JbhIV",
            "Cg1BY2N1bXVsYXRlRGF5GAEgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCSignInStruct), global::Game.Protocal.SCSignInStruct.Parser, new[]{ "DayNumber", "SignInTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCEverydayAward), global::Game.Protocal.SCEverydayAward.Parser, new[]{ "ParcelId", "GoodId", "GoodNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSAccumulateSignIn), global::Game.Protocal.CSAccumulateSignIn.Parser, new[]{ "AccumulateDay" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 签到记录信息
  /// </summary>
  public sealed partial class SCSignInStruct : pb::IMessage<SCSignInStruct> {
    private static readonly pb::MessageParser<SCSignInStruct> _parser = new pb::MessageParser<SCSignInStruct>(() => new SCSignInStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSignInStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.SignInReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSignInStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSignInStruct(SCSignInStruct other) : this() {
      dayNumber_ = other.dayNumber_;
      signInTime_ = other.signInTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSignInStruct Clone() {
      return new SCSignInStruct(this);
    }

    /// <summary>Field number for the "DayNumber" field.</summary>
    public const int DayNumberFieldNumber = 1;
    private int dayNumber_;
    /// <summary>
    /// 签到天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayNumber {
      get { return dayNumber_; }
      set {
        dayNumber_ = value;
      }
    }

    /// <summary>Field number for the "SignInTime" field.</summary>
    public const int SignInTimeFieldNumber = 2;
    private long signInTime_;
    /// <summary>
    /// 签到时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SignInTime {
      get { return signInTime_; }
      set {
        signInTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSignInStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSignInStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DayNumber != other.DayNumber) return false;
      if (SignInTime != other.SignInTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DayNumber != 0) hash ^= DayNumber.GetHashCode();
      if (SignInTime != 0L) hash ^= SignInTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DayNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DayNumber);
      }
      if (SignInTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SignInTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DayNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayNumber);
      }
      if (SignInTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SignInTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSignInStruct other) {
      if (other == null) {
        return;
      }
      if (other.DayNumber != 0) {
        DayNumber = other.DayNumber;
      }
      if (other.SignInTime != 0L) {
        SignInTime = other.SignInTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DayNumber = input.ReadInt32();
            break;
          }
          case 16: {
            SignInTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每日签到返回
  /// </summary>
  public sealed partial class SCEverydayAward : pb::IMessage<SCEverydayAward> {
    private static readonly pb::MessageParser<SCEverydayAward> _parser = new pb::MessageParser<SCEverydayAward>(() => new SCEverydayAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCEverydayAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.SignInReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCEverydayAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCEverydayAward(SCEverydayAward other) : this() {
      parcelId_ = other.parcelId_;
      goodId_ = other.goodId_;
      goodNum_ = other.goodNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCEverydayAward Clone() {
      return new SCEverydayAward(this);
    }

    /// <summary>Field number for the "ParcelId" field.</summary>
    public const int ParcelIdFieldNumber = 1;
    private int parcelId_;
    /// <summary>
    /// 包裹id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParcelId {
      get { return parcelId_; }
      set {
        parcelId_ = value;
      }
    }

    /// <summary>Field number for the "GoodId" field.</summary>
    public const int GoodIdFieldNumber = 2;
    private int goodId_;
    /// <summary>
    /// 道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodId {
      get { return goodId_; }
      set {
        goodId_ = value;
      }
    }

    /// <summary>Field number for the "GoodNum" field.</summary>
    public const int GoodNumFieldNumber = 3;
    private int goodNum_;
    /// <summary>
    /// 道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodNum {
      get { return goodNum_; }
      set {
        goodNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCEverydayAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCEverydayAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParcelId != other.ParcelId) return false;
      if (GoodId != other.GoodId) return false;
      if (GoodNum != other.GoodNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParcelId != 0) hash ^= ParcelId.GetHashCode();
      if (GoodId != 0) hash ^= GoodId.GetHashCode();
      if (GoodNum != 0) hash ^= GoodNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ParcelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ParcelId);
      }
      if (GoodId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodId);
      }
      if (GoodNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GoodNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParcelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParcelId);
      }
      if (GoodId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodId);
      }
      if (GoodNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCEverydayAward other) {
      if (other == null) {
        return;
      }
      if (other.ParcelId != 0) {
        ParcelId = other.ParcelId;
      }
      if (other.GoodId != 0) {
        GoodId = other.GoodId;
      }
      if (other.GoodNum != 0) {
        GoodNum = other.GoodNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ParcelId = input.ReadInt32();
            break;
          }
          case 16: {
            GoodId = input.ReadInt32();
            break;
          }
          case 24: {
            GoodNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求累积奖励
  /// </summary>
  public sealed partial class CSAccumulateSignIn : pb::IMessage<CSAccumulateSignIn> {
    private static readonly pb::MessageParser<CSAccumulateSignIn> _parser = new pb::MessageParser<CSAccumulateSignIn>(() => new CSAccumulateSignIn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSAccumulateSignIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.SignInReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAccumulateSignIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAccumulateSignIn(CSAccumulateSignIn other) : this() {
      accumulateDay_ = other.accumulateDay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAccumulateSignIn Clone() {
      return new CSAccumulateSignIn(this);
    }

    /// <summary>Field number for the "AccumulateDay" field.</summary>
    public const int AccumulateDayFieldNumber = 1;
    private int accumulateDay_;
    /// <summary>
    /// 请求奖励天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccumulateDay {
      get { return accumulateDay_; }
      set {
        accumulateDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSAccumulateSignIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSAccumulateSignIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccumulateDay != other.AccumulateDay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccumulateDay != 0) hash ^= AccumulateDay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccumulateDay != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccumulateDay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccumulateDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccumulateDay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSAccumulateSignIn other) {
      if (other == null) {
        return;
      }
      if (other.AccumulateDay != 0) {
        AccumulateDay = other.AccumulateDay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccumulateDay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
