// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Impulse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Game.Protocal {

  /// <summary>Holder for reflection information generated from Impulse.proto</summary>
  public static partial class ImpulseReflection {

    #region Descriptor
    /// <summary>File descriptor for Impulse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImpulseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1JbXB1bHNlLnByb3RvEg1HYW1lLlByb3RvY2FsGg9XYXJlaG91c2UucHJv",
            "dG8iUQoNQ1NTZW5kTlBDR2lmdBIxCgxTZW5kR2lmdEluZm8YASADKAsyGy5H",
            "YW1lLlByb3RvY2FsLkNTR29vZFN0cnVjdBINCgVOUENJZBgCIAEoBSIwChVD",
            "U1NlY3Rpb25BZGRGYXZvcmFibGUSFwoPU2VjdGlvbk9wdGlvbklkGAEgASgF",
            "IlkKFUNTRmF2b3JhYmxlSW5mb1N0cnVjdBIOCgZIZXJvSWQYASABKAUSFwoP",
            "UGxheWVySGVyb1ZhbHVlGAIgASgFEhcKD0hlcm9QbGF5ZXJWYWx1ZRgDIAEo",
            "BSJOCg9TQ0Zhdm9yYWJsZUluZm8SOwoNRmF2b3JhYmxlSW5mbxgBIAMoCzIk",
            "LkdhbWUuUHJvdG9jYWwuQ1NGYXZvcmFibGVJbmZvU3RydWN0Ik0KFkNTTG9n",
            "aW5GYXZvcmFibGVTdHJ1Y3QSGAoQR2V0RmF2b3JhYmxlVGltZRgBIAEoAxIZ",
            "ChFHZXRGYXZvcmFibGVTdGF0ZRgCIAEoBSInChNDU0dldExvZ2luRmF2b3Jh",
            "YmxlEhAKCElzQWR2ZXJ0GAEgASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Game.Protocal.WarehouseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSSendNPCGift), global::Game.Protocal.CSSendNPCGift.Parser, new[]{ "SendGiftInfo", "NPCId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSSectionAddFavorable), global::Game.Protocal.CSSectionAddFavorable.Parser, new[]{ "SectionOptionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSFavorableInfoStruct), global::Game.Protocal.CSFavorableInfoStruct.Parser, new[]{ "HeroId", "PlayerHeroValue", "HeroPlayerValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCFavorableInfo), global::Game.Protocal.SCFavorableInfo.Parser, new[]{ "FavorableInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSLoginFavorableStruct), global::Game.Protocal.CSLoginFavorableStruct.Parser, new[]{ "GetFavorableTime", "GetFavorableState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSGetLoginFavorable), global::Game.Protocal.CSGetLoginFavorable.Parser, new[]{ "IsAdvert" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 赠送NPC礼物
  /// </summary>
  public sealed partial class CSSendNPCGift : pb::IMessage<CSSendNPCGift> {
    private static readonly pb::MessageParser<CSSendNPCGift> _parser = new pb::MessageParser<CSSendNPCGift>(() => new CSSendNPCGift());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSendNPCGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ImpulseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSendNPCGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSendNPCGift(CSSendNPCGift other) : this() {
      sendGiftInfo_ = other.sendGiftInfo_.Clone();
      nPCId_ = other.nPCId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSendNPCGift Clone() {
      return new CSSendNPCGift(this);
    }

    /// <summary>Field number for the "SendGiftInfo" field.</summary>
    public const int SendGiftInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSGoodStruct> _repeated_sendGiftInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSGoodStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSGoodStruct> sendGiftInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSGoodStruct>();
    /// <summary>
    /// 礼物信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSGoodStruct> SendGiftInfo {
      get { return sendGiftInfo_; }
    }

    /// <summary>Field number for the "NPCId" field.</summary>
    public const int NPCIdFieldNumber = 2;
    private int nPCId_;
    /// <summary>
    /// NPCid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPCId {
      get { return nPCId_; }
      set {
        nPCId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSendNPCGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSendNPCGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sendGiftInfo_.Equals(other.sendGiftInfo_)) return false;
      if (NPCId != other.NPCId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sendGiftInfo_.GetHashCode();
      if (NPCId != 0) hash ^= NPCId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sendGiftInfo_.WriteTo(output, _repeated_sendGiftInfo_codec);
      if (NPCId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NPCId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sendGiftInfo_.CalculateSize(_repeated_sendGiftInfo_codec);
      if (NPCId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPCId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSendNPCGift other) {
      if (other == null) {
        return;
      }
      sendGiftInfo_.Add(other.sendGiftInfo_);
      if (other.NPCId != 0) {
        NPCId = other.NPCId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sendGiftInfo_.AddEntriesFrom(input, _repeated_sendGiftInfo_codec);
            break;
          }
          case 16: {
            NPCId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 章节选项增加好感度
  /// </summary>
  public sealed partial class CSSectionAddFavorable : pb::IMessage<CSSectionAddFavorable> {
    private static readonly pb::MessageParser<CSSectionAddFavorable> _parser = new pb::MessageParser<CSSectionAddFavorable>(() => new CSSectionAddFavorable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSectionAddFavorable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ImpulseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSectionAddFavorable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSectionAddFavorable(CSSectionAddFavorable other) : this() {
      sectionOptionId_ = other.sectionOptionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSectionAddFavorable Clone() {
      return new CSSectionAddFavorable(this);
    }

    /// <summary>Field number for the "SectionOptionId" field.</summary>
    public const int SectionOptionIdFieldNumber = 1;
    private int sectionOptionId_;
    /// <summary>
    /// 章节选项id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionOptionId {
      get { return sectionOptionId_; }
      set {
        sectionOptionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSectionAddFavorable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSectionAddFavorable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SectionOptionId != other.SectionOptionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SectionOptionId != 0) hash ^= SectionOptionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SectionOptionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SectionOptionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SectionOptionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionOptionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSectionAddFavorable other) {
      if (other == null) {
        return;
      }
      if (other.SectionOptionId != 0) {
        SectionOptionId = other.SectionOptionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SectionOptionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 好感信息结构
  /// </summary>
  public sealed partial class CSFavorableInfoStruct : pb::IMessage<CSFavorableInfoStruct> {
    private static readonly pb::MessageParser<CSFavorableInfoStruct> _parser = new pb::MessageParser<CSFavorableInfoStruct>(() => new CSFavorableInfoStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFavorableInfoStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ImpulseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFavorableInfoStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFavorableInfoStruct(CSFavorableInfoStruct other) : this() {
      heroId_ = other.heroId_;
      playerHeroValue_ = other.playerHeroValue_;
      heroPlayerValue_ = other.heroPlayerValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFavorableInfoStruct Clone() {
      return new CSFavorableInfoStruct(this);
    }

    /// <summary>Field number for the "HeroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private int heroId_;
    /// <summary>
    /// 男主id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerHeroValue" field.</summary>
    public const int PlayerHeroValueFieldNumber = 2;
    private int playerHeroValue_;
    /// <summary>
    /// 玩家对男主好感
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerHeroValue {
      get { return playerHeroValue_; }
      set {
        playerHeroValue_ = value;
      }
    }

    /// <summary>Field number for the "HeroPlayerValue" field.</summary>
    public const int HeroPlayerValueFieldNumber = 3;
    private int heroPlayerValue_;
    /// <summary>
    /// 男主对玩家好感
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroPlayerValue {
      get { return heroPlayerValue_; }
      set {
        heroPlayerValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSFavorableInfoStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSFavorableInfoStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (PlayerHeroValue != other.PlayerHeroValue) return false;
      if (HeroPlayerValue != other.HeroPlayerValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (PlayerHeroValue != 0) hash ^= PlayerHeroValue.GetHashCode();
      if (HeroPlayerValue != 0) hash ^= HeroPlayerValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (PlayerHeroValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerHeroValue);
      }
      if (HeroPlayerValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroPlayerValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (PlayerHeroValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerHeroValue);
      }
      if (HeroPlayerValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroPlayerValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSFavorableInfoStruct other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.PlayerHeroValue != 0) {
        PlayerHeroValue = other.PlayerHeroValue;
      }
      if (other.HeroPlayerValue != 0) {
        HeroPlayerValue = other.HeroPlayerValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerHeroValue = input.ReadInt32();
            break;
          }
          case 24: {
            HeroPlayerValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取好感信息
  /// </summary>
  public sealed partial class SCFavorableInfo : pb::IMessage<SCFavorableInfo> {
    private static readonly pb::MessageParser<SCFavorableInfo> _parser = new pb::MessageParser<SCFavorableInfo>(() => new SCFavorableInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFavorableInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ImpulseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFavorableInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFavorableInfo(SCFavorableInfo other) : this() {
      favorableInfo_ = other.favorableInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFavorableInfo Clone() {
      return new SCFavorableInfo(this);
    }

    /// <summary>Field number for the "FavorableInfo" field.</summary>
    public const int FavorableInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSFavorableInfoStruct> _repeated_favorableInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.CSFavorableInfoStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSFavorableInfoStruct> favorableInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSFavorableInfoStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSFavorableInfoStruct> FavorableInfo {
      get { return favorableInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFavorableInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFavorableInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!favorableInfo_.Equals(other.favorableInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= favorableInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      favorableInfo_.WriteTo(output, _repeated_favorableInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += favorableInfo_.CalculateSize(_repeated_favorableInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFavorableInfo other) {
      if (other == null) {
        return;
      }
      favorableInfo_.Add(other.favorableInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            favorableInfo_.AddEntriesFrom(input, _repeated_favorableInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取登录领取好感值信息
  /// </summary>
  public sealed partial class CSLoginFavorableStruct : pb::IMessage<CSLoginFavorableStruct> {
    private static readonly pb::MessageParser<CSLoginFavorableStruct> _parser = new pb::MessageParser<CSLoginFavorableStruct>(() => new CSLoginFavorableStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLoginFavorableStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ImpulseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoginFavorableStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoginFavorableStruct(CSLoginFavorableStruct other) : this() {
      getFavorableTime_ = other.getFavorableTime_;
      getFavorableState_ = other.getFavorableState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoginFavorableStruct Clone() {
      return new CSLoginFavorableStruct(this);
    }

    /// <summary>Field number for the "GetFavorableTime" field.</summary>
    public const int GetFavorableTimeFieldNumber = 1;
    private long getFavorableTime_;
    /// <summary>
    /// 上次领取时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GetFavorableTime {
      get { return getFavorableTime_; }
      set {
        getFavorableTime_ = value;
      }
    }

    /// <summary>Field number for the "GetFavorableState" field.</summary>
    public const int GetFavorableStateFieldNumber = 2;
    private int getFavorableState_;
    /// <summary>
    /// 当前时间段领取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetFavorableState {
      get { return getFavorableState_; }
      set {
        getFavorableState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLoginFavorableStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLoginFavorableStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GetFavorableTime != other.GetFavorableTime) return false;
      if (GetFavorableState != other.GetFavorableState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GetFavorableTime != 0L) hash ^= GetFavorableTime.GetHashCode();
      if (GetFavorableState != 0) hash ^= GetFavorableState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GetFavorableTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GetFavorableTime);
      }
      if (GetFavorableState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GetFavorableState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GetFavorableTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GetFavorableTime);
      }
      if (GetFavorableState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetFavorableState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLoginFavorableStruct other) {
      if (other == null) {
        return;
      }
      if (other.GetFavorableTime != 0L) {
        GetFavorableTime = other.GetFavorableTime;
      }
      if (other.GetFavorableState != 0) {
        GetFavorableState = other.GetFavorableState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GetFavorableTime = input.ReadInt64();
            break;
          }
          case 16: {
            GetFavorableState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录领取好感值
  /// </summary>
  public sealed partial class CSGetLoginFavorable : pb::IMessage<CSGetLoginFavorable> {
    private static readonly pb::MessageParser<CSGetLoginFavorable> _parser = new pb::MessageParser<CSGetLoginFavorable>(() => new CSGetLoginFavorable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetLoginFavorable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.ImpulseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetLoginFavorable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetLoginFavorable(CSGetLoginFavorable other) : this() {
      isAdvert_ = other.isAdvert_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetLoginFavorable Clone() {
      return new CSGetLoginFavorable(this);
    }

    /// <summary>Field number for the "IsAdvert" field.</summary>
    public const int IsAdvertFieldNumber = 1;
    private bool isAdvert_;
    /// <summary>
    /// 是否观看广告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdvert {
      get { return isAdvert_; }
      set {
        isAdvert_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetLoginFavorable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetLoginFavorable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsAdvert != other.IsAdvert) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsAdvert != false) hash ^= IsAdvert.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAdvert != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAdvert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsAdvert != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetLoginFavorable other) {
      if (other == null) {
        return;
      }
      if (other.IsAdvert != false) {
        IsAdvert = other.IsAdvert;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsAdvert = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
