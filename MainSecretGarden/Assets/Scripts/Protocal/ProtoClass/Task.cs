// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Task.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Game.Protocal {

  /// <summary>Holder for reflection information generated from Task.proto</summary>
  public static partial class TaskReflection {

    #region Descriptor
    /// <summary>File descriptor for Task.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpUYXNrLnByb3RvEg1HYW1lLlByb3RvY2FsGg9XYXJlaG91c2UucHJvdG8a",
            "DkVudW1UeXBlLnByb3RvIm0KE1NDR2V0VGFza0luZm9TdHJ1Y3QSDgoGVGFz",
            "a0lEGAEgASgFEhAKCFNjaGVkdWxlGAIgASgFEg0KBUlzR2V0GAMgASgIEiUK",
            "BFR5cGUYBCABKA4yFy5HYW1lLlByb3RvY2FsLlRhc2tUeXBlIkUKDVNDR2V0",
            "VGFza0luZm8SNAoIVGFza0luZm8YASADKAsyIi5HYW1lLlByb3RvY2FsLlND",
            "R2V0VGFza0luZm9TdHJ1Y3QiMwoOQ1NHZXRUYXNrQXdhcmQSDwoHVGFza0lE",
            "cxgBIAMoBRIQCghJc09uZUtleRgCIAEoCCJUCg5TQ0dldFRhc2tBd2FyZBIS",
            "CgpUYXNrSURMaXN0GAEgAygFEi4KCUF3YXJkSW5mbxgCIAMoCzIbLkdhbWUu",
            "UHJvdG9jYWwuQ1NHb29kU3RydWN0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Game.Protocal.WarehouseReflection.Descriptor, global::Game.Protocal.EnumTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCGetTaskInfoStruct), global::Game.Protocal.SCGetTaskInfoStruct.Parser, new[]{ "TaskID", "Schedule", "IsGet", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCGetTaskInfo), global::Game.Protocal.SCGetTaskInfo.Parser, new[]{ "TaskInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.CSGetTaskAward), global::Game.Protocal.CSGetTaskAward.Parser, new[]{ "TaskIDs", "IsOneKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.Protocal.SCGetTaskAward), global::Game.Protocal.SCGetTaskAward.Parser, new[]{ "TaskIDList", "AwardInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 获取任务列表结构
  /// </summary>
  public sealed partial class SCGetTaskInfoStruct : pb::IMessage<SCGetTaskInfoStruct> {
    private static readonly pb::MessageParser<SCGetTaskInfoStruct> _parser = new pb::MessageParser<SCGetTaskInfoStruct>(() => new SCGetTaskInfoStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetTaskInfoStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.TaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskInfoStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskInfoStruct(SCGetTaskInfoStruct other) : this() {
      taskID_ = other.taskID_;
      schedule_ = other.schedule_;
      isGet_ = other.isGet_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskInfoStruct Clone() {
      return new SCGetTaskInfoStruct(this);
    }

    /// <summary>Field number for the "TaskID" field.</summary>
    public const int TaskIDFieldNumber = 1;
    private int taskID_;
    /// <summary>
    /// 任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskID {
      get { return taskID_; }
      set {
        taskID_ = value;
      }
    }

    /// <summary>Field number for the "Schedule" field.</summary>
    public const int ScheduleFieldNumber = 2;
    private int schedule_;
    /// <summary>
    /// 当前任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Schedule {
      get { return schedule_; }
      set {
        schedule_ = value;
      }
    }

    /// <summary>Field number for the "IsGet" field.</summary>
    public const int IsGetFieldNumber = 3;
    private bool isGet_;
    /// <summary>
    /// 是否领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGet {
      get { return isGet_; }
      set {
        isGet_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Game.Protocal.TaskType type_ = 0;
    /// <summary>
    /// 任务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.Protocal.TaskType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetTaskInfoStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetTaskInfoStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskID != other.TaskID) return false;
      if (Schedule != other.Schedule) return false;
      if (IsGet != other.IsGet) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskID != 0) hash ^= TaskID.GetHashCode();
      if (Schedule != 0) hash ^= Schedule.GetHashCode();
      if (IsGet != false) hash ^= IsGet.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskID);
      }
      if (Schedule != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Schedule);
      }
      if (IsGet != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsGet);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskID);
      }
      if (Schedule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Schedule);
      }
      if (IsGet != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetTaskInfoStruct other) {
      if (other == null) {
        return;
      }
      if (other.TaskID != 0) {
        TaskID = other.TaskID;
      }
      if (other.Schedule != 0) {
        Schedule = other.Schedule;
      }
      if (other.IsGet != false) {
        IsGet = other.IsGet;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskID = input.ReadInt32();
            break;
          }
          case 16: {
            Schedule = input.ReadInt32();
            break;
          }
          case 24: {
            IsGet = input.ReadBool();
            break;
          }
          case 32: {
            Type = (global::Game.Protocal.TaskType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取任务列表
  /// </summary>
  public sealed partial class SCGetTaskInfo : pb::IMessage<SCGetTaskInfo> {
    private static readonly pb::MessageParser<SCGetTaskInfo> _parser = new pb::MessageParser<SCGetTaskInfo>(() => new SCGetTaskInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetTaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.TaskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskInfo(SCGetTaskInfo other) : this() {
      taskInfo_ = other.taskInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskInfo Clone() {
      return new SCGetTaskInfo(this);
    }

    /// <summary>Field number for the "TaskInfo" field.</summary>
    public const int TaskInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.Protocal.SCGetTaskInfoStruct> _repeated_taskInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Game.Protocal.SCGetTaskInfoStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.SCGetTaskInfoStruct> taskInfo_ = new pbc::RepeatedField<global::Game.Protocal.SCGetTaskInfoStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.SCGetTaskInfoStruct> TaskInfo {
      get { return taskInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetTaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetTaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taskInfo_.Equals(other.taskInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taskInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskInfo_.WriteTo(output, _repeated_taskInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskInfo_.CalculateSize(_repeated_taskInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetTaskInfo other) {
      if (other == null) {
        return;
      }
      taskInfo_.Add(other.taskInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            taskInfo_.AddEntriesFrom(input, _repeated_taskInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 领取任务奖励
  /// </summary>
  public sealed partial class CSGetTaskAward : pb::IMessage<CSGetTaskAward> {
    private static readonly pb::MessageParser<CSGetTaskAward> _parser = new pb::MessageParser<CSGetTaskAward>(() => new CSGetTaskAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetTaskAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.TaskReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTaskAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTaskAward(CSGetTaskAward other) : this() {
      taskIDs_ = other.taskIDs_.Clone();
      isOneKey_ = other.isOneKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTaskAward Clone() {
      return new CSGetTaskAward(this);
    }

    /// <summary>Field number for the "TaskIDs" field.</summary>
    public const int TaskIDsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_taskIDs_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> taskIDs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TaskIDs {
      get { return taskIDs_; }
    }

    /// <summary>Field number for the "IsOneKey" field.</summary>
    public const int IsOneKeyFieldNumber = 2;
    private bool isOneKey_;
    /// <summary>
    /// 是否一键
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOneKey {
      get { return isOneKey_; }
      set {
        isOneKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetTaskAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetTaskAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taskIDs_.Equals(other.taskIDs_)) return false;
      if (IsOneKey != other.IsOneKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taskIDs_.GetHashCode();
      if (IsOneKey != false) hash ^= IsOneKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskIDs_.WriteTo(output, _repeated_taskIDs_codec);
      if (IsOneKey != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOneKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskIDs_.CalculateSize(_repeated_taskIDs_codec);
      if (IsOneKey != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetTaskAward other) {
      if (other == null) {
        return;
      }
      taskIDs_.Add(other.taskIDs_);
      if (other.IsOneKey != false) {
        IsOneKey = other.IsOneKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            taskIDs_.AddEntriesFrom(input, _repeated_taskIDs_codec);
            break;
          }
          case 16: {
            IsOneKey = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 奖励返回
  /// </summary>
  public sealed partial class SCGetTaskAward : pb::IMessage<SCGetTaskAward> {
    private static readonly pb::MessageParser<SCGetTaskAward> _parser = new pb::MessageParser<SCGetTaskAward>(() => new SCGetTaskAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetTaskAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.Protocal.TaskReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskAward(SCGetTaskAward other) : this() {
      taskIDList_ = other.taskIDList_.Clone();
      awardInfo_ = other.awardInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskAward Clone() {
      return new SCGetTaskAward(this);
    }

    /// <summary>Field number for the "TaskIDList" field.</summary>
    public const int TaskIDListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_taskIDList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> taskIDList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TaskIDList {
      get { return taskIDList_; }
    }

    /// <summary>Field number for the "AwardInfo" field.</summary>
    public const int AwardInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Game.Protocal.CSGoodStruct> _repeated_awardInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Game.Protocal.CSGoodStruct.Parser);
    private readonly pbc::RepeatedField<global::Game.Protocal.CSGoodStruct> awardInfo_ = new pbc::RepeatedField<global::Game.Protocal.CSGoodStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.Protocal.CSGoodStruct> AwardInfo {
      get { return awardInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetTaskAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetTaskAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taskIDList_.Equals(other.taskIDList_)) return false;
      if(!awardInfo_.Equals(other.awardInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taskIDList_.GetHashCode();
      hash ^= awardInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskIDList_.WriteTo(output, _repeated_taskIDList_codec);
      awardInfo_.WriteTo(output, _repeated_awardInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskIDList_.CalculateSize(_repeated_taskIDList_codec);
      size += awardInfo_.CalculateSize(_repeated_awardInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetTaskAward other) {
      if (other == null) {
        return;
      }
      taskIDList_.Add(other.taskIDList_);
      awardInfo_.Add(other.awardInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            taskIDList_.AddEntriesFrom(input, _repeated_taskIDList_codec);
            break;
          }
          case 18: {
            awardInfo_.AddEntriesFrom(input, _repeated_awardInfo_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
