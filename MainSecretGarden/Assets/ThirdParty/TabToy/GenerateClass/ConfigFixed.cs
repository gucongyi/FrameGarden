// Generated by github.com/davyxu/tabtoy
// Version: 2.8.5
// DO NOT EDIT!! 这个是自动生成的数据类
using System.Collections.Generic;

namespace Company.Cfg
{
	
	// Defined in table: Base
	public enum TypeRarity
	{
		
		/// <summary> 
		/// 稀有度 无
		/// </summary>
		None = 0, // 0
		
		/// <summary> 
		/// 稀有度 初级
		/// </summary>
		Primary = 1, // 1
		
		/// <summary> 
		/// 稀有度 中级
		/// </summary>
		Intermediate = 2, // 2
		
		/// <summary> 
		/// 稀有度 高级
		/// </summary>
		Senior = 3, // 3
	
	}
	
	// Defined in table: Base
	public enum TypeGameItem
	{
		
		
		None = 0, // 0
		
		/// <summary> 
		/// 道具类型 种子
		/// </summary>
		Seed = 1, // 1
		
		/// <summary> 
		/// 道具类型 果实
		/// </summary>
		Fruit = 2, // 2
		
		/// <summary> 
		/// 道具类型 装饰物 包括地块，宝箱
		/// </summary>
		Decorate = 3, // 3
		
		/// <summary> 
		/// 化肥
		/// </summary>
		Fertilizers = 4, // 4
		
		/// <summary> 
		/// 道具类型 功能道具 比如钥匙
		/// </summary>
		Prop = 5, // 5
		
		/// <summary> 
		/// 仓库宝箱
		/// </summary>
		TreasureChest = 6, // 6
		
		/// <summary> 
		/// 仓库礼盒
		/// </summary>
		WarehouseGift = 7, // 7
		
		/// <summary> 
		/// 喇叭
		/// </summary>
		ImpulesGift = 8, // 8
		
		/// <summary> 
		/// 心动礼物
		/// </summary>
		HeartGift = 9, // 9
	
	}
	
	// Defined in table: Base
	public enum LinguisticType
	{
		
		/// <summary> 
		/// 简体中文
		/// </summary>
		Simplified = 0, // 0
		
		/// <summary> 
		/// 繁体中文
		/// </summary>
		Complex = 1, // 1
		
		/// <summary> 
		/// 英文
		/// </summary>
		English = 2, // 2
	
	}
	
	// Defined in table: Base
	public enum TypeManorDecorate
	{
		
		/// <summary> 
		/// 默认没有
		/// </summary>
		None = 0, // 0
		
		/// <summary> 
		/// 地块
		/// </summary>
		Tile = 1, // 1
		
		/// <summary> 
		/// 狗窝
		/// </summary>
		DogHouse = 2, // 2
		
		/// <summary> 
		/// 宝箱，礼盒
		/// </summary>
		GiftBox = 3, // 3
		
		/// <summary> 
		/// 装饰物
		/// </summary>
		Decorate = 4, // 4
		
		/// <summary> 
		/// 解锁的时候清掉
		/// </summary>
		CanClear = 5, // 5
	
	}
	
	// Defined in table: Base
	public enum KnapsackType
	{
		
		/// <summary> 
		/// 默认没有
		/// </summary>
		None = 0, // 0
		
		/// <summary> 
		/// 种子类型背包
		/// </summary>
		Seed = 1, // 1
		
		/// <summary> 
		/// 果实类型背包
		/// </summary>
		Fruit = 2, // 2
		
		/// <summary> 
		/// 道具类型背包
		/// </summary>
		Prop = 3, // 3
		
		/// <summary> 
		/// 装饰类型背包
		/// </summary>
		Decorate = 4, // 4
	
	}
	
	// Defined in table: Base
	public enum GoodsUseType
	{
		
		/// <summary> 
		/// 默认没有
		/// </summary>
		None = 0, // 0
		
		/// <summary> 
		/// 星币
		/// </summary>
		StarNote = 1, // 1
		
		/// <summary> 
		/// 化肥
		/// </summary>
		Manure = 2, // 2
		
		/// <summary> 
		/// 大富翁入场卷
		/// </summary>
		ZillionaireTessera = 3, // 3
		
		/// <summary> 
		/// 拓展包
		/// </summary>
		ExtendBag = 4, // 4
		
		/// <summary> 
		/// 礼盒
		/// </summary>
		GiftBox = 5, // 5
		
		/// <summary> 
		/// 种子
		/// </summary>
		Seed = 6, // 6
	
	}
	
	// Defined in table: Base
	public enum ShopItemType
	{
		
		
		None = 0, // 0
		
		/// <summary> 
		/// 种子商店
		/// </summary>
		SeedStore = 1, // 1
		
		/// <summary> 
		/// 道具商店
		/// </summary>
		PropStore = 2, // 2
		
		/// <summary> 
		/// 装饰商店
		/// </summary>
		DecorateStore = 3, // 3
		
		/// <summary> 
		/// 晚会商店
		/// </summary>
		PartyStore = 4, // 4
		
		/// <summary> 
		/// 角色
		/// </summary>
		Character = 5, // 5
		
		/// <summary> 
		/// 商店服装
		/// </summary>
		StoreClothing = 6, // 6
		
		/// <summary> 
		/// 积分道具商店
		/// </summary>
		PointsGoods = 8, // 8
		
		/// <summary> 
		/// 积分商店
		/// </summary>
		PointsStoreClothing = 7, // 7
		
		/// <summary> 
		/// 心动礼物商店
		/// </summary>
		ImpulesGiftStore = 9, // 9
	
	}
	
	// Defined in table: Base
	public enum ItemAccessType
	{
		
		/// <summary> 
		/// 道具获取途径
		/// </summary>
		None = 0, 
		
		/// <summary> 
		/// 快捷购买
		/// </summary>
		QuickPurchase = 1, 
		
		/// <summary> 
		/// 积分商店
		/// </summary>
		PointsStore = 2, 
		
		/// <summary> 
		/// 活动赠送
		/// </summary>
		ActivityGift = 3, 
	
	}
	
	// Defined in table: Base
	public enum DialogueType
	{
		
		/// <summary> 
		/// 正常对话
		/// </summary>
		Normal = 0, // 0
		
		/// <summary> 
		/// 幻想对话
		/// </summary>
		Fantasy = 1, // 1
		
		/// <summary> 
		/// 旁白
		/// </summary>
		Voiceover = 2, // 2
	
	}
	
	// Defined in table: Base
	public enum TaskType
	{
		
		/// <summary> 
		/// 默认没有
		/// </summary>
		None = 0, // 0
		
		/// <summary> 
		/// 新手任务
		/// </summary>
		GuidanceTask = 1, // 1
		
		/// <summary> 
		/// 每日任务
		/// </summary>
		DailyTask = 2, // 2
	
	}
	
	// Defined in table: Base
	public enum TaskSceneTag
	{
		
		/// <summary> 
		/// 默认没有
		/// </summary>
		None = 0, // 0
		
		/// <summary> 
		/// 签到界面
		/// </summary>
		SignIn = 1, // 1
		
		/// <summary> 
		/// 好感度界面
		/// </summary>
		GetFavorability = 2, // 2
		
		/// <summary> 
		/// 庄园
		/// </summary>
		Manor = 3, // 3
		
		/// <summary> 
		/// 种子仓库
		/// </summary>
		Warehouse = 4, // 4
		
		/// <summary> 
		/// 道具仓库
		/// </summary>
		PropWarehouse = 5, // 5
		
		/// <summary> 
		/// 好友界面
		/// </summary>
		Friend = 6, // 6
		
		/// <summary> 
		/// 大富翁准备界面
		/// </summary>
		ZillionaireSetout = 7, // 7
		
		/// <summary> 
		/// 章节列表界面
		/// </summary>
		ChapterList = 8, // 8
		
		/// <summary> 
		/// 心动时刻选择角色界面
		/// </summary>
		ThrobbingCasting = 9, // 9
		
		/// <summary> 
		/// 商店界面
		/// </summary>
		Shop = 10, // 10
		
		/// <summary> 
		/// 果实仓库
		/// </summary>
		FruitWarehouse = 11, // 11
		
		/// <summary> 
		/// 装扮庄园
		/// </summary>
		DressUpTheManor = 12, // 12
		
		/// <summary> 
		/// 庄园好友
		/// </summary>
		ManorFriends = 13, // 13
		
		/// <summary> 
		/// 订单界面
		/// </summary>
		Deal = 14, // 14
	
	}
	
	// Defined in table: Base
	public enum CropType
	{
		
		/// <summary> 
		/// 作物类型 空
		/// </summary>
		None = 0, // 0
		
		/// <summary> 
		/// 作物类型 花卉
		/// </summary>
		Flowers = 1, // 1
		
		/// <summary> 
		/// 作物类型 水果
		/// </summary>
		Fruit = 2, // 2
	
	}
	
	// Defined in table: Base
	public enum CostumeType
	{
		
		/// <summary> 
		/// 服饰类型
		/// </summary>
		None = 0, 
		
		/// <summary> 
		/// 发型
		/// </summary>
		Hairstyle = 1, 
		
		/// <summary> 
		/// 左帽
		/// </summary>
		LeftHat = 2, 
		
		/// <summary> 
		/// 右帽
		/// </summary>
		RightHat = 3, 
		
		/// <summary> 
		/// 长帽
		/// </summary>
		LongHat = 4, 
		
		/// <summary> 
		/// 顶帽
		/// </summary>
		TopHat = 5, 
		
		/// <summary> 
		/// 围巾
		/// </summary>
		Scarf = 6, 
		
		/// <summary> 
		/// 项链
		/// </summary>
		Necklace = 7, 
		
		/// <summary> 
		/// 耳环
		/// </summary>
		Earrings = 8, 
		
		/// <summary> 
		/// 手镯
		/// </summary>
		Bracelet = 9, 
		
		/// <summary> 
		/// 上衣
		/// </summary>
		Jacket = 10, 
		
		/// <summary> 
		/// 外套
		/// </summary>
		Overcoat = 11, 
		
		/// <summary> 
		/// 下装
		/// </summary>
		UnderClothes = 12, 
		
		/// <summary> 
		/// 连衣裙
		/// </summary>
		Dress = 13, 
		
		/// <summary> 
		/// 手套
		/// </summary>
		Glove = 14, 
		
		/// <summary> 
		/// 袜子
		/// </summary>
		Socks = 15, 
		
		/// <summary> 
		/// 鞋子
		/// </summary>
		Shoes = 16, 
		
		/// <summary> 
		/// 手包
		/// </summary>
		Handbag = 17, 
	
	}
	
	// Defined in table: Base
	public enum CostumeShowType
	{
		
		/// <summary> 
		/// 服饰显示类型
		/// </summary>
		None = 0, 
		
		/// <summary> 
		/// 服饰显示类型 发型
		/// </summary>
		Hairstyle = 1, 
		
		/// <summary> 
		/// 服饰显示类型 头饰
		/// </summary>
		Tire = 2, 
		
		/// <summary> 
		/// 服饰显示类型 首饰
		/// </summary>
		Jewelry = 3, 
		
		/// <summary> 
		/// 服饰显示类型 服装
		/// </summary>
		Clothing = 4, 
		
		/// <summary> 
		/// 服饰显示类型 鞋袜
		/// </summary>
		ShoesAndSocks = 5, 
		
		/// <summary> 
		/// 服饰显示类型 手持物
		/// </summary>
		Handheld = 6, 
	
	}
	
	// Defined in table: ServerErrorCode
	public enum WebErrorCode
	{
		
		/// <summary> 
		/// 未知错误
		/// </summary>
		None = 0, // 0
		
		/// <summary> 
		/// 成功
		/// </summary>
		Success = 1, // 1
		
		/// <summary> 
		/// 操作码为空
		/// </summary>
		OpCode_Null = 2, // 2
		
		/// <summary> 
		/// 请求数据为空
		/// </summary>
		Send_Data_Null = 2000, // 2000
		
		/// <summary> 
		/// 解析数据异常
		/// </summary>
		ServerReport_ServerReqDecodeFail = 3000, // 3000
		
		/// <summary> 
		/// mysql错误
		/// </summary>
		Mysql_Error = 4000, // 4000
		
		/// <summary> 
		/// 请求失败没有对应方法
		/// </summary>
		RequestError_NoMethod = 4001, // 4001
		
		/// <summary> 
		/// 服务器异常
		/// </summary>
		ServerException = 4002, // 4002
		
		/// <summary> 
		/// 请求必要信息为空
		/// </summary>
		Request_Essential_Null = 4003, // 4003
		
		/// <summary> 
		/// 账户数据异常
		/// </summary>
		Account_Abnormity = 10002, // 10002
		
		/// <summary> 
		/// 新增用户失败
		/// </summary>
		Account_Add_Error = 10003, // 10003
		
		/// <summary> 
		/// 账户重复登录
		/// </summary>
		Account_Repetition = 10005, // 10005
		
		/// <summary> 
		/// 唯一凭证为空
		/// </summary>
		Account_Sole_Null = 10006, // 10006
		
		/// <summary> 
		/// 没有这个用户
		/// </summary>
		Account_Inexistence = 10007, // 10007
		
		/// <summary> 
		/// 设置账户名失败
		/// </summary>
		Account_SetName_Error = 10008, // 10008
		
		/// <summary> 
		/// 设置头像失败
		/// </summary>
		Account_SetImage_Error = 10009, // 10009
		
		/// <summary> 
		/// 获取用户大富翁地图信息失败
		/// </summary>
		Account_Zillionaire_Map = 10013, // 10013
		
		/// <summary> 
		/// 玩家暂时未获得大富翁这个地图
		/// </summary>
		Account_Zillionaire_Acquire = 10014, // 10014
		
		/// <summary> 
		/// 玩家该等级无升级奖励
		/// </summary>
		Account_UpGrade_NoneAward = 10015, // 10015
		
		/// <summary> 
		/// 获取用户关联数据失败
		/// </summary>
		Account_User_Config = 10016, // 10016
		
		/// <summary> 
		/// 获取用户数据失败
		/// </summary>
		Account_User_Info = 10017, // 10017
		
		/// <summary> 
		/// 设置用户昵称重复
		/// </summary>
		Account_SetName_Repetition = 10018, // 10018
		
		/// <summary> 
		/// 没有对应的头像信息
		/// </summary>
		Account_Image_Config = 10019, // 10019
		
		/// <summary> 
		/// 未获得头像
		/// </summary>
		Account_No_Image = 10020, // 10020
		
		/// <summary> 
		/// 获取头像信息失败
		/// </summary>
		Account_Image_Info = 10021, // 10021
		
		/// <summary> 
		/// 注销账号失败
		/// </summary>
		Account_Logout_Error = 10022, // 10022
		
		/// <summary> 
		/// 添加好友失败
		/// </summary>
		Friend_Add_Fail = 20004, // 20004
		
		/// <summary> 
		/// 重复添加好友申请
		/// </summary>
		Friend_Add_Again = 20005, // 20005
		
		/// <summary> 
		/// 删除好友失败
		/// </summary>
		Friend_Del_Fail = 20006, // 20006
		
		/// <summary> 
		/// 搜索好友为空
		/// </summary>
		Friend_Search_Fail = 200007, // 200007
		
		/// <summary> 
		/// 好友上限
		/// </summary>
		Friend_Max = 200008, // 200008
		
		/// <summary> 
		/// 玩家不存在
		/// </summary>
		User_Not_Existent = 200010, // 200010
		
		/// <summary> 
		/// 拒绝添加好友失败
		/// </summary>
		Friend_Refuse_Add = 200013, // 200013
		
		/// <summary> 
		/// 没有请求的地图信息
		/// </summary>
		Map_Inexistence = 200100, // 200100
		
		/// <summary> 
		/// 地图重复购买
		/// </summary>
		Map_Repetition_Buy = 200102, // 200102
		
		/// <summary> 
		/// 体力不够了
		/// </summary>
		Map_PhysicalPower_Insufficient = 200103, // 200103
		
		/// <summary> 
		/// 本次游戏购买次数上限
		/// </summary>
		Map_Purchase_Limit = 200105, // 200105
		
		/// <summary> 
		/// 购买角色不存在
		/// </summary>
		Map_Role_Inexistence = 200107, // 200107
		
		/// <summary> 
		/// 购买角色失败
		/// </summary>
		Map_Role_defeated = 200108, // 200108
		
		/// <summary> 
		/// 生成大富翁奖励失败
		/// </summary>
		Map_Award_Defeated = 200109, // 200109
		
		/// <summary> 
		/// 记录奖励信息失败
		/// </summary>
		Map_Record_Award = 200110, // 200110
		
		/// <summary> 
		/// 购买地图失败
		/// </summary>
		Map_Buy_Defeated = 200113, // 200113
		
		/// <summary> 
		/// 选择角色失败
		/// </summary>
		Map_Choice_Defeated = 200114, // 200114
		
		/// <summary> 
		/// 当前种植地上限
		/// </summary>
		Map_Plant_Limit = 200115, // 200115
		
		/// <summary> 
		/// 进入大富翁使用次数完
		/// </summary>
		Map_Count_Finish = 200118, // 200118
		
		/// <summary> 
		/// 扣除大富翁次数失败
		/// </summary>
		Map_Count_Deduct = 200119, // 200119
		
		/// <summary> 
		/// 请选择骰子类型
		/// </summary>
		Map_Dice_Type = 200120, // 200120
		
		/// <summary> 
		/// 骰子失败
		/// </summary>
		Map_Dice_Defeated = 200121, // 200121
		
		/// <summary> 
		/// 请选择抽奖类型
		/// </summary>
		Map_Lucky_Type = 200122, // 200122
		
		/// <summary> 
		/// 不在抽道具位置
		/// </summary>
		Map_Lucky_Prop = 200123, // 200123
		
		/// <summary> 
		/// 不在抽种子位置
		/// </summary>
		Map_Lucky_Seed = 200124, // 200124
		
		/// <summary> 
		/// 抽奖次数已用户
		/// </summary>
		Map_Lucky_Count = 200125, // 200125
		
		/// <summary> 
		/// 获取奖励失败
		/// </summary>
		Map_Lucky_Defeated = 200126, // 200126
		
		/// <summary> 
		/// 拖拽失败
		/// </summary>
		Manor_Drag_Defeated = 203000, // 203000
		
		/// <summary> 
		/// 提前铲除种植物失败
		/// </summary>
		Manor_Eradicate_Defeated = 203002, // 203002
		
		/// <summary> 
		/// 交换位置失败
		/// </summary>
		Manor_Change_Position = 203004, // 203004
		
		/// <summary> 
		/// 没有需要收获的
		/// </summary>
		Manor_Harvest = 203005, // 203005
		
		/// <summary> 
		/// 种植数据为空
		/// </summary>
		Manor_Plant_Null = 203006, // 203006
		
		/// <summary> 
		/// 查询玩家没有信息
		/// </summary>
		Manor_None_Info = 203007, // 203007
		
		/// <summary> 
		/// 作物已成熟不能使用化肥
		/// </summary>
		Manor_Crop_Adultness = 203008, // 203008
		
		/// <summary> 
		/// 化肥使用失败
		/// </summary>
		Manor_Use_Fertilizer = 203010, // 203010
		
		/// <summary> 
		/// 没有这个地块信息
		/// </summary>
		Manor_Parcel_Info = 203011, // 203011
		
		/// <summary> 
		/// 回收的类型不是装饰物
		/// </summary>
		Manor_Recycle_Decorate = 203014, // 203014
		
		/// <summary> 
		/// 当前这块地不在种植中
		/// </summary>
		Manor_No_Plant = 203015, // 203015
		
		/// <summary> 
		/// 移除装饰物失败
		/// </summary>
		Manor_Remove_Defeated = 203016, // 203016
		
		/// <summary> 
		/// 收获失败
		/// </summary>
		Manor_Harvest_Defeated = 203017, // 203017
		
		/// <summary> 
		/// 扣除玩家农作物失败
		/// </summary>
		Manor_Deduct_Goods = 203018, // 203018
		
		/// <summary> 
		/// 不能偷取自己
		/// </summary>
		Manor_Steal_Oneself = 203020, // 203020
		
		/// <summary> 
		/// 没有可以偷取的作物
		/// </summary>
		Manor_Steal_No = 203021, // 203021
		
		/// <summary> 
		/// 没有对应解锁信息
		/// </summary>
		Manor_Unlock_Info = 203023, // 203023
		
		/// <summary> 
		/// 作物已被收获了
		/// </summary>
		Manor_Harvest_Finish = 203025, // 203025
		
		/// <summary> 
		/// 作物不能在偷取了
		/// </summary>
		Manor_Harvest_Lateness = 203026, // 203026
		
		/// <summary> 
		/// 新增解锁区域失败
		/// </summary>
		Manor_New_Defeated = 203027, // 203027
		
		/// <summary> 
		/// 修改区域状态信息失败
		/// </summary>
		Manor_Area_State = 203028, // 203028
		
		/// <summary> 
		/// 获取区域状态信息失败
		/// </summary>
		Manor_Acquire_Area = 203029, // 203029
		
		/// <summary> 
		/// 当前在施工阶段
		/// </summary>
		Manor_Roadwork_Stage = 203030, // 203030
		
		/// <summary> 
		/// 当前不能施工加速
		/// </summary>
		Manor_Roadwork_Speed = 203031, // 203031
		
		/// <summary> 
		/// 庄园宝箱解锁钥匙不足
		/// </summary>
		Manor_Key_Notenough = 203034, // 203034
		
		/// <summary> 
		/// 回收地块道具失败
		/// </summary>
		Manor_Recycle_Error = 203035, // 203035
		
		/// <summary> 
		/// 宝箱解锁时间异常
		/// </summary>
		Manor_BoxUnlock_Time = 203036, // 203036
		
		/// <summary> 
		/// 宝箱还在解锁中
		/// </summary>
		Manor_Box_Unlock = 203037, // 203037
		
		/// <summary> 
		/// 回收宝箱失败
		/// </summary>
		Manor_Box_Recycle = 203038, // 203038
		
		/// <summary> 
		/// 选择的不是宝箱
		/// </summary>
		Manor_No_Box = 203039, // 203039
		
		/// <summary> 
		/// 宝箱已处理领域状态了
		/// </summary>
		Manor_Box_Get = 203040, // 203040
		
		/// <summary> 
		/// 更新宝箱解锁时间错误
		/// </summary>
		Manor_Box_UpdateUnlockTIme = 203041, // 203041
		
		/// <summary> 
		/// 今日地鼠奖励次数上限
		/// </summary>
		Manor_Diglett_NumMax = 203042, // 203042
		
		/// <summary> 
		/// 获取地鼠奖励失败
		/// </summary>
		Manor_DiglettWarad_Error = 203043, // 203043
		
		/// <summary> 
		/// 已经抓过该好友庄园地鼠
		/// </summary>
		Manor_FriendManorDiglett_Again = 203044, // 203044
		
		/// <summary> 
		/// 请求异常不允许在好友庄园领取自己庄园地鼠
		/// </summary>
		Manor_FriendDiglett_Myself = 203045, // 203045
		
		/// <summary> 
		/// 偷取日志记录失败
		/// </summary>
		Manor_StealLog_Error = 203046, // 203046
		
		/// <summary> 
		/// 拖拽的不是装饰物
		/// </summary>
		Manor_ManorDrag_NoDecorate = 203047, // 203047
		
		/// <summary> 
		/// 庄园看广告加速次数已用完
		/// </summary>
		Manor_Free_Number = 203048, // 203048
		
		/// <summary> 
		/// 庄园看广告加速失败
		/// </summary>
		Manor_Free_Defeated = 203049, // 203049
		
		/// <summary> 
		/// 该作物不能购买
		/// </summary>
		Manor_ThisCrop_DonTBuy = 203050, // 203050
		
		/// <summary> 
		/// 道具ID错误
		/// </summary>
		Good_Id_Error = 205001, // 205001
		
		/// <summary> 
		/// 购买失败消耗道具不足
		/// </summary>
		Good_Consume = 205002, // 205002
		
		/// <summary> 
		/// 道具更新失败
		/// </summary>
		Good_Update_Error = 205004, // 205004
		
		/// <summary> 
		/// 道具锁定失败
		/// </summary>
		Good_Lock_Error = 205006, // 205006
		
		/// <summary> 
		/// 出售失败
		/// </summary>
		Good_Sell_Error = 205007, // 205007
		
		/// <summary> 
		/// 获取金币钻石失败
		/// </summary>
		Good_Goldjewel_Error = 205009, // 205009
		
		/// <summary> 
		/// 钻石不足
		/// </summary>
		Good_Jewel_Insufficient = 205010, // 205010
		
		/// <summary> 
		/// 配置异常
		/// </summary>
		Store_Config_Error = 205011, // 205011
		
		/// <summary> 
		/// 钻石对换金币失败
		/// </summary>
		Jewel_Trade_Gold = 205012, // 205012
		
		/// <summary> 
		/// 扣除钻石失败
		/// </summary>
		Good_Reducejewel_Error = 205013, // 205013
		
		/// <summary> 
		/// 仓库空间不足
		/// </summary>
		Good_Warehouse_Insufficient = 205014, // 205014
		
		/// <summary> 
		/// 购买失败当前道具未解锁
		/// </summary>
		Good_Goodslock_Error = 205015, // 205015
		
		/// <summary> 
		/// 购买上限
		/// </summary>
		Good_Buygoods_Max = 205016, // 205016
		
		/// <summary> 
		/// 扣除道具失败
		/// </summary>
		Good_Deduct_Defeated = 205018, // 205018
		
		/// <summary> 
		/// 没有购买的道具信息
		/// </summary>
		Good_No_Info = 205019, // 205019
		
		/// <summary> 
		/// 道具入库失败
		/// </summary>
		Godd_Storage_Defeated = 205021, // 205021
		
		/// <summary> 
		/// 道具配置异常
		/// </summary>
		Good_Config_Error = 205022, // 205022
		
		/// <summary> 
		/// 已超过购买时间
		/// </summary>
		Good_BuyTime_Exceed = 205023, // 205023
		
		/// <summary> 
		/// 附件领取失败
		/// </summary>
		Mail_Getaccessory_Error = 206001, // 206001
		
		/// <summary> 
		/// 获取附件失败
		/// </summary>
		Mail_Getaccessory_Defeated = 206002, // 206002
		
		/// <summary> 
		/// 更改邮件状态失败
		/// </summary>
		Mail_ChangeMailState_Error = 206004, // 206004
		
		/// <summary> 
		/// 章节解锁失败
		/// </summary>
		Seciton_Unlock_Error = 207002, // 207002
		
		/// <summary> 
		/// 购买番外剧情失败紫星币不足
		/// </summary>
		ExtraStory_Zixingbi_Insufficient = 207003, // 207003
		
		/// <summary> 
		/// 紫星币扣除失败
		/// </summary>
		ExtraStory_Zixingbi_Error = 207004, // 207004
		
		/// <summary> 
		/// 购买番外剧情失败
		/// </summary>
		BuyExtraStory_Error = 207005, // 207005
		
		/// <summary> 
		/// 没有购买章节信息
		/// </summary>
		Section_Buy_Info = 207007, // 207007
		
		/// <summary> 
		/// 没有购买的番外信息
		/// </summary>
		Section_Extra_Info = 207008, // 207008
		
		/// <summary> 
		/// 章节通关异常
		/// </summary>
		Section_Clearance_Error = 207009, // 207009
		
		/// <summary> 
		/// 章节重复购买
		/// </summary>
		Section_Repetition_Buy = 207010, // 207010
		
		/// <summary> 
		/// 购买的不是下一章节
		/// </summary>
		Section_Buy_Next = 207011, // 207011
		
		/// <summary> 
		/// 新章节暂时未开放
		/// </summary>
		Section_New_Open = 207012, // 207012
		
		/// <summary> 
		/// 获取仓库数据失败
		/// </summary>
		Warehouse_Detail_Defeated = 208001, // 208001
		
		/// <summary> 
		/// 获取宝箱信息错误
		/// </summary>
		Warehouse_BoxInfo_Error = 208004, // 208004
		
		/// <summary> 
		/// 宝箱钥匙不足
		/// </summary>
		WareHouse_BoxKey_NotEnough = 208005, // 208005
		
		/// <summary> 
		/// 宝箱解锁失败
		/// </summary>
		WareHouse_BoxUnlock_Error = 208006, // 208006
		
		/// <summary> 
		/// 宝箱尚未解锁完成
		/// </summary>
		WareHouse_BoxUnlockTime_NotEnough = 208007, // 208007
		
		/// <summary> 
		/// 更改宝箱解锁信息失败
		/// </summary>
		WareHouse_UpdateBoxUnlockInfo_Error = 208009, // 208009
		
		/// <summary> 
		/// 扣除宝箱数量失败
		/// </summary>
		WareHouse_DelBoxNum_Error = 208010, // 208010
		
		/// <summary> 
		/// 仓库宝箱加速失败
		/// </summary>
		WareHouse_BoxSpeed_Failure = 208011, // 208011
		
		/// <summary> 
		/// 仓库礼盒配置信息有误
		/// </summary>
		WareHouse_GitfBoxInfo_Error = 208014, // 208014
		
		/// <summary> 
		/// 仓库道具使用失败
		/// </summary>
		WareHouse_UseGoods_Error = 208018, // 208018
		
		/// <summary> 
		/// 没有对应Id的配置信息
		/// </summary>
		Config_No_Info = 209001, // 209001
		
		/// <summary> 
		/// 广告加速请求时间过短
		/// </summary>
		Advertising_Speed_Anomaly = 209002, // 209002
		
		/// <summary> 
		/// 签到失败
		/// </summary>
		Sign_In_Fail = 209500, // 209500
		
		/// <summary> 
		/// 获取签单信息失败
		/// </summary>
		Sign_Accumulate_Fail = 209501, // 209501
		
		/// <summary> 
		/// 没有达到累积签到信息
		/// </summary>
		Sign_Accumulate_Enough = 209502, // 209502
		
		/// <summary> 
		/// 没有累积签到奖励
		/// </summary>
		Sign_Accumulate_Award = 209503, // 209503
		
		/// <summary> 
		/// 领取累积奖励失败
		/// </summary>
		Sign_Award_Fail = 209504, // 209504
		
		/// <summary> 
		/// 每日签到重复签到
		/// </summary>
		Sign_Everyday_Repetition = 209505, // 209505
		
		/// <summary> 
		/// 发送的消息为空
		/// </summary>
		Send_Message_Null = 300001, // 300001
		
		/// <summary> 
		/// 获取配置失败
		/// </summary>
		Impulse_GetConfig_Error = 400001, // 400001
		
		/// <summary> 
		/// 赠送礼物失败
		/// </summary>
		Impulse_Send_Gift_Error = 400004, // 400004
		
		/// <summary> 
		/// 章节增加好感度失败
		/// </summary>
		Impulse_Section_Option_Error = 400005, // 400005
		
		/// <summary> 
		/// 章节选项记录添加失败
		/// </summary>
		Impulse_Add_Section_Optioned = 400006, // 400006
		
		/// <summary> 
		/// 领取登录好感值失败
		/// </summary>
		Impulse_GetLoginFavorable_Error = 400007, // 400007
		
		/// <summary> 
		/// 已领取当前章节好感值
		/// </summary>
		Impulse_Section_Favorable_Again = 400008, // 400008
		
		/// <summary> 
		/// 房间列表为空
		/// </summary>
		Section_Room_Null = 500001, // 500001
		
		/// <summary> 
		/// 房间异常
		/// </summary>
		Section_Room_Abnormity = 500002, // 500002
		
		/// <summary> 
		/// 房间上限
		/// </summary>
		Section_Room_Limit = 500003, // 500003
		
		/// <summary> 
		/// 你当前不在房间内
		/// </summary>
		Section_Absent_Room = 500004, // 500004
		
		/// <summary> 
		/// 暂时不能领取经验
		/// </summary>
		Section_No_Receive = 500005, // 500005
		
		/// <summary> 
		/// 竞猜请求数据为空
		/// </summary>
		Section_Guessing_Null = 500006, // 500006
		
		/// <summary> 
		/// 移动位置失败
		/// </summary>
		Section_Move_Position = 500007, // 500007
		
		/// <summary> 
		/// 当前不在下注时间
		/// </summary>
		Section_BetTime_Error = 500008, // 500008
		
		/// <summary> 
		/// 活动暂未开启或以结束
		/// </summary>
		Section_IsEndOrNotOpen = 500009, // 500009
		
		/// <summary> 
		/// 已拥有这个角色
		/// </summary>
		Role_IsOwn = 600001, // 600001
		
		/// <summary> 
		/// 该角色不在配置表中
		/// </summary>
		Role_Config_DontExist = 600002, // 600002
		
		/// <summary> 
		/// 切换角色失败
		/// </summary>
		Role_SwitchRole_Error = 600005, // 600005
		
		/// <summary> 
		/// 服饰修改失败
		/// </summary>
		Role_HallUpdate_Error = 600006, // 600006
		
		/// <summary> 
		/// 角色列表获取失败
		/// </summary>
		Role_List_Defeated = 600007, // 600007
		
		/// <summary> 
		/// 新增角色失败
		/// </summary>
		Role_Add_Defeated = 600008, // 600008
		
		/// <summary> 
		/// 没有服饰信息
		/// </summary>
		Role_Costume_Info = 600009, // 600009
		
		/// <summary> 
		/// 更新服饰失败
		/// </summary>
		Role_Costume_Renewal = 600010, // 600010
		
		/// <summary> 
		/// 保存引导失败
		/// </summary>
		Guidance_Save_Defeated = 650001, // 650001
		
		/// <summary> 
		/// 引导异常
		/// </summary>
		Guidance_Abnormal = 650002, // 650002
		
		/// <summary> 
		/// 已完成引导
		/// </summary>
		Guidance_Finish = 650003, // 650003
		
		/// <summary> 
		/// 没有对应的引导id
		/// </summary>
		Guidance_No_Info = 650004, // 650004
		
		/// <summary> 
		/// 领取任务奖励失败
		/// </summary>
		Task_GetAward_Error = 700001, // 700001
		
		/// <summary> 
		/// 领取任务经验奖励失败
		/// </summary>
		Task_GetTaskExperience_Error = 700002, // 700002
		
		/// <summary> 
		/// 功能未开放
		/// </summary>
		Function_IsNotOpen = 800001, // 800001
		
		/// <summary> 
		/// 暂无可提交任务订单
		/// </summary>
		Deal_CurrentNotDealSubmit = 900001, // 900001
		
		/// <summary> 
		/// 当前提交任务错误
		/// </summary>
		Deal_CurrentSubMit_Error = 900002, // 900002
		
		/// <summary> 
		/// 提交订单失败
		/// </summary>
		Deal_Submit_Error = 900003, // 900003
		
		/// <summary> 
		/// 刷新订单异常
		/// </summary>
		Deal_Refresh_Error = 900004, // 900004
		
		/// <summary> 
		/// 暂无订单数据
		/// </summary>
		Deal_DataIsNull = 900005, // 900005
		
		/// <summary> 
		/// 跳过订单冷却失败
		/// </summary>
		Deal_SkipDealAdv_Error = 900006, // 900006
		
		/// <summary> 
		/// 领取经验失败
		/// </summary>
		Deal_GetExp_Error = 900007, // 900007
		
		/// <summary> 
		/// 该订单还在冷却中
		/// </summary>
		Deal_OnCDTime = 900008, // 900008
	
	}
	
	// Defined in table: DataAnalytics
	public enum DotEventId
	{
		
		
		ManorPlantAdIncrease = 0, 
		
		
		GiftBoxAdIncrease = 1, 
		
		
		RegionUnLockingAdIncrease = 2, 
		
		
		CatchMouseDoubleAdGet = 3, 
		
		
		CatchDollAd = 4, 
		
		
		GuessBeanAd = 5, 
		
		
		CreateNickName = 6, 
		
		
		OpenManor = 7, 
		
		
		OpenWarehouse = 8, 
		
		
		OpenShop = 9, 
		
		
		LoginToLobby = 10, 
		
		
		EnterFriendManor = 11, 
		
		
		EnterRichMan = 12, 
		
		
		OpenChat = 13, 
		
		
		ChapterList = 14, 
		
		
		ActivityIcon = 15, 
		
		
		MailIcon = 16, 
		
		
		TaskIcon = 17, 
		
		
		EveningPartyIcon = 18, 
		
		
		MainFriendIcon = 19, 
		
		
		FashionIcon = 20, 
		
		
		WareHouseIcon = 21, 
		
		
		ShopIcon = 22, 
		
		
		ManorIcon = 23, 
		
		
		HeartMomentIcon = 24, 
		
		
		ChapterIcon = 25, 
		
		
		DecorateIcon = 26, 
		
		
		ChatIcon = 27, 
		
		
		LoginSucc = 28, 
		
		
		CreateNickSucc = 29, 
		
		
		CatchMouseSucc = 30, 
		
		
		OpenGiftBoxSucc = 31, 
		
		
		OneKeyFruitSucc = 32, 
		
		
		FriendManorStealSucc = 33, 
		
		
		RegionUnLock2Succ = 34, 
		
		
		RegionUnLock3Succ = 35, 
		
		
		RegionUnLock4Succ = 36, 
		
		
		RegionUnLock5Succ = 37, 
		
		
		RegionUnLock6Succ = 38, 
		
		
		RegionUnLock7Succ = 39, 
		
		
		RegionUnLock8Succ = 40, 
		
		
		RegionUnLock9Succ = 41, 
		
		
		RegionUnLock10Succ = 42, 
	
	}
	
	// Defined in table: DataAnalytics
	public enum DotEventMainId
	{
		
		
		AdEvent = 0, 
		
		
		FuctionOpen = 1, 
		
		
		FuctionIconClick = 2, 
		
		
		FuctionSucc = 3, 
	
	}
	
	

	// Defined in table: Config
	
	[System.Serializable]public partial class Config
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// Task
		/// </summary>
		public List<TaskDefine> Task = new List<TaskDefine>(); 
		
		/// <summary> 
		/// Cdk
		/// </summary>
		public List<CdkDefine> Cdk = new List<CdkDefine>(); 
		
		/// <summary> 
		/// PlayerInit
		/// </summary>
		public List<PlayerInitDefine> PlayerInit = new List<PlayerInitDefine>(); 
		
		/// <summary> 
		/// FavorableValue
		/// </summary>
		public List<FavorableValueDefine> FavorableValue = new List<FavorableValueDefine>(); 
		
		/// <summary> 
		/// OpenFunction
		/// </summary>
		public List<OpenFunctionDefine> OpenFunction = new List<OpenFunctionDefine>(); 
		
		/// <summary> 
		/// Package
		/// </summary>
		public List<PackageDefine> Package = new List<PackageDefine>(); 
		
		/// <summary> 
		/// Store
		/// </summary>
		public List<StoreDefine> Store = new List<StoreDefine>(); 
		
		/// <summary> 
		/// ServerErrorCode
		/// </summary>
		public List<ServerErrorCodeDefine> ServerErrorCode = new List<ServerErrorCodeDefine>(); 
		
		/// <summary> 
		/// Localize
		/// </summary>
		public List<LocalizeDefine> Localize = new List<LocalizeDefine>(); 
		
		/// <summary> 
		/// HallRole
		/// </summary>
		public List<HallRoleDefine> HallRole = new List<HallRoleDefine>(); 
		
		/// <summary> 
		/// AreaUnlock
		/// </summary>
		public List<AreaUnlockDefine> AreaUnlock = new List<AreaUnlockDefine>(); 
		
		/// <summary> 
		/// ZillionaireEvent
		/// </summary>
		public List<ZillionaireEventDefine> ZillionaireEvent = new List<ZillionaireEventDefine>(); 
		
		/// <summary> 
		/// ZillionaireMapData
		/// </summary>
		public List<ZillionaireMapDataDefine> ZillionaireMapData = new List<ZillionaireMapDataDefine>(); 
		
		/// <summary> 
		/// ZillionaireMapServerAward
		/// </summary>
		public List<ZillionaireMapServerAwardDefine> ZillionaireMapServerAward = new List<ZillionaireMapServerAwardDefine>(); 
		
		/// <summary> 
		/// ZillionaireLatticeData
		/// </summary>
		public List<ZillionaireLatticeDataDefine> ZillionaireLatticeData = new List<ZillionaireLatticeDataDefine>(); 
		
		/// <summary> 
		/// ZillionaireRole
		/// </summary>
		public List<ZillionaireRoleDefine> ZillionaireRole = new List<ZillionaireRoleDefine>(); 
		
		/// <summary> 
		/// Vertical
		/// </summary>
		public List<VerticalDefine> Vertical = new List<VerticalDefine>(); 
		
		/// <summary> 
		/// ManorCrop
		/// </summary>
		public List<ManorCropDefine> ManorCrop = new List<ManorCropDefine>(); 
		
		/// <summary> 
		/// ManorRegionWords
		/// </summary>
		public List<ManorRegionWordsDefine> ManorRegionWords = new List<ManorRegionWordsDefine>(); 
		
		/// <summary> 
		/// ManorRegionDialog
		/// </summary>
		public List<ManorRegionDialogDefine> ManorRegionDialog = new List<ManorRegionDialogDefine>(); 
		
		/// <summary> 
		/// GuideLittleStep
		/// </summary>
		public List<GuideLittleStepDefine> GuideLittleStep = new List<GuideLittleStepDefine>(); 
		
		/// <summary> 
		/// GuideTriggerCondition
		/// </summary>
		public List<GuideTriggerConditionDefine> GuideTriggerCondition = new List<GuideTriggerConditionDefine>(); 
		
		/// <summary> 
		/// ImpulseText
		/// </summary>
		public List<ImpulseTextDefine> ImpulseText = new List<ImpulseTextDefine>(); 
		
		/// <summary> 
		/// ImpulseGift
		/// </summary>
		public List<ImpulseGiftDefine> ImpulseGift = new List<ImpulseGiftDefine>(); 
		
		/// <summary> 
		/// DataAnalytics
		/// </summary>
		public List<DataAnalyticsDefine> DataAnalytics = new List<DataAnalyticsDefine>(); 
		
		/// <summary> 
		/// Guessing
		/// </summary>
		public List<GuessingDefine> Guessing = new List<GuessingDefine>(); 
		
		/// <summary> 
		/// Costume
		/// </summary>
		public List<CostumeDefine> Costume = new List<CostumeDefine>(); 
		
		/// <summary> 
		/// PlayerAvatar
		/// </summary>
		public List<PlayerAvatarDefine> PlayerAvatar = new List<PlayerAvatarDefine>(); 
		
		/// <summary> 
		/// PlayerGrade
		/// </summary>
		public List<PlayerGradeDefine> PlayerGrade = new List<PlayerGradeDefine>(); 
		
		/// <summary> 
		/// ExtraStory
		/// </summary>
		public List<ExtraStoryDefine> ExtraStory = new List<ExtraStoryDefine>(); 
		
		/// <summary> 
		/// OADDialogueText
		/// </summary>
		public List<OADDialogueTextDefine> OADDialogueText = new List<OADDialogueTextDefine>(); 
		
		/// <summary> 
		/// Section
		/// </summary>
		public List<SectionDefine> Section = new List<SectionDefine>(); 
		
		/// <summary> 
		/// ChapterFunctionText
		/// </summary>
		public List<ChapterFunctionTextDefine> ChapterFunctionText = new List<ChapterFunctionTextDefine>(); 
		
		/// <summary> 
		/// ChapterDialogueText
		/// </summary>
		public List<ChapterDialogueTextDefine> ChapterDialogueText = new List<ChapterDialogueTextDefine>(); 
		
		/// <summary> 
		/// SignIn
		/// </summary>
		public List<SignInDefine> SignIn = new List<SignInDefine>(); 
		
		/// <summary> 
		/// Decorate
		/// </summary>
		public List<DecorateDefine> Decorate = new List<DecorateDefine>(); 
		
		/// <summary> 
		/// DecorativeFlowerGame
		/// </summary>
		public List<DecorativeFlowerGameDefine> DecorativeFlowerGame = new List<DecorativeFlowerGameDefine>(); 
		
		/// <summary> 
		/// Deal
		/// </summary>
		public List<DealDefine> Deal = new List<DealDefine>(); 
		
		/// <summary> 
		/// DealRole
		/// </summary>
		public List<DealRoleDefine> DealRole = new List<DealRoleDefine>(); 
		
		/// <summary> 
		/// GameItem
		/// </summary>
		public List<GameItemDefine> GameItem = new List<GameItemDefine>(); 
		
		/// <summary> 
		/// Mail
		/// </summary>
		public List<MailDefine> Mail = new List<MailDefine>(); 
		
		/// <summary> 
		/// GoldJewelBuy
		/// </summary>
		public List<GoldJewelBuyDefine> GoldJewelBuy = new List<GoldJewelBuyDefine>(); 
		
		/// <summary> 
		/// RandomName
		/// </summary>
		public List<RandomNameDefine> RandomName = new List<RandomNameDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, TaskDefine> _TaskByTaskID = new Dictionary<int, TaskDefine>();
        public TaskDefine GetTaskByTaskID(int TaskID, TaskDefine def = default(TaskDefine))
        {
            TaskDefine ret;
            if ( _TaskByTaskID.TryGetValue( TaskID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(TaskDefine) )
			{
				TableLogger.ErrorLine("GetTaskByTaskID failed, TaskID: {0}", TaskID);
			}

            return def;
        }
		Dictionary<int, CdkDefine> _CdkByType = new Dictionary<int, CdkDefine>();
        public CdkDefine GetCdkByType(int Type, CdkDefine def = default(CdkDefine))
        {
            CdkDefine ret;
            if ( _CdkByType.TryGetValue( Type, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(CdkDefine) )
			{
				TableLogger.ErrorLine("GetCdkByType failed, Type: {0}", Type);
			}

            return def;
        }
		Dictionary<int, PlayerInitDefine> _PlayerInitByID = new Dictionary<int, PlayerInitDefine>();
        public PlayerInitDefine GetPlayerInitByID(int ID, PlayerInitDefine def = default(PlayerInitDefine))
        {
            PlayerInitDefine ret;
            if ( _PlayerInitByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(PlayerInitDefine) )
			{
				TableLogger.ErrorLine("GetPlayerInitByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, FavorableValueDefine> _FavorableValueByDialogueId = new Dictionary<int, FavorableValueDefine>();
        public FavorableValueDefine GetFavorableValueByDialogueId(int DialogueId, FavorableValueDefine def = default(FavorableValueDefine))
        {
            FavorableValueDefine ret;
            if ( _FavorableValueByDialogueId.TryGetValue( DialogueId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(FavorableValueDefine) )
			{
				TableLogger.ErrorLine("GetFavorableValueByDialogueId failed, DialogueId: {0}", DialogueId);
			}

            return def;
        }
		Dictionary<int, OpenFunctionDefine> _OpenFunctionByFunctionID = new Dictionary<int, OpenFunctionDefine>();
        public OpenFunctionDefine GetOpenFunctionByFunctionID(int FunctionID, OpenFunctionDefine def = default(OpenFunctionDefine))
        {
            OpenFunctionDefine ret;
            if ( _OpenFunctionByFunctionID.TryGetValue( FunctionID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(OpenFunctionDefine) )
			{
				TableLogger.ErrorLine("GetOpenFunctionByFunctionID failed, FunctionID: {0}", FunctionID);
			}

            return def;
        }
		Dictionary<int, PackageDefine> _PackageByID = new Dictionary<int, PackageDefine>();
        public PackageDefine GetPackageByID(int ID, PackageDefine def = default(PackageDefine))
        {
            PackageDefine ret;
            if ( _PackageByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(PackageDefine) )
			{
				TableLogger.ErrorLine("GetPackageByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, StoreDefine> _StoreByShopId = new Dictionary<int, StoreDefine>();
        public StoreDefine GetStoreByShopId(int ShopId, StoreDefine def = default(StoreDefine))
        {
            StoreDefine ret;
            if ( _StoreByShopId.TryGetValue( ShopId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(StoreDefine) )
			{
				TableLogger.ErrorLine("GetStoreByShopId failed, ShopId: {0}", ShopId);
			}

            return def;
        }
		Dictionary<int, ServerErrorCodeDefine> _ServerErrorCodeByID = new Dictionary<int, ServerErrorCodeDefine>();
        public ServerErrorCodeDefine GetServerErrorCodeByID(int ID, ServerErrorCodeDefine def = default(ServerErrorCodeDefine))
        {
            ServerErrorCodeDefine ret;
            if ( _ServerErrorCodeByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ServerErrorCodeDefine) )
			{
				TableLogger.ErrorLine("GetServerErrorCodeByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, LocalizeDefine> _LocalizeByID = new Dictionary<int, LocalizeDefine>();
        public LocalizeDefine GetLocalizeByID(int ID, LocalizeDefine def = default(LocalizeDefine))
        {
            LocalizeDefine ret;
            if ( _LocalizeByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(LocalizeDefine) )
			{
				TableLogger.ErrorLine("GetLocalizeByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HallRoleDefine> _HallRoleByID = new Dictionary<int, HallRoleDefine>();
        public HallRoleDefine GetHallRoleByID(int ID, HallRoleDefine def = default(HallRoleDefine))
        {
            HallRoleDefine ret;
            if ( _HallRoleByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HallRoleDefine) )
			{
				TableLogger.ErrorLine("GetHallRoleByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, AreaUnlockDefine> _AreaUnlockByID = new Dictionary<int, AreaUnlockDefine>();
        public AreaUnlockDefine GetAreaUnlockByID(int ID, AreaUnlockDefine def = default(AreaUnlockDefine))
        {
            AreaUnlockDefine ret;
            if ( _AreaUnlockByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(AreaUnlockDefine) )
			{
				TableLogger.ErrorLine("GetAreaUnlockByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ZillionaireEventDefine> _ZillionaireEventByID = new Dictionary<int, ZillionaireEventDefine>();
        public ZillionaireEventDefine GetZillionaireEventByID(int ID, ZillionaireEventDefine def = default(ZillionaireEventDefine))
        {
            ZillionaireEventDefine ret;
            if ( _ZillionaireEventByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ZillionaireEventDefine) )
			{
				TableLogger.ErrorLine("GetZillionaireEventByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ZillionaireMapDataDefine> _ZillionaireMapDataByID = new Dictionary<int, ZillionaireMapDataDefine>();
        public ZillionaireMapDataDefine GetZillionaireMapDataByID(int ID, ZillionaireMapDataDefine def = default(ZillionaireMapDataDefine))
        {
            ZillionaireMapDataDefine ret;
            if ( _ZillionaireMapDataByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ZillionaireMapDataDefine) )
			{
				TableLogger.ErrorLine("GetZillionaireMapDataByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ZillionaireMapServerAwardDefine> _ZillionaireMapServerAwardByID = new Dictionary<int, ZillionaireMapServerAwardDefine>();
        public ZillionaireMapServerAwardDefine GetZillionaireMapServerAwardByID(int ID, ZillionaireMapServerAwardDefine def = default(ZillionaireMapServerAwardDefine))
        {
            ZillionaireMapServerAwardDefine ret;
            if ( _ZillionaireMapServerAwardByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ZillionaireMapServerAwardDefine) )
			{
				TableLogger.ErrorLine("GetZillionaireMapServerAwardByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ZillionaireLatticeDataDefine> _ZillionaireLatticeDataByID = new Dictionary<int, ZillionaireLatticeDataDefine>();
        public ZillionaireLatticeDataDefine GetZillionaireLatticeDataByID(int ID, ZillionaireLatticeDataDefine def = default(ZillionaireLatticeDataDefine))
        {
            ZillionaireLatticeDataDefine ret;
            if ( _ZillionaireLatticeDataByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ZillionaireLatticeDataDefine) )
			{
				TableLogger.ErrorLine("GetZillionaireLatticeDataByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ZillionaireRoleDefine> _ZillionaireRoleByID = new Dictionary<int, ZillionaireRoleDefine>();
        public ZillionaireRoleDefine GetZillionaireRoleByID(int ID, ZillionaireRoleDefine def = default(ZillionaireRoleDefine))
        {
            ZillionaireRoleDefine ret;
            if ( _ZillionaireRoleByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ZillionaireRoleDefine) )
			{
				TableLogger.ErrorLine("GetZillionaireRoleByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ManorCropDefine> _ManorCropByCropId = new Dictionary<int, ManorCropDefine>();
        public ManorCropDefine GetManorCropByCropId(int CropId, ManorCropDefine def = default(ManorCropDefine))
        {
            ManorCropDefine ret;
            if ( _ManorCropByCropId.TryGetValue( CropId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ManorCropDefine) )
			{
				TableLogger.ErrorLine("GetManorCropByCropId failed, CropId: {0}", CropId);
			}

            return def;
        }
		Dictionary<int, ManorRegionWordsDefine> _ManorRegionWordsByDialogId = new Dictionary<int, ManorRegionWordsDefine>();
        public ManorRegionWordsDefine GetManorRegionWordsByDialogId(int DialogId, ManorRegionWordsDefine def = default(ManorRegionWordsDefine))
        {
            ManorRegionWordsDefine ret;
            if ( _ManorRegionWordsByDialogId.TryGetValue( DialogId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ManorRegionWordsDefine) )
			{
				TableLogger.ErrorLine("GetManorRegionWordsByDialogId failed, DialogId: {0}", DialogId);
			}

            return def;
        }
		Dictionary<int, ManorRegionDialogDefine> _ManorRegionDialogByDialogId = new Dictionary<int, ManorRegionDialogDefine>();
        public ManorRegionDialogDefine GetManorRegionDialogByDialogId(int DialogId, ManorRegionDialogDefine def = default(ManorRegionDialogDefine))
        {
            ManorRegionDialogDefine ret;
            if ( _ManorRegionDialogByDialogId.TryGetValue( DialogId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ManorRegionDialogDefine) )
			{
				TableLogger.ErrorLine("GetManorRegionDialogByDialogId failed, DialogId: {0}", DialogId);
			}

            return def;
        }
		Dictionary<int, GuideLittleStepDefine> _GuideLittleStepById = new Dictionary<int, GuideLittleStepDefine>();
        public GuideLittleStepDefine GetGuideLittleStepById(int Id, GuideLittleStepDefine def = default(GuideLittleStepDefine))
        {
            GuideLittleStepDefine ret;
            if ( _GuideLittleStepById.TryGetValue( Id, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(GuideLittleStepDefine) )
			{
				TableLogger.ErrorLine("GetGuideLittleStepById failed, Id: {0}", Id);
			}

            return def;
        }
		Dictionary<int, GuideTriggerConditionDefine> _GuideTriggerConditionById = new Dictionary<int, GuideTriggerConditionDefine>();
        public GuideTriggerConditionDefine GetGuideTriggerConditionById(int Id, GuideTriggerConditionDefine def = default(GuideTriggerConditionDefine))
        {
            GuideTriggerConditionDefine ret;
            if ( _GuideTriggerConditionById.TryGetValue( Id, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(GuideTriggerConditionDefine) )
			{
				TableLogger.ErrorLine("GetGuideTriggerConditionById failed, Id: {0}", Id);
			}

            return def;
        }
		Dictionary<int, ImpulseTextDefine> _ImpulseTextByImpulseTextId = new Dictionary<int, ImpulseTextDefine>();
        public ImpulseTextDefine GetImpulseTextByImpulseTextId(int ImpulseTextId, ImpulseTextDefine def = default(ImpulseTextDefine))
        {
            ImpulseTextDefine ret;
            if ( _ImpulseTextByImpulseTextId.TryGetValue( ImpulseTextId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ImpulseTextDefine) )
			{
				TableLogger.ErrorLine("GetImpulseTextByImpulseTextId failed, ImpulseTextId: {0}", ImpulseTextId);
			}

            return def;
        }
		Dictionary<int, ImpulseGiftDefine> _ImpulseGiftByID = new Dictionary<int, ImpulseGiftDefine>();
        public ImpulseGiftDefine GetImpulseGiftByID(int ID, ImpulseGiftDefine def = default(ImpulseGiftDefine))
        {
            ImpulseGiftDefine ret;
            if ( _ImpulseGiftByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ImpulseGiftDefine) )
			{
				TableLogger.ErrorLine("GetImpulseGiftByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, DataAnalyticsDefine> _DataAnalyticsById = new Dictionary<int, DataAnalyticsDefine>();
        public DataAnalyticsDefine GetDataAnalyticsById(int Id, DataAnalyticsDefine def = default(DataAnalyticsDefine))
        {
            DataAnalyticsDefine ret;
            if ( _DataAnalyticsById.TryGetValue( Id, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(DataAnalyticsDefine) )
			{
				TableLogger.ErrorLine("GetDataAnalyticsById failed, Id: {0}", Id);
			}

            return def;
        }
		Dictionary<int, GuessingDefine> _GuessingByID = new Dictionary<int, GuessingDefine>();
        public GuessingDefine GetGuessingByID(int ID, GuessingDefine def = default(GuessingDefine))
        {
            GuessingDefine ret;
            if ( _GuessingByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(GuessingDefine) )
			{
				TableLogger.ErrorLine("GetGuessingByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, CostumeDefine> _CostumeByCostumeId = new Dictionary<int, CostumeDefine>();
        public CostumeDefine GetCostumeByCostumeId(int CostumeId, CostumeDefine def = default(CostumeDefine))
        {
            CostumeDefine ret;
            if ( _CostumeByCostumeId.TryGetValue( CostumeId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(CostumeDefine) )
			{
				TableLogger.ErrorLine("GetCostumeByCostumeId failed, CostumeId: {0}", CostumeId);
			}

            return def;
        }
		Dictionary<int, PlayerAvatarDefine> _PlayerAvatarByID = new Dictionary<int, PlayerAvatarDefine>();
        public PlayerAvatarDefine GetPlayerAvatarByID(int ID, PlayerAvatarDefine def = default(PlayerAvatarDefine))
        {
            PlayerAvatarDefine ret;
            if ( _PlayerAvatarByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(PlayerAvatarDefine) )
			{
				TableLogger.ErrorLine("GetPlayerAvatarByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, PlayerGradeDefine> _PlayerGradeByGrade = new Dictionary<int, PlayerGradeDefine>();
        public PlayerGradeDefine GetPlayerGradeByGrade(int Grade, PlayerGradeDefine def = default(PlayerGradeDefine))
        {
            PlayerGradeDefine ret;
            if ( _PlayerGradeByGrade.TryGetValue( Grade, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(PlayerGradeDefine) )
			{
				TableLogger.ErrorLine("GetPlayerGradeByGrade failed, Grade: {0}", Grade);
			}

            return def;
        }
		Dictionary<int, ExtraStoryDefine> _ExtraStoryByExtraStoryId = new Dictionary<int, ExtraStoryDefine>();
        public ExtraStoryDefine GetExtraStoryByExtraStoryId(int ExtraStoryId, ExtraStoryDefine def = default(ExtraStoryDefine))
        {
            ExtraStoryDefine ret;
            if ( _ExtraStoryByExtraStoryId.TryGetValue( ExtraStoryId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ExtraStoryDefine) )
			{
				TableLogger.ErrorLine("GetExtraStoryByExtraStoryId failed, ExtraStoryId: {0}", ExtraStoryId);
			}

            return def;
        }
		Dictionary<int, OADDialogueTextDefine> _OADDialogueTextByID = new Dictionary<int, OADDialogueTextDefine>();
        public OADDialogueTextDefine GetOADDialogueTextByID(int ID, OADDialogueTextDefine def = default(OADDialogueTextDefine))
        {
            OADDialogueTextDefine ret;
            if ( _OADDialogueTextByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(OADDialogueTextDefine) )
			{
				TableLogger.ErrorLine("GetOADDialogueTextByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, SectionDefine> _SectionBySectionId = new Dictionary<int, SectionDefine>();
        public SectionDefine GetSectionBySectionId(int SectionId, SectionDefine def = default(SectionDefine))
        {
            SectionDefine ret;
            if ( _SectionBySectionId.TryGetValue( SectionId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SectionDefine) )
			{
				TableLogger.ErrorLine("GetSectionBySectionId failed, SectionId: {0}", SectionId);
			}

            return def;
        }
		Dictionary<int, ChapterFunctionTextDefine> _ChapterFunctionTextByID = new Dictionary<int, ChapterFunctionTextDefine>();
        public ChapterFunctionTextDefine GetChapterFunctionTextByID(int ID, ChapterFunctionTextDefine def = default(ChapterFunctionTextDefine))
        {
            ChapterFunctionTextDefine ret;
            if ( _ChapterFunctionTextByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ChapterFunctionTextDefine) )
			{
				TableLogger.ErrorLine("GetChapterFunctionTextByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ChapterDialogueTextDefine> _ChapterDialogueTextByID = new Dictionary<int, ChapterDialogueTextDefine>();
        public ChapterDialogueTextDefine GetChapterDialogueTextByID(int ID, ChapterDialogueTextDefine def = default(ChapterDialogueTextDefine))
        {
            ChapterDialogueTextDefine ret;
            if ( _ChapterDialogueTextByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ChapterDialogueTextDefine) )
			{
				TableLogger.ErrorLine("GetChapterDialogueTextByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, SignInDefine> _SignInByPhaseID = new Dictionary<int, SignInDefine>();
        public SignInDefine GetSignInByPhaseID(int PhaseID, SignInDefine def = default(SignInDefine))
        {
            SignInDefine ret;
            if ( _SignInByPhaseID.TryGetValue( PhaseID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SignInDefine) )
			{
				TableLogger.ErrorLine("GetSignInByPhaseID failed, PhaseID: {0}", PhaseID);
			}

            return def;
        }
		Dictionary<int, DecorateDefine> _DecorateByDecorateId = new Dictionary<int, DecorateDefine>();
        public DecorateDefine GetDecorateByDecorateId(int DecorateId, DecorateDefine def = default(DecorateDefine))
        {
            DecorateDefine ret;
            if ( _DecorateByDecorateId.TryGetValue( DecorateId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(DecorateDefine) )
			{
				TableLogger.ErrorLine("GetDecorateByDecorateId failed, DecorateId: {0}", DecorateId);
			}

            return def;
        }
		Dictionary<int, DecorativeFlowerGameDefine> _DecorativeFlowerGameByItemId = new Dictionary<int, DecorativeFlowerGameDefine>();
        public DecorativeFlowerGameDefine GetDecorativeFlowerGameByItemId(int ItemId, DecorativeFlowerGameDefine def = default(DecorativeFlowerGameDefine))
        {
            DecorativeFlowerGameDefine ret;
            if ( _DecorativeFlowerGameByItemId.TryGetValue( ItemId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(DecorativeFlowerGameDefine) )
			{
				TableLogger.ErrorLine("GetDecorativeFlowerGameByItemId failed, ItemId: {0}", ItemId);
			}

            return def;
        }
		Dictionary<int, DealRoleDefine> _DealRoleByDealRoleID = new Dictionary<int, DealRoleDefine>();
        public DealRoleDefine GetDealRoleByDealRoleID(int DealRoleID, DealRoleDefine def = default(DealRoleDefine))
        {
            DealRoleDefine ret;
            if ( _DealRoleByDealRoleID.TryGetValue( DealRoleID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(DealRoleDefine) )
			{
				TableLogger.ErrorLine("GetDealRoleByDealRoleID failed, DealRoleID: {0}", DealRoleID);
			}

            return def;
        }
		Dictionary<int, GameItemDefine> _GameItemByID = new Dictionary<int, GameItemDefine>();
        public GameItemDefine GetGameItemByID(int ID, GameItemDefine def = default(GameItemDefine))
        {
            GameItemDefine ret;
            if ( _GameItemByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(GameItemDefine) )
			{
				TableLogger.ErrorLine("GetGameItemByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, MailDefine> _MailByMailId = new Dictionary<int, MailDefine>();
        public MailDefine GetMailByMailId(int MailId, MailDefine def = default(MailDefine))
        {
            MailDefine ret;
            if ( _MailByMailId.TryGetValue( MailId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(MailDefine) )
			{
				TableLogger.ErrorLine("GetMailByMailId failed, MailId: {0}", MailId);
			}

            return def;
        }
		Dictionary<int, GoldJewelBuyDefine> _GoldJewelBuyByLevelId = new Dictionary<int, GoldJewelBuyDefine>();
        public GoldJewelBuyDefine GetGoldJewelBuyByLevelId(int LevelId, GoldJewelBuyDefine def = default(GoldJewelBuyDefine))
        {
            GoldJewelBuyDefine ret;
            if ( _GoldJewelBuyByLevelId.TryGetValue( LevelId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(GoldJewelBuyDefine) )
			{
				TableLogger.ErrorLine("GetGoldJewelBuyByLevelId failed, LevelId: {0}", LevelId);
			}

            return def;
        }
		Dictionary<string, RandomNameDefine> _RandomNameByFirstName = new Dictionary<string, RandomNameDefine>();
        public RandomNameDefine GetRandomNameByFirstName(string FirstName, RandomNameDefine def = default(RandomNameDefine))
        {
            RandomNameDefine ret;
            if ( _RandomNameByFirstName.TryGetValue( FirstName, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(RandomNameDefine) )
			{
				TableLogger.ErrorLine("GetRandomNameByFirstName failed, FirstName: {0}", FirstName);
			}

            return def;
        }
		
	
		public VerticalDefine GetVertical( )
		{
			return Vertical[0];
		}	
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<Config> ConfigDeserializeHandler = new tabtoy.DeserializeHandler<Config>(Deserialize);
		public static void Deserialize( Config ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Task.Add( reader.ReadStruct<TaskDefine>(TaskDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.Cdk.Add( reader.ReadStruct<CdkDefine>(CdkDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0002:
                	{
						ins.PlayerInit.Add( reader.ReadStruct<PlayerInitDefine>(PlayerInitDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0003:
                	{
						ins.FavorableValue.Add( reader.ReadStruct<FavorableValueDefine>(FavorableValueDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0004:
                	{
						ins.OpenFunction.Add( reader.ReadStruct<OpenFunctionDefine>(OpenFunctionDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0005:
                	{
						ins.Package.Add( reader.ReadStruct<PackageDefine>(PackageDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0006:
                	{
						ins.Store.Add( reader.ReadStruct<StoreDefine>(StoreDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0007:
                	{
						ins.ServerErrorCode.Add( reader.ReadStruct<ServerErrorCodeDefine>(ServerErrorCodeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0008:
                	{
						ins.Localize.Add( reader.ReadStruct<LocalizeDefine>(LocalizeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0009:
                	{
						ins.HallRole.Add( reader.ReadStruct<HallRoleDefine>(HallRoleDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000a:
                	{
						ins.AreaUnlock.Add( reader.ReadStruct<AreaUnlockDefine>(AreaUnlockDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000b:
                	{
						ins.ZillionaireEvent.Add( reader.ReadStruct<ZillionaireEventDefine>(ZillionaireEventDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000c:
                	{
						ins.ZillionaireMapData.Add( reader.ReadStruct<ZillionaireMapDataDefine>(ZillionaireMapDataDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000d:
                	{
						ins.ZillionaireMapServerAward.Add( reader.ReadStruct<ZillionaireMapServerAwardDefine>(ZillionaireMapServerAwardDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000e:
                	{
						ins.ZillionaireLatticeData.Add( reader.ReadStruct<ZillionaireLatticeDataDefine>(ZillionaireLatticeDataDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000f:
                	{
						ins.ZillionaireRole.Add( reader.ReadStruct<ZillionaireRoleDefine>(ZillionaireRoleDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0010:
                	{
						ins.Vertical.Add( reader.ReadStruct<VerticalDefine>(VerticalDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0011:
                	{
						ins.ManorCrop.Add( reader.ReadStruct<ManorCropDefine>(ManorCropDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0012:
                	{
						ins.ManorRegionWords.Add( reader.ReadStruct<ManorRegionWordsDefine>(ManorRegionWordsDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0013:
                	{
						ins.ManorRegionDialog.Add( reader.ReadStruct<ManorRegionDialogDefine>(ManorRegionDialogDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0014:
                	{
						ins.GuideLittleStep.Add( reader.ReadStruct<GuideLittleStepDefine>(GuideLittleStepDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0015:
                	{
						ins.GuideTriggerCondition.Add( reader.ReadStruct<GuideTriggerConditionDefine>(GuideTriggerConditionDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0016:
                	{
						ins.ImpulseText.Add( reader.ReadStruct<ImpulseTextDefine>(ImpulseTextDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0017:
                	{
						ins.ImpulseGift.Add( reader.ReadStruct<ImpulseGiftDefine>(ImpulseGiftDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0018:
                	{
						ins.DataAnalytics.Add( reader.ReadStruct<DataAnalyticsDefine>(DataAnalyticsDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0019:
                	{
						ins.Guessing.Add( reader.ReadStruct<GuessingDefine>(GuessingDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001a:
                	{
						ins.Costume.Add( reader.ReadStruct<CostumeDefine>(CostumeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001b:
                	{
						ins.PlayerAvatar.Add( reader.ReadStruct<PlayerAvatarDefine>(PlayerAvatarDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001c:
                	{
						ins.PlayerGrade.Add( reader.ReadStruct<PlayerGradeDefine>(PlayerGradeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001d:
                	{
						ins.ExtraStory.Add( reader.ReadStruct<ExtraStoryDefine>(ExtraStoryDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001e:
                	{
						ins.OADDialogueText.Add( reader.ReadStruct<OADDialogueTextDefine>(OADDialogueTextDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001f:
                	{
						ins.Section.Add( reader.ReadStruct<SectionDefine>(SectionDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0020:
                	{
						ins.ChapterFunctionText.Add( reader.ReadStruct<ChapterFunctionTextDefine>(ChapterFunctionTextDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0021:
                	{
						ins.ChapterDialogueText.Add( reader.ReadStruct<ChapterDialogueTextDefine>(ChapterDialogueTextDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0022:
                	{
						ins.SignIn.Add( reader.ReadStruct<SignInDefine>(SignInDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0023:
                	{
						ins.Decorate.Add( reader.ReadStruct<DecorateDefine>(DecorateDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0024:
                	{
						ins.DecorativeFlowerGame.Add( reader.ReadStruct<DecorativeFlowerGameDefine>(DecorativeFlowerGameDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0025:
                	{
						ins.Deal.Add( reader.ReadStruct<DealDefine>(DealDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0026:
                	{
						ins.DealRole.Add( reader.ReadStruct<DealRoleDefine>(DealRoleDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0027:
                	{
						ins.GameItem.Add( reader.ReadStruct<GameItemDefine>(GameItemDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0028:
                	{
						ins.Mail.Add( reader.ReadStruct<MailDefine>(MailDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0029:
                	{
						ins.GoldJewelBuy.Add( reader.ReadStruct<GoldJewelBuyDefine>(GoldJewelBuyDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa002a:
                	{
						ins.RandomName.Add( reader.ReadStruct<RandomNameDefine>(RandomNameDefineDeserializeHandler) );
                	}
                	break; 
                }
             }

			
			// Build Task Index
			for( int i = 0;i< ins.Task.Count;i++)
			{
				var element = ins.Task[i];
				
				ins._TaskByTaskID.Add(element.TaskID, element);
				
			}
			
			// Build Cdk Index
			for( int i = 0;i< ins.Cdk.Count;i++)
			{
				var element = ins.Cdk[i];
				
				ins._CdkByType.Add(element.Type, element);
				
			}
			
			// Build PlayerInit Index
			for( int i = 0;i< ins.PlayerInit.Count;i++)
			{
				var element = ins.PlayerInit[i];
				
				ins._PlayerInitByID.Add(element.ID, element);
				
			}
			
			// Build FavorableValue Index
			for( int i = 0;i< ins.FavorableValue.Count;i++)
			{
				var element = ins.FavorableValue[i];
				
				ins._FavorableValueByDialogueId.Add(element.DialogueId, element);
				
			}
			
			// Build OpenFunction Index
			for( int i = 0;i< ins.OpenFunction.Count;i++)
			{
				var element = ins.OpenFunction[i];
				
				ins._OpenFunctionByFunctionID.Add(element.FunctionID, element);
				
			}
			
			// Build Package Index
			for( int i = 0;i< ins.Package.Count;i++)
			{
				var element = ins.Package[i];
				
				ins._PackageByID.Add(element.ID, element);
				
			}
			
			// Build Store Index
			for( int i = 0;i< ins.Store.Count;i++)
			{
				var element = ins.Store[i];
				
				ins._StoreByShopId.Add(element.ShopId, element);
				
			}
			
			// Build ServerErrorCode Index
			for( int i = 0;i< ins.ServerErrorCode.Count;i++)
			{
				var element = ins.ServerErrorCode[i];
				
				ins._ServerErrorCodeByID.Add(element.ID, element);
				
			}
			
			// Build Localize Index
			for( int i = 0;i< ins.Localize.Count;i++)
			{
				var element = ins.Localize[i];
				
				ins._LocalizeByID.Add(element.ID, element);
				
			}
			
			// Build HallRole Index
			for( int i = 0;i< ins.HallRole.Count;i++)
			{
				var element = ins.HallRole[i];
				
				ins._HallRoleByID.Add(element.ID, element);
				
			}
			
			// Build AreaUnlock Index
			for( int i = 0;i< ins.AreaUnlock.Count;i++)
			{
				var element = ins.AreaUnlock[i];
				
				ins._AreaUnlockByID.Add(element.ID, element);
				
			}
			
			// Build ZillionaireEvent Index
			for( int i = 0;i< ins.ZillionaireEvent.Count;i++)
			{
				var element = ins.ZillionaireEvent[i];
				
				ins._ZillionaireEventByID.Add(element.ID, element);
				
			}
			
			// Build ZillionaireMapData Index
			for( int i = 0;i< ins.ZillionaireMapData.Count;i++)
			{
				var element = ins.ZillionaireMapData[i];
				
				ins._ZillionaireMapDataByID.Add(element.ID, element);
				
			}
			
			// Build ZillionaireMapServerAward Index
			for( int i = 0;i< ins.ZillionaireMapServerAward.Count;i++)
			{
				var element = ins.ZillionaireMapServerAward[i];
				
				ins._ZillionaireMapServerAwardByID.Add(element.ID, element);
				
			}
			
			// Build ZillionaireLatticeData Index
			for( int i = 0;i< ins.ZillionaireLatticeData.Count;i++)
			{
				var element = ins.ZillionaireLatticeData[i];
				
				ins._ZillionaireLatticeDataByID.Add(element.ID, element);
				
			}
			
			// Build ZillionaireRole Index
			for( int i = 0;i< ins.ZillionaireRole.Count;i++)
			{
				var element = ins.ZillionaireRole[i];
				
				ins._ZillionaireRoleByID.Add(element.ID, element);
				
			}
			
			// Build ManorCrop Index
			for( int i = 0;i< ins.ManorCrop.Count;i++)
			{
				var element = ins.ManorCrop[i];
				
				ins._ManorCropByCropId.Add(element.CropId, element);
				
			}
			
			// Build ManorRegionWords Index
			for( int i = 0;i< ins.ManorRegionWords.Count;i++)
			{
				var element = ins.ManorRegionWords[i];
				
				ins._ManorRegionWordsByDialogId.Add(element.DialogId, element);
				
			}
			
			// Build ManorRegionDialog Index
			for( int i = 0;i< ins.ManorRegionDialog.Count;i++)
			{
				var element = ins.ManorRegionDialog[i];
				
				ins._ManorRegionDialogByDialogId.Add(element.DialogId, element);
				
			}
			
			// Build GuideLittleStep Index
			for( int i = 0;i< ins.GuideLittleStep.Count;i++)
			{
				var element = ins.GuideLittleStep[i];
				
				ins._GuideLittleStepById.Add(element.Id, element);
				
			}
			
			// Build GuideTriggerCondition Index
			for( int i = 0;i< ins.GuideTriggerCondition.Count;i++)
			{
				var element = ins.GuideTriggerCondition[i];
				
				ins._GuideTriggerConditionById.Add(element.Id, element);
				
			}
			
			// Build ImpulseText Index
			for( int i = 0;i< ins.ImpulseText.Count;i++)
			{
				var element = ins.ImpulseText[i];
				
				ins._ImpulseTextByImpulseTextId.Add(element.ImpulseTextId, element);
				
			}
			
			// Build ImpulseGift Index
			for( int i = 0;i< ins.ImpulseGift.Count;i++)
			{
				var element = ins.ImpulseGift[i];
				
				ins._ImpulseGiftByID.Add(element.ID, element);
				
			}
			
			// Build DataAnalytics Index
			for( int i = 0;i< ins.DataAnalytics.Count;i++)
			{
				var element = ins.DataAnalytics[i];
				
				ins._DataAnalyticsById.Add(element.Id, element);
				
			}
			
			// Build Guessing Index
			for( int i = 0;i< ins.Guessing.Count;i++)
			{
				var element = ins.Guessing[i];
				
				ins._GuessingByID.Add(element.ID, element);
				
			}
			
			// Build Costume Index
			for( int i = 0;i< ins.Costume.Count;i++)
			{
				var element = ins.Costume[i];
				
				ins._CostumeByCostumeId.Add(element.CostumeId, element);
				
			}
			
			// Build PlayerAvatar Index
			for( int i = 0;i< ins.PlayerAvatar.Count;i++)
			{
				var element = ins.PlayerAvatar[i];
				
				ins._PlayerAvatarByID.Add(element.ID, element);
				
			}
			
			// Build PlayerGrade Index
			for( int i = 0;i< ins.PlayerGrade.Count;i++)
			{
				var element = ins.PlayerGrade[i];
				
				ins._PlayerGradeByGrade.Add(element.Grade, element);
				
			}
			
			// Build ExtraStory Index
			for( int i = 0;i< ins.ExtraStory.Count;i++)
			{
				var element = ins.ExtraStory[i];
				
				ins._ExtraStoryByExtraStoryId.Add(element.ExtraStoryId, element);
				
			}
			
			// Build OADDialogueText Index
			for( int i = 0;i< ins.OADDialogueText.Count;i++)
			{
				var element = ins.OADDialogueText[i];
				
				ins._OADDialogueTextByID.Add(element.ID, element);
				
			}
			
			// Build Section Index
			for( int i = 0;i< ins.Section.Count;i++)
			{
				var element = ins.Section[i];
				
				ins._SectionBySectionId.Add(element.SectionId, element);
				
			}
			
			// Build ChapterFunctionText Index
			for( int i = 0;i< ins.ChapterFunctionText.Count;i++)
			{
				var element = ins.ChapterFunctionText[i];
				
				ins._ChapterFunctionTextByID.Add(element.ID, element);
				
			}
			
			// Build ChapterDialogueText Index
			for( int i = 0;i< ins.ChapterDialogueText.Count;i++)
			{
				var element = ins.ChapterDialogueText[i];
				
				ins._ChapterDialogueTextByID.Add(element.ID, element);
				
			}
			
			// Build SignIn Index
			for( int i = 0;i< ins.SignIn.Count;i++)
			{
				var element = ins.SignIn[i];
				
				ins._SignInByPhaseID.Add(element.PhaseID, element);
				
			}
			
			// Build Decorate Index
			for( int i = 0;i< ins.Decorate.Count;i++)
			{
				var element = ins.Decorate[i];
				
				ins._DecorateByDecorateId.Add(element.DecorateId, element);
				
			}
			
			// Build DecorativeFlowerGame Index
			for( int i = 0;i< ins.DecorativeFlowerGame.Count;i++)
			{
				var element = ins.DecorativeFlowerGame[i];
				
				ins._DecorativeFlowerGameByItemId.Add(element.ItemId, element);
				
			}
			
			// Build DealRole Index
			for( int i = 0;i< ins.DealRole.Count;i++)
			{
				var element = ins.DealRole[i];
				
				ins._DealRoleByDealRoleID.Add(element.DealRoleID, element);
				
			}
			
			// Build GameItem Index
			for( int i = 0;i< ins.GameItem.Count;i++)
			{
				var element = ins.GameItem[i];
				
				ins._GameItemByID.Add(element.ID, element);
				
			}
			
			// Build Mail Index
			for( int i = 0;i< ins.Mail.Count;i++)
			{
				var element = ins.Mail[i];
				
				ins._MailByMailId.Add(element.MailId, element);
				
			}
			
			// Build GoldJewelBuy Index
			for( int i = 0;i< ins.GoldJewelBuy.Count;i++)
			{
				var element = ins.GoldJewelBuy[i];
				
				ins._GoldJewelBuyByLevelId.Add(element.LevelId, element);
				
			}
			
			// Build RandomName Index
			for( int i = 0;i< ins.RandomName.Count;i++)
			{
				var element = ins.RandomName[i];
				
				ins._RandomNameByFirstName.Add(element.FirstName, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<ProbabilityReward> ProbabilityRewardDeserializeHandler = new tabtoy.DeserializeHandler<ProbabilityReward>(Deserialize);
		public static void Deserialize( ProbabilityReward ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.Type = (TypeGameItem)reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Count = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Weights = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GoodIDCount> GoodIDCountDeserializeHandler = new tabtoy.DeserializeHandler<GoodIDCount>(Deserialize);
		public static void Deserialize( GoodIDCount ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x20001:
                	{
						ins.Count = reader.ReadInt64();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<WarehouseType> WarehouseTypeDeserializeHandler = new tabtoy.DeserializeHandler<WarehouseType>(Deserialize);
		public static void Deserialize( WarehouseType ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.ConfigFileName = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<DealClass> DealClassDeserializeHandler = new tabtoy.DeserializeHandler<DealClass>(Deserialize);
		public static void Deserialize( DealClass ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.IdGameItem = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Price = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GoldGoodsId> GoldGoodsIdDeserializeHandler = new tabtoy.DeserializeHandler<GoldGoodsId>(Deserialize);
		public static void Deserialize( GoldGoodsId ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.GoodsID = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<JewelGoodsId> JewelGoodsIdDeserializeHandler = new tabtoy.DeserializeHandler<JewelGoodsId>(Deserialize);
		public static void Deserialize( JewelGoodsId ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.GoodsID = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GoodAward> GoodAwardDeserializeHandler = new tabtoy.DeserializeHandler<GoodAward>(Deserialize);
		public static void Deserialize( GoodAward ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Count = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Weights = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<MapEventGrid> MapEventGridDeserializeHandler = new tabtoy.DeserializeHandler<MapEventGrid>(Deserialize);
		public static void Deserialize( MapEventGrid ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Produce = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Count = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<BoxIdKeysTime> BoxIdKeysTimeDeserializeHandler = new tabtoy.DeserializeHandler<BoxIdKeysTime>(Deserialize);
		public static void Deserialize( BoxIdKeysTime ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.BoxID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.KeyID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.KeyNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x20003:
                	{
						ins.Time = reader.ReadInt64();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ExtendBagIDCount> ExtendBagIDCountDeserializeHandler = new tabtoy.DeserializeHandler<ExtendBagIDCount>(Deserialize);
		public static void Deserialize( ExtendBagIDCount ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.GoodsID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Count = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<PackageIDWeights> PackageIDWeightsDeserializeHandler = new tabtoy.DeserializeHandler<PackageIDWeights>(Deserialize);
		public static void Deserialize( PackageIDWeights ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.PackageID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Weights = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<Vec2> Vec2DeserializeHandler = new tabtoy.DeserializeHandler<Vec2>(Deserialize);
		public static void Deserialize( Vec2 ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50000:
                	{
						ins.X = reader.ReadFloat();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.Y = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<DealDemand> DealDemandDeserializeHandler = new tabtoy.DeserializeHandler<DealDemand>(Deserialize);
		public static void Deserialize( DealDemand ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.DescID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.Level = (TypeRarity)reader.ReadInt32();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.Type = (CropType)reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<CostumeTextureInfo> CostumeTextureInfoDeserializeHandler = new tabtoy.DeserializeHandler<CostumeTextureInfo>(Deserialize);
		public static void Deserialize( CostumeTextureInfo ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.DefTextureName = reader.ReadString();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.UseTextureName = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<TaskDefine> TaskDefineDeserializeHandler = new tabtoy.DeserializeHandler<TaskDefine>(Deserialize);
		public static void Deserialize( TaskDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.TaskID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.TaskType = (TaskType)reader.ReadInt32();
                	}
                	break; 
                	case 0x70002:
                	{
						ins.IsSpecialStep = reader.ReadBool();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.TaskGrade = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.FinishNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x90005:
                	{
						ins.TaskAward.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x10006:
                	{
						ins.TaskName = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.TaskDetails = reader.ReadInt32();
                	}
                	break; 
                	case 0x80008:
                	{
						ins.SceneTag = (TaskSceneTag)reader.ReadInt32();
                	}
                	break; 
                	case 0x60009:
                	{
						ins.VideoName = reader.ReadString();
                	}
                	break; 
                	case 0x7000a:
                	{
						ins.IsDisplay = reader.ReadBool();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.TaskExperience = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<CdkDefine> CdkDefineDeserializeHandler = new tabtoy.DeserializeHandler<CdkDefine>(Deserialize);
		public static void Deserialize( CdkDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.CdkCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.CdkAward.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x20003:
                	{
						ins.FinishTime = reader.ReadInt64();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<PlayerInitDefine> PlayerInitDefineDeserializeHandler = new tabtoy.DeserializeHandler<PlayerInitDefine>(Deserialize);
		public static void Deserialize( PlayerInitDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Num = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<FavorableValueDefine> FavorableValueDefineDeserializeHandler = new tabtoy.DeserializeHandler<FavorableValueDefine>(Deserialize);
		public static void Deserialize( FavorableValueDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.DialogueId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.FavorableValue = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.HeroId = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<OpenFunctionDefine> OpenFunctionDefineDeserializeHandler = new tabtoy.DeserializeHandler<OpenFunctionDefine>(Deserialize);
		public static void Deserialize( OpenFunctionDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.FunctionID = reader.ReadInt32();
                	}
                	break; 
                	case 0x70001:
                	{
						ins.IsInDevelopment = reader.ReadBool();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.OpenLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x70003:
                	{
						ins.IsOpenPanel = reader.ReadBool();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.FunctionName = reader.ReadInt32();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.FunctionIcon = reader.ReadString();
                	}
                	break; 
                	case 0x70006:
                	{
						ins.IsOpenTips = reader.ReadBool();
                	}
                	break; 
                	case 0x60007:
                	{
						ins.TipsNeedLocationUI = reader.ReadString();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.TipsNeedLastFuncID = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<PackageDefine> PackageDefineDeserializeHandler = new tabtoy.DeserializeHandler<PackageDefine>(Deserialize);
		public static void Deserialize( PackageDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.PackageName = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.AcceptThePrize.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Description = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.BoxID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.BoxUnlockTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.BoxSpeedUpTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x90008:
                	{
						ins.UseGoodsNum.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x90009:
                	{
						ins.BoxAward.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x9000a:
                	{
						ins.PackageContent.Add( reader.ReadStruct<ProbabilityReward>(ProbabilityRewardDeserializeHandler) );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<StoreDefine> StoreDefineDeserializeHandler = new tabtoy.DeserializeHandler<StoreDefine>(Deserialize);
		public static void Deserialize( StoreDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ShopId = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.MallType = (ShopItemType)reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.GoodId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.GoodNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.DailyPurchaseNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.PurchaseNumLimit = reader.ReadInt32();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.OriginalPrice.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.DiamondPrice.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x90008:
                	{
						ins.PromotionPrice.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x90009:
                	{
						ins.PromotionDiamondPrice.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x2000a:
                	{
						ins.PromotionTimeBegin = reader.ReadInt64();
                	}
                	break; 
                	case 0x2000b:
                	{
						ins.PromotionTimeEnd = reader.ReadInt64();
                	}
                	break; 
                	case 0x2000c:
                	{
						ins.UpNewTimeBegin = reader.ReadInt64();
                	}
                	break; 
                	case 0x2000d:
                	{
						ins.UpNewTimeEnd = reader.ReadInt64();
                	}
                	break; 
                	case 0x7000e:
                	{
						ins.IsDisplay = reader.ReadBool();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ServerErrorCodeDefine> ServerErrorCodeDefineDeserializeHandler = new tabtoy.DeserializeHandler<ServerErrorCodeDefine>(Deserialize);
		public static void Deserialize( ServerErrorCodeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.errorCode = (WebErrorCode)reader.ReadInt32();
                	}
                	break; 
                	case 0x70002:
                	{
						ins.isShowTips = reader.ReadBool();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.SimplifiedChinese = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.TraditionalChinese = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.English = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<LocalizeDefine> LocalizeDefineDeserializeHandler = new tabtoy.DeserializeHandler<LocalizeDefine>(Deserialize);
		public static void Deserialize( LocalizeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.SimplifiedChinese = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.TraditionalChinese = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.English = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HallRoleDefine> HallRoleDefineDeserializeHandler = new tabtoy.DeserializeHandler<HallRoleDefine>(Deserialize);
		public static void Deserialize( HallRoleDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x70003:
                	{
						ins.IsHallRole = reader.ReadBool();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.UnlockLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.ShopId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.DefFashionID.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x70007:
                	{
						ins.isImpulseRole = reader.ReadBool();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.HeadPortraitImage = reader.ReadString();
                	}
                	break; 
                	case 0x60009:
                	{
						ins.SetPainting = reader.ReadString();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.UnlockChapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.Prefab = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<AreaUnlockDefine> AreaUnlockDefineDeserializeHandler = new tabtoy.DeserializeHandler<AreaUnlockDefine>(Deserialize);
		public static void Deserialize( AreaUnlockDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Grade = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Time = reader.ReadInt32();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.ConsumptionGood.Add( reader.ReadStruct<DealClass>(DealClassDeserializeHandler) );
                	}
                	break; 
                	case 0x10004:
                	{
						ins.SpeedTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.GoodsSpeedTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.UseGoods.Add( reader.ReadStruct<DealClass>(DealClassDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.UnLockRewards.Add( reader.ReadStruct<DealClass>(DealClassDeserializeHandler) );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ZillionaireEventDefine> ZillionaireEventDefineDeserializeHandler = new tabtoy.DeserializeHandler<ZillionaireEventDefine>(Deserialize);
		public static void Deserialize( ZillionaireEventDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Effect = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.EventNameID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.IconName = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ZillionaireMapDataDefine> ZillionaireMapDataDefineDeserializeHandler = new tabtoy.DeserializeHandler<ZillionaireMapDataDefine>(Deserialize);
		public static void Deserialize( ZillionaireMapDataDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.MapName = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.MapNameID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.UnlockLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.Prefab = reader.ReadString();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.MapGridMax.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10007:
                	{
						ins.MapBuy = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.EventBasic = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.EventAdded = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.BasicPower = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.PowerBuyTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.PowerBuyID = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.LastStepRate = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.EventNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.EventLast = reader.ReadInt32();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.RewardPreviewItems.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ZillionaireMapServerAwardDefine> ZillionaireMapServerAwardDefineDeserializeHandler = new tabtoy.DeserializeHandler<ZillionaireMapServerAwardDefine>(Deserialize);
		public static void Deserialize( ZillionaireMapServerAwardDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.GainExpTravel = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.SeedAward.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ZillionaireLatticeDataDefine> ZillionaireLatticeDataDefineDeserializeHandler = new tabtoy.DeserializeHandler<ZillionaireLatticeDataDefine>(Deserialize);
		public static void Deserialize( ZillionaireLatticeDataDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Describe = reader.ReadInt32();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.BasicReward = reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler);
                	}
                	break; 
                	case 0x10004:
                	{
						ins.EventFirst = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.EventSecond = reader.ReadInt32();
                	}
                	break; 
                	case 0x70006:
                	{
						ins.IsEvent = reader.ReadBool();
                	}
                	break; 
                	case 0x70007:
                	{
						ins.IsGenerate = reader.ReadBool();
                	}
                	break; 
                	case 0x70008:
                	{
						ins.IsTrigger = reader.ReadBool();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ZillionaireRoleDefine> ZillionaireRoleDefineDeserializeHandler = new tabtoy.DeserializeHandler<ZillionaireRoleDefine>(Deserialize);
		public static void Deserialize( ZillionaireRoleDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.RoleBuy = reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler);
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Prefab = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x70005:
                	{
						ins.Unlock = reader.ReadBool();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<PeerData> PeerDataDeserializeHandler = new tabtoy.DeserializeHandler<PeerData>(Deserialize);
		public static void Deserialize( PeerData ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Type = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<VerticalDefine> VerticalDefineDeserializeHandler = new tabtoy.DeserializeHandler<VerticalDefine>(Deserialize);
		public static void Deserialize( VerticalDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x70000:
                	{
						ins.IsiosRelease = reader.ReadBool();
                	}
                	break; 
                	case 0x70001:
                	{
						ins.IsAndoridRelease = reader.ReadBool();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Friend_FriendAmountLimit = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.RefreshFriendListTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.SpecialUid = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.ExpId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.GoldGoodsId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.JewelGoodsId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.HeartBeatTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.ReconnectDelayTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.ReconnectTimer = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.ResettodayBuyTime.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.MailDisableDayNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.AdvertisingInterval = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.PurpleGoldsId = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.CurVersionsChapterMaxCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.ChapterStringNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10011:
                	{
						ins.CurVersionsOADMaxCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x10012:
                	{
						ins.WarehouseTotal = reader.ReadInt32();
                	}
                	break; 
                	case 0x10013:
                	{
						ins.WarehouseDefault = reader.ReadInt32();
                	}
                	break; 
                	case 0x90014:
                	{
						ins.UserExtendBag = reader.ReadStruct<ExtendBagIDCount>(ExtendBagIDCountDeserializeHandler);
                	}
                	break; 
                	case 0x50015:
                	{
						ins.ManorModelSpeed = reader.ReadFloat();
                	}
                	break; 
                	case 0x10016:
                	{
						ins.ManorQuickTileCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x50017:
                	{
						ins.ManorModelAngleForwardAndBack = reader.ReadFloat();
                	}
                	break; 
                	case 0x10018:
                	{
						ins.ManorRoleBubbleRandom.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10019:
                	{
						ins.ManorTimeShowBubble = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001a:
                	{
						ins.ManorTimePlayAnimTimeInterval = reader.ReadInt32();
                	}
                	break; 
                	case 0x5001b:
                	{
						ins.StolenRate = reader.ReadFloat();
                	}
                	break; 
                	case 0x1001c:
                	{
						ins.MinStolen = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001d:
                	{
						ins.MaxStolen = reader.ReadInt32();
                	}
                	break; 
                	case 0x9001e:
                	{
						ins.Fertilizers.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x1001f:
                	{
						ins.StageRelation.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10020:
                	{
						ins.CropSpeedCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x10021:
                	{
						ins.CropSpeedMultiple.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10022:
                	{
						ins.ManorLogsNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x10023:
                	{
						ins.ResetrMarmotTime.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10024:
                	{
						ins.ManorMarmotRefresh = reader.ReadInt32();
                	}
                	break; 
                	case 0x10025:
                	{
						ins.ManorMarmotCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x50026:
                	{
						ins.ManorSelfMouseRate = reader.ReadFloat();
                	}
                	break; 
                	case 0x50027:
                	{
						ins.ManorFriendMouseRate = reader.ReadFloat();
                	}
                	break; 
                	case 0x90028:
                	{
						ins.ManorAward.Add( reader.ReadStruct<GoodAward>(GoodAwardDeserializeHandler) );
                	}
                	break; 
                	case 0x10029:
                	{
						ins.ManorlDiglettAwardMul = reader.ReadInt32();
                	}
                	break; 
                	case 0x1002a:
                	{
						ins.ResetZillionaireCount.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1002b:
                	{
						ins.DayZillionaireCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x1002c:
                	{
						ins.AdmissionGoodsId = reader.ReadInt32();
                	}
                	break; 
                	case 0x1002d:
                	{
						ins.PhysicalPower = reader.ReadInt32();
                	}
                	break; 
                	case 0x1002e:
                	{
						ins.LowDice.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1002f:
                	{
						ins.HighDice.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10030:
                	{
						ins.PureDice.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10031:
                	{
						ins.LowDicePhysicalPower = reader.ReadInt32();
                	}
                	break; 
                	case 0x10032:
                	{
						ins.HighDicePhysicalPower = reader.ReadInt32();
                	}
                	break; 
                	case 0x10033:
                	{
						ins.PureDicePhysicalPower = reader.ReadInt32();
                	}
                	break; 
                	case 0x50034:
                	{
						ins.ZillionaireBasicVariable = reader.ReadFloat();
                	}
                	break; 
                	case 0x10035:
                	{
						ins.RichManLuckyCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x10036:
                	{
						ins.ZillionairePropPackageID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10037:
                	{
						ins.SoireeGrade = reader.ReadInt32();
                	}
                	break; 
                	case 0x10038:
                	{
						ins.SoireeStartTime.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10039:
                	{
						ins.SoireeEndTime.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1003a:
                	{
						ins.SoireeResidueTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x1003b:
                	{
						ins.SoireeRoomLimit = reader.ReadInt32();
                	}
                	break; 
                	case 0x1003c:
                	{
						ins.SoireeDefaultRoom = reader.ReadInt32();
                	}
                	break; 
                	case 0x1003d:
                	{
						ins.SoireeBetTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x1003e:
                	{
						ins.SoireeExperience = reader.ReadInt32();
                	}
                	break; 
                	case 0x1003f:
                	{
						ins.SoireeTotalDistance = reader.ReadInt32();
                	}
                	break; 
                	case 0x10040:
                	{
						ins.SoireeTortoiseSpeed = reader.ReadInt32();
                	}
                	break; 
                	case 0x10041:
                	{
						ins.SoireeTouchEvent = reader.ReadInt32();
                	}
                	break; 
                	case 0x10042:
                	{
						ins.SoireeGameTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x10043:
                	{
						ins.IntegralGoodsMallTpye = reader.ReadInt32();
                	}
                	break; 
                	case 0x10044:
                	{
						ins.SignInRenewalTime.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x90045:
                	{
						ins.SignInAward.Add( reader.ReadStruct<GoodAward>(GoodAwardDeserializeHandler) );
                	}
                	break; 
                	case 0x90046:
                	{
						ins.LoginGetFavorableValue = reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler);
                	}
                	break; 
                	case 0x10047:
                	{
						ins.GetFavorableTimeMorning.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10048:
                	{
						ins.GetFavorableTimeAfternoon.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10049:
                	{
						ins.GetFavorableTimeEvening.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1004a:
                	{
						ins.GetLoginFavorableAdvertMul = reader.ReadInt32();
                	}
                	break; 
                	case 0x1004b:
                	{
						ins.ChatMessageLength = reader.ReadInt32();
                	}
                	break; 
                	case 0x1004c:
                	{
						ins.WorldChatDataNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x1004d:
                	{
						ins.ChatSendCD = reader.ReadInt32();
                	}
                	break; 
                	case 0x1004e:
                	{
						ins.ChatMessageInterval = reader.ReadInt32();
                	}
                	break; 
                	case 0x1004f:
                	{
						ins.ChatPrivateRoleMaxNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10050:
                	{
						ins.PrivateChatDataNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10051:
                	{
						ins.DailyUpdateTaskTime.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10052:
                	{
						ins.PublicRefreshTime.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10053:
                	{
						ins.DealCreatNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x10054:
                	{
						ins.HighDealAwardNum = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ManorCropDefine> ManorCropDefineDeserializeHandler = new tabtoy.DeserializeHandler<ManorCropDefine>(Deserialize);
		public static void Deserialize( ManorCropDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.CropId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.GerminationPeriod = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.GrowUp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.AdultnessTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.IdSeed = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.IdGainGameItem = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.ResultsNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.OrderPrice = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.GainExperience = reader.ReadInt32();
                	}
                	break; 
                	case 0x60009:
                	{
						ins.Model = reader.ReadString();
                	}
                	break; 
                	case 0x8000a:
                	{
						ins.CropType = (CropType)reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.Grade = reader.ReadInt32();
                	}
                	break; 
                	case 0x8000c:
                	{
						ins.Rarity = (TypeRarity)reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ManorRegionWordsDefine> ManorRegionWordsDefineDeserializeHandler = new tabtoy.DeserializeHandler<ManorRegionWordsDefine>(Deserialize);
		public static void Deserialize( ManorRegionWordsDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.DialogId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Pos = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.RegionWords = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.HalfPhoto = reader.ReadString();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.NextDialogId = reader.ReadInt32();
                	}
                	break; 
                	case 0x70006:
                	{
						ins.isEnd = reader.ReadBool();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ManorRegionDialogDefine> ManorRegionDialogDefineDeserializeHandler = new tabtoy.DeserializeHandler<ManorRegionDialogDefine>(Deserialize);
		public static void Deserialize( ManorRegionDialogDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.DialogId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.regionId = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.notes = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.BeginDialogId = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GuideLittleStepDefine> GuideLittleStepDefineDeserializeHandler = new tabtoy.DeserializeHandler<GuideLittleStepDefine>(Deserialize);
		public static void Deserialize( GuideLittleStepDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Id = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.notes = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.TriggerConditions.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x70003:
                	{
						ins.isPanelAnim = reader.ReadBool();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.PrefabPanelAnim = reader.ReadString();
                	}
                	break; 
                	case 0x70005:
                	{
						ins.isRightFinger = reader.ReadBool();
                	}
                	break; 
                	case 0x70006:
                	{
						ins.is3dCamera = reader.ReadBool();
                	}
                	break; 
                	case 0x60007:
                	{
						ins.SubPath = reader.ReadString();
                	}
                	break; 
                	case 0x90008:
                	{
						ins.offset = reader.ReadStruct<Vec2>(Vec2DeserializeHandler);
                	}
                	break; 
                	case 0x50009:
                	{
						ins.scaleHoleX = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000a:
                	{
						ins.scaleHoleY = reader.ReadFloat();
                	}
                	break; 
                	case 0x7000b:
                	{
						ins.IsFinish = reader.ReadBool();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GuideTriggerConditionDefine> GuideTriggerConditionDefineDeserializeHandler = new tabtoy.DeserializeHandler<GuideTriggerConditionDefine>(Deserialize);
		public static void Deserialize( GuideTriggerConditionDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Id = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.notes = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.LittleStepId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.LevelReach = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.FruitHave = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.FruitTotalGain = reader.ReadInt32();
                	}
                	break; 
                	case 0x70006:
                	{
						ins.isCompelete = reader.ReadBool();
                	}
                	break; 
                	case 0x70007:
                	{
						ins.isFinish = reader.ReadBool();
                	}
                	break; 
                	case 0x70008:
                	{
						ins.isMet = reader.ReadBool();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ImpulseTextDefine> ImpulseTextDefineDeserializeHandler = new tabtoy.DeserializeHandler<ImpulseTextDefine>(Deserialize);
		public static void Deserialize( ImpulseTextDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ImpulseTextId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.HeroId = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.SimplifiedChinese = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.TraditionalChinese = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.English = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ImpulseGiftDefine> ImpulseGiftDefineDeserializeHandler = new tabtoy.DeserializeHandler<ImpulseGiftDefine>(Deserialize);
		public static void Deserialize( ImpulseGiftDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.NPCAddFavorableValue = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.PlayerAddFavorableValue = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<DataAnalyticsDefine> DataAnalyticsDefineDeserializeHandler = new tabtoy.DeserializeHandler<DataAnalyticsDefine>(Deserialize);
		public static void Deserialize( DataAnalyticsDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Id = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.EventMainId = (DotEventMainId)reader.ReadInt32();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.EventSubId = (DotEventId)reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.EventName = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GuessingDefine> GuessingDefineDeserializeHandler = new tabtoy.DeserializeHandler<GuessingDefine>(Deserialize);
		public static void Deserialize( GuessingDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ContinueTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.AddSpeed = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Invalid.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x60004:
                	{
						ins.IconName = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.PrefabName = reader.ReadString();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<CostumeDefine> CostumeDefineDeserializeHandler = new tabtoy.DeserializeHandler<CostumeDefine>(Deserialize);
		public static void Deserialize( CostumeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.CostumeId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.RoleId = reader.ReadInt32();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.Type = (CostumeType)reader.ReadInt32();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.ConflictTypes.Add( reader.ReadEnum<CostumeType>() );
                	}
                	break; 
                	case 0x90004:
                	{
						ins.UseTexture.Add( reader.ReadStruct<CostumeTextureInfo>(CostumeTextureInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x60005:
                	{
						ins.ShowParts.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x60006:
                	{
						ins.HideParts.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x60007:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.MultilingualNameID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.MultilingualDescID = reader.ReadInt32();
                	}
                	break; 
                	case 0x8000a:
                	{
						ins.Access.Add( reader.ReadEnum<ItemAccessType>() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<PlayerAvatarDefine> PlayerAvatarDefineDeserializeHandler = new tabtoy.DeserializeHandler<PlayerAvatarDefine>(Deserialize);
		public static void Deserialize( PlayerAvatarDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x70004:
                	{
						ins.IsDefUnlock = reader.ReadBool();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<PlayerGradeDefine> PlayerGradeDefineDeserializeHandler = new tabtoy.DeserializeHandler<PlayerGradeDefine>(Deserialize);
		public static void Deserialize( PlayerGradeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Grade = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Upgrade = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.TotalExperience = reader.ReadInt32();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.UpgradeAwards.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x10004:
                	{
						ins.WarehouseCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.SoireeExperience = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.DealUsedNum = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ExtraStoryDefine> ExtraStoryDefineDeserializeHandler = new tabtoy.DeserializeHandler<ExtraStoryDefine>(Deserialize);
		public static void Deserialize( ExtraStoryDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ExtraStoryId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ExtraStoryName = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.Price.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x10003:
                	{
						ins.AdvertisingNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.picture = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.PassChapterID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.PrefabName = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<OADDialogueTextDefine> OADDialogueTextDefineDeserializeHandler = new tabtoy.DeserializeHandler<OADDialogueTextDefine>(Deserialize);
		public static void Deserialize( OADDialogueTextDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.NextDialogId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.StringNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.SimplifiedChinese = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.TraditionalChinese = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.English = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<SectionDefine> SectionDefineDeserializeHandler = new tabtoy.DeserializeHandler<SectionDefine>(Deserialize);
		public static void Deserialize( SectionDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.SectionId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.SectionNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.SectionNameId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.SectionGrade = reader.ReadInt32();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.UnlockPrice.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x10005:
                	{
						ins.NextSectionId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.SectionTitle.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x60007:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ChapterFunctionTextDefine> ChapterFunctionTextDefineDeserializeHandler = new tabtoy.DeserializeHandler<ChapterFunctionTextDefine>(Deserialize);
		public static void Deserialize( ChapterFunctionTextDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.IconImage = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.StringNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.SimplifiedChinese = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.TraditionalChinese = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.English = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ChapterDialogueTextDefine> ChapterDialogueTextDefineDeserializeHandler = new tabtoy.DeserializeHandler<ChapterDialogueTextDefine>(Deserialize);
		public static void Deserialize( ChapterDialogueTextDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.NextDialogId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.DialogIdList.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x70003:
                	{
						ins.IsImage = reader.ReadBool();
                	}
                	break; 
                	case 0x70004:
                	{
						ins.IsClick = reader.ReadBool();
                	}
                	break; 
                	case 0x80005:
                	{
						ins.BoxType = (DialogueType)reader.ReadInt32();
                	}
                	break; 
                	case 0x70006:
                	{
						ins.BoxAdditional = reader.ReadBool();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.NameID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.RoleIcon = reader.ReadString();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.StringNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.SimplifiedChinese = reader.ReadString();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.TraditionalChinese = reader.ReadString();
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.English = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<SignInDefine> SignInDefineDeserializeHandler = new tabtoy.DeserializeHandler<SignInDefine>(Deserialize);
		public static void Deserialize( SignInDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.PhaseID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.PhaseAwardId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.PhaseAwardNum = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<DecorateDefine> DecorateDefineDeserializeHandler = new tabtoy.DeserializeHandler<DecorateDefine>(Deserialize);
		public static void Deserialize( DecorateDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.DecorateId = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.DecorateType = (TypeManorDecorate)reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.notes = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.idGameItem = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Model.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x50005:
                	{
						ins.disArrowToPivot = reader.ReadFloat();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.DecorateIcon.Add( reader.ReadString() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<DecorativeFlowerGameDefine> DecorativeFlowerGameDefineDeserializeHandler = new tabtoy.DeserializeHandler<DecorativeFlowerGameDefine>(Deserialize);
		public static void Deserialize( DecorativeFlowerGameDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ItemId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ItemType = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.ItemNotes = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.ItemBelongTo = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.idGameItem = reader.ReadInt32();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<DealDefine> DealDefineDeserializeHandler = new tabtoy.DeserializeHandler<DealDefine>(Deserialize);
		public static void Deserialize( DealDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.DealLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.NeedsBasicValue = reader.ReadFloat();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.DealUpNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.RefreshDealUseGoods = reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler);
                	}
                	break; 
                	case 0x10004:
                	{
						ins.DealCDTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.DealMaxCropTypeNum = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<DealRoleDefine> DealRoleDefineDeserializeHandler = new tabtoy.DeserializeHandler<DealRoleDefine>(Deserialize);
		public static void Deserialize( DealRoleDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.DealRoleID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.UnlockChapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.Demands.Add( reader.ReadStruct<DealDemand>(DealDemandDeserializeHandler) );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GameItemDefine> GameItemDefineDeserializeHandler = new tabtoy.DeserializeHandler<GameItemDefine>(Deserialize);
		public static void Deserialize( GameItemDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ItemName = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.ItemType = (TypeGameItem)reader.ReadInt32();
                	}
                	break; 
                	case 0x80004:
                	{
						ins.KnapsackType = (KnapsackType)reader.ReadInt32();
                	}
                	break; 
                	case 0x80005:
                	{
						ins.Rarity = (TypeRarity)reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Grade = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Description = reader.ReadInt32();
                	}
                	break; 
                	case 0x90008:
                	{
						ins.PriceSell.Add( reader.ReadStruct<DealClass>(DealClassDeserializeHandler) );
                	}
                	break; 
                	case 0x80009:
                	{
						ins.Use = (GoodsUseType)reader.ReadInt32();
                	}
                	break; 
                	case 0x7000a:
                	{
						ins.IsSendNote = reader.ReadBool();
                	}
                	break; 
                	case 0x7000b:
                	{
						ins.IsDisable = reader.ReadBool();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<MailDefine> MailDefineDeserializeHandler = new tabtoy.DeserializeHandler<MailDefine>(Deserialize);
		public static void Deserialize( MailDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.MailId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Title = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Subtitle = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Message = reader.ReadInt32();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.MailAward.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x20005:
                	{
						ins.MailStartTime = reader.ReadInt64();
                	}
                	break; 
                	case 0x20006:
                	{
						ins.MailEndTime = reader.ReadInt64();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GoldJewelBuyDefine> GoldJewelBuyDefineDeserializeHandler = new tabtoy.DeserializeHandler<GoldJewelBuyDefine>(Deserialize);
		public static void Deserialize( GoldJewelBuyDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.LevelId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.GoodsId = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.GoodsNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.GoodsPrice.Add( reader.ReadStruct<GoodIDCount>(GoodIDCountDeserializeHandler) );
                	}
                	break; 
                	case 0x10004:
                	{
						ins.FirstPrice = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.OriginalPrice = reader.ReadInt32();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<RandomNameDefine> RandomNameDefineDeserializeHandler = new tabtoy.DeserializeHandler<RandomNameDefine>(Deserialize);
		public static void Deserialize( RandomNameDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.FirstName = reader.ReadString();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.SecondName = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		#endregion
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class ProbabilityReward
	{
	
		
		/// <summary> 
		/// 奖励ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 奖励类型
		/// </summary>
		public TypeGameItem Type = TypeGameItem.None; 
		
		/// <summary> 
		/// 奖励数量
		/// </summary>
		public int Count = 0; 
		
		/// <summary> 
		/// 奖励权重
		/// </summary>
		public int Weights = 0; 
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class GoodIDCount
	{
	
		
		
		public int ID = 0; // 道具ID
		
		
		public long Count = 0; // 获得数量
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class WarehouseType
	{
	
		
		
		public int Type = 0; // 仓库类型
		
		
		public string ConfigFileName = ""; // 仓库类型配置文件名
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class DealClass
	{
	
		
		/// <summary> 
		/// 交易Id
		/// </summary>
		public int IdGameItem = 0; // id
		
		/// <summary> 
		/// 交易价格
		/// </summary>
		public int Price = 0; // price
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class GoldGoodsId
	{
	
		
		
		public int GoodsID = 0; // 金币道具id
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class JewelGoodsId
	{
	
		
		
		public int GoodsID = 0; // 钻石道具id
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class GoodAward
	{
	
		
		/// <summary> 
		/// 奖励ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 奖励数量
		/// </summary>
		public int Count = 0; 
		
		/// <summary> 
		/// 奖励权重
		/// </summary>
		public int Weights = 0; 
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class MapEventGrid
	{
	
		
		/// <summary> 
		/// 道具ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 道具生成数
		/// </summary>
		public int Produce = 0; 
		
		/// <summary> 
		/// 道具数量
		/// </summary>
		public int Count = 0; 
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class BoxIdKeysTime
	{
	
		
		
		public int BoxID = 0; // 包裹id
		
		
		public int KeyID = 0; // 钥匙id
		
		
		public int KeyNum = 0; // 消耗钥匙数量
		
		
		public long Time = 0; // 解锁时间
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class ExtendBagIDCount
	{
	
		
		
		public int GoodsID = 0; // 扩展包id
		
		
		public int Count = 0; // 扩展数
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class PackageIDWeights
	{
	
		
		
		public int PackageID = 0; // 包裹id
		
		
		public int Weights = 0; // 包裹获取权重
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class Vec2
	{
	
		
		
		public float X = 0f; // x
		
		
		public float Y = 0f; // y
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class DealDemand
	{
	
		
		/// <summary> 
		/// 订单需求描述（国际化表）
		/// </summary>
		public int DescID = 0; 
		
		/// <summary> 
		/// 订单需求等级/稀有度（None表示没有关系）
		/// </summary>
		public TypeRarity Level = TypeRarity.None; 
		
		/// <summary> 
		/// 订单需求类型（None表示需要水果和花卉）
		/// </summary>
		public CropType Type = CropType.None; 
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class CostumeTextureInfo
	{
	
		
		/// <summary> 
		/// 服饰部位默认贴图名称
		/// </summary>
		public string DefTextureName = ""; 
		
		/// <summary> 
		/// 服饰使用的贴图名称
		/// </summary>
		public string UseTextureName = ""; 
	
	

	} 

	// Defined in table: Task
	[System.Serializable]
	public partial class TaskDefine
	{
	
		
		/// <summary> 
		/// 任务ID
		/// </summary>
		public int TaskID = 0; 
		
		/// <summary> 
		/// 任务类型
		/// </summary>
		public TaskType TaskType = TaskType.None; 
		
		/// <summary> 
		/// 是否是特殊步骤
		/// </summary>
		public bool IsSpecialStep = false; 
		
		/// <summary> 
		/// 任务等级
		/// </summary>
		public int TaskGrade = 0; 
		
		/// <summary> 
		/// 完成需要次数
		/// </summary>
		public int FinishNum = 0; 
		
		/// <summary> 
		/// 任务奖励
		/// </summary>
		public List<GoodIDCount> TaskAward = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 任务名称
		/// </summary>
		public int TaskName = 0; 
		
		/// <summary> 
		/// 任务描述
		/// </summary>
		public int TaskDetails = 0; 
		
		/// <summary> 
		/// 任务跳转的场景
		/// </summary>
		public TaskSceneTag SceneTag = TaskSceneTag.None; 
		
		/// <summary> 
		/// 新手任务需要播放的引导视频的资源名
		/// </summary>
		public string VideoName = ""; 
		
		/// <summary> 
		/// 是否显示
		/// </summary>
		public bool IsDisplay = true; 
		
		/// <summary> 
		/// 任务经验
		/// </summary>
		public int TaskExperience = 0; 
	
	

	} 

	// Defined in table: Cdk
	[System.Serializable]
	public partial class CdkDefine
	{
	
		
		/// <summary> 
		/// 兑换码类型
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 兑换次数
		/// </summary>
		public int CdkCount = 0; 
		
		
		public List<GoodIDCount> CdkAward = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 兑换结束时间
		/// </summary>
		public long FinishTime = 0; 
	
	

	} 

	// Defined in table: PlayerInit
	[System.Serializable]
	public partial class PlayerInitDefine
	{
	
		
		/// <summary> 
		/// 道具ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 数量
		/// </summary>
		public int Num = 0; 
	
	

	} 

	// Defined in table: FavorableValue
	[System.Serializable]
	public partial class FavorableValueDefine
	{
	
		
		/// <summary> 
		/// 剧情对话id
		/// </summary>
		public int DialogueId = 0; 
		
		/// <summary> 
		/// 好感值(NPC对玩家)
		/// </summary>
		public int FavorableValue = 0; 
		
		/// <summary> 
		/// 男主id
		/// </summary>
		public int HeroId = 0; 
	
	

	} 

	// Defined in table: OpenFunction
	[System.Serializable]
	public partial class OpenFunctionDefine
	{
	
		
		/// <summary> 
		/// 功能ID
		/// </summary>
		public int FunctionID = 0; 
		
		/// <summary> 
		/// 是否开发中
		/// </summary>
		public bool IsInDevelopment = false; 
		
		/// <summary> 
		/// 开放等级
		/// </summary>
		public int OpenLevel = 0; 
		
		/// <summary> 
		/// 是否打开面板
		/// </summary>
		public bool IsOpenPanel = false; 
		
		/// <summary> 
		/// 功能名称国际化表id
		/// </summary>
		public int FunctionName = 0; 
		
		/// <summary> 
		/// 功能icon
		/// </summary>
		public string FunctionIcon = ""; 
		
		/// <summary> 
		/// 是否开启提示
		/// </summary>
		public bool IsOpenTips = false; 
		
		/// <summary> 
		/// 提示需要所在界面
		/// </summary>
		public string TipsNeedLocationUI = ""; 
		
		/// <summary> 
		/// 提示需要完成功能id
		/// </summary>
		public int TipsNeedLastFuncID = 0; 
	
	

	} 

	// Defined in table: Package
	[System.Serializable]
	public partial class PackageDefine
	{
	
		
		/// <summary> 
		/// 道具ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 类型
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string PackageName = ""; 
		
		/// <summary> 
		/// 领取界面宝箱icon 关闭和打开状态icon
		/// </summary>
		public List<string> AcceptThePrize = new List<string>(); 
		
		/// <summary> 
		/// 物品描述（对应多语言表）
		/// </summary>
		public int Description = 0; 
		
		/// <summary> 
		/// 宝箱ID：对应道具表
		/// </summary>
		public int BoxID = 0; 
		
		/// <summary> 
		/// 宝箱解锁时间(秒)
		/// </summary>
		public int BoxUnlockTime = 0; 
		
		/// <summary> 
		/// 宝箱加速时间(秒)
		/// </summary>
		public int BoxSpeedUpTime = 0; 
		
		/// <summary> 
		/// 消耗道具
		/// </summary>
		public List<GoodIDCount> UseGoodsNum = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 宝箱固定奖励（空表示没有固定奖励）
		/// </summary>
		public List<GoodIDCount> BoxAward = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 包裹内容
		/// </summary>
		public List<ProbabilityReward> PackageContent = new List<ProbabilityReward>(); 
	
	

	} 

	// Defined in table: Store
	[System.Serializable]
	public partial class StoreDefine
	{
	
		
		/// <summary> 
		/// 商店id
		/// </summary>
		public int ShopId = 0; 
		
		/// <summary> 
		/// 商店类型
		/// </summary>
		public ShopItemType MallType = ShopItemType.None; 
		
		/// <summary> 
		/// 对应物品id
		/// </summary>
		public int GoodId = 0; 
		
		/// <summary> 
		/// 对应物品数量
		/// </summary>
		public int GoodNum = 0; 
		
		/// <summary> 
		/// 每日限购数量
		/// </summary>
		public int DailyPurchaseNum = 0; 
		
		/// <summary> 
		/// 永久限购数量
		/// </summary>
		public int PurchaseNumLimit = 0; 
		
		/// <summary> 
		/// 原价1(没有表示免费)
		/// </summary>
		public List<GoodIDCount> OriginalPrice = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 原价2(没有表示免费)
		/// </summary>
		public List<GoodIDCount> DiamondPrice = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 促销价
		/// </summary>
		public List<GoodIDCount> PromotionPrice = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 促销价2
		/// </summary>
		public List<GoodIDCount> PromotionDiamondPrice = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 促销开始时间
		/// </summary>
		public long PromotionTimeBegin = 0; 
		
		/// <summary> 
		/// 促销结束时间
		/// </summary>
		public long PromotionTimeEnd = 0; 
		
		/// <summary> 
		/// 上新开始时间
		/// </summary>
		public long UpNewTimeBegin = 0; 
		
		/// <summary> 
		/// 上新结束时间
		/// </summary>
		public long UpNewTimeEnd = 0; 
		
		/// <summary> 
		/// 是否显示
		/// </summary>
		public bool IsDisplay = false; 
	
	

	} 

	// Defined in table: ServerErrorCode
	[System.Serializable]
	public partial class ServerErrorCodeDefine
	{
	
		
		/// <summary> 
		/// 字段ID
		/// </summary>
		public int ID = 0; 
		
		
		public WebErrorCode errorCode = WebErrorCode.None; 
		
		
		public bool isShowTips = false; 
		
		/// <summary> 
		/// 简体中文
		/// </summary>
		public string SimplifiedChinese = ""; 
		
		/// <summary> 
		/// 繁体中文
		/// </summary>
		public string TraditionalChinese = ""; 
		
		/// <summary> 
		/// 英文
		/// </summary>
		public string English = ""; 
	
	

	} 

	// Defined in table: Localize
	[System.Serializable]
	public partial class LocalizeDefine
	{
	
		
		/// <summary> 
		/// 字段ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 简体中文
		/// </summary>
		public string SimplifiedChinese = ""; 
		
		/// <summary> 
		/// 繁体中文
		/// </summary>
		public string TraditionalChinese = ""; 
		
		/// <summary> 
		/// 英文
		/// </summary>
		public string English = ""; 
	
	

	} 

	// Defined in table: HallRole
	[System.Serializable]
	public partial class HallRoleDefine
	{
	
		
		/// <summary> 
		/// 角色ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 是否为大厅角色
		/// </summary>
		public bool IsHallRole = false; 
		
		/// <summary> 
		/// 解锁等级
		/// </summary>
		public int UnlockLevel = 0; 
		
		/// <summary> 
		/// 商店id
		/// </summary>
		public int ShopId = 0; 
		
		/// <summary> 
		/// 默认的时装id
		/// </summary>
		public List<int> DefFashionID = new List<int>(); 
		
		/// <summary> 
		/// 是否心动时刻角色
		/// </summary>
		public bool isImpulseRole = false; 
		
		/// <summary> 
		/// 心动时刻头像图片资源
		/// </summary>
		public string HeadPortraitImage = ""; 
		
		/// <summary> 
		/// 心动时刻男主立绘
		/// </summary>
		public string SetPainting = ""; 
		
		/// <summary> 
		/// 解锁章节id
		/// </summary>
		public int UnlockChapter = 0; 
		
		/// <summary> 
		/// 角色的prefab名称
		/// </summary>
		public string Prefab = ""; 
	
	

	} 

	// Defined in table: AreaUnlock
	[System.Serializable]
	public partial class AreaUnlockDefine
	{
	
		
		/// <summary> 
		/// 区域ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 解锁需求角色等级
		/// </summary>
		public int Grade = 0; 
		
		/// <summary> 
		/// 解锁时间(秒)
		/// </summary>
		public int Time = 0; 
		
		/// <summary> 
		/// 消耗道具
		/// </summary>
		public List<DealClass> ConsumptionGood = new List<DealClass>(); 
		
		/// <summary> 
		/// 广告加速时间(秒)
		/// </summary>
		public int SpeedTime = 0; 
		
		/// <summary> 
		/// 道具加速时间(秒)
		/// </summary>
		public int GoodsSpeedTime = 0; 
		
		/// <summary> 
		/// 道具加速消耗道具
		/// </summary>
		public List<DealClass> UseGoods = new List<DealClass>(); 
		
		/// <summary> 
		/// 点击工棚后送的奖励
		/// </summary>
		public List<DealClass> UnLockRewards = new List<DealClass>(); 
	
	

	} 

	// Defined in table: ZillionaireEvent
	[System.Serializable]
	public partial class ZillionaireEventDefine
	{
	
		
		/// <summary> 
		/// 状态ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 效果
		/// </summary>
		public int Effect = 0; 
		
		/// <summary> 
		/// 事件名称国际化id
		/// </summary>
		public int EventNameID = 0; 
		
		/// <summary> 
		/// 状态图标名称
		/// </summary>
		public string IconName = ""; 
	
	

	} 

	// Defined in table: ZillionaireMapData
	[System.Serializable]
	public partial class ZillionaireMapDataDefine
	{
	
		
		/// <summary> 
		/// 地图ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 地图名字
		/// </summary>
		public string MapName = ""; 
		
		/// <summary> 
		/// 地图名称id 国际语言
		/// </summary>
		public int MapNameID = 0; 
		
		/// <summary> 
		/// 解锁等级
		/// </summary>
		public int UnlockLevel = 0; 
		
		/// <summary> 
		/// 地图图标
		/// </summary>
		public string Image = ""; 
		
		/// <summary> 
		/// 预制体
		/// </summary>
		public string Prefab = ""; 
		
		/// <summary> 
		/// 最大格子数
		/// </summary>
		public List<int> MapGridMax = new List<int>(); 
		
		/// <summary> 
		/// 地图购买id
		/// </summary>
		public int MapBuy = 0; 
		
		/// <summary> 
		/// 事件基础概率%
		/// </summary>
		public int EventBasic = 0; 
		
		/// <summary> 
		/// 事件叠加概率%
		/// </summary>
		public int EventAdded = 0; 
		
		/// <summary> 
		/// 基础体力
		/// </summary>
		public int BasicPower = 0; 
		
		/// <summary> 
		/// 购买体力次数
		/// </summary>
		public int PowerBuyTime = 0; 
		
		/// <summary> 
		/// 体力购买商店id
		/// </summary>
		public int PowerBuyID = 0; 
		
		/// <summary> 
		/// 最后一步事件概率%
		/// </summary>
		public int LastStepRate = 0; 
		
		/// <summary> 
		/// 事件个数
		/// </summary>
		public int EventNumber = 0; 
		
		/// <summary> 
		/// 事件持续回合数
		/// </summary>
		public int EventLast = 0; 
		
		/// <summary> 
		/// 奖励预览物品ID
		/// </summary>
		public List<int> RewardPreviewItems = new List<int>(); 
	
	

	} 

	// Defined in table: ZillionaireMapServerAward
	[System.Serializable]
	public partial class ZillionaireMapServerAwardDefine
	{
	
		
		/// <summary> 
		/// 等级
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 单局游戏经验
		/// </summary>
		public int GainExpTravel = 0; 
		
		/// <summary> 
		/// 大富翁三选一奖励，奖励信息（只能有三个物品）
		/// </summary>
		public List<GoodIDCount> SeedAward = new List<GoodIDCount>(); 
	
	

	} 

	// Defined in table: ZillionaireLatticeData
	[System.Serializable]
	public partial class ZillionaireLatticeDataDefine
	{
	
		
		/// <summary> 
		/// 格子ID
		/// </summary>
		public int ID = 0; 
		
		
		public int Name = 0; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public int Describe = 0; 
		
		/// <summary> 
		/// 奖励信息
		/// </summary>
		public GoodIDCount BasicReward = new GoodIDCount(); 
		
		/// <summary> 
		/// 事件1(Id)
		/// </summary>
		public int EventFirst = 0; 
		
		/// <summary> 
		/// 事件2(Id)
		/// </summary>
		public int EventSecond = 0; 
		
		/// <summary> 
		/// 是否是事件
		/// </summary>
		public bool IsEvent = false; 
		
		/// <summary> 
		/// 是否可生成特殊事件
		/// </summary>
		public bool IsGenerate = false; 
		
		/// <summary> 
		/// 大满贯时是否可触发
		/// </summary>
		public bool IsTrigger = false; 
	
	

	} 

	// Defined in table: ZillionaireRole
	[System.Serializable]
	public partial class ZillionaireRoleDefine
	{
	
		
		/// <summary> 
		/// 角色ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 角色购买
		/// </summary>
		public GoodIDCount RoleBuy = new GoodIDCount(); 
		
		/// <summary> 
		/// 角色的prefab名称
		/// </summary>
		public string Prefab = ""; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 默认是否解锁
		/// </summary>
		public bool Unlock = false; 
	
	

	} 

	// Defined in table: Vertical
	[System.Serializable]
	public partial class PeerData
	{
	
		
		
		public string Name = ""; // 名字
		
		
		public string Type = ""; // 类型
	
	

	} 

	// Defined in table: Vertical
	[System.Serializable]
	public partial class VerticalDefine
	{
	
		
		/// <summary> 
		/// 是否时Ios正式服，用来更新测试服还是正式服
		/// </summary>
		public bool IsiosRelease = false; 
		
		/// <summary> 
		/// 是否时Android正式服，用来更新测试服还是正式服
		/// </summary>
		public bool IsAndoridRelease = false; 
		
		/// <summary> 
		/// 默认最大好友数量上限
		/// </summary>
		public int Friend_FriendAmountLimit = 0; 
		
		/// <summary> 
		/// 好友推荐刷新间隔时间(秒)
		/// </summary>
		public int RefreshFriendListTime = 0; 
		
		/// <summary> 
		/// 特殊账号uid（默认好友账号）
		/// </summary>
		public int SpecialUid = 0; 
		
		/// <summary> 
		/// 经验道具id
		/// </summary>
		public int ExpId = 0; 
		
		/// <summary> 
		/// 金币道具id
		/// </summary>
		public int GoldGoodsId = 0; 
		
		/// <summary> 
		/// 钻石道具id
		/// </summary>
		public int JewelGoodsId = 0; 
		
		/// <summary> 
		/// 心跳间隔时间(毫秒)
		/// </summary>
		public int HeartBeatTime = 0; 
		
		/// <summary> 
		/// 重连等待时间(毫秒)
		/// </summary>
		public int ReconnectDelayTime = 0; 
		
		/// <summary> 
		/// 重连次数
		/// </summary>
		public int ReconnectTimer = 0; 
		
		/// <summary> 
		/// 商店重置每日限购时间(时/分/秒)
		/// </summary>
		public List<int> ResettodayBuyTime = new List<int>(); 
		
		/// <summary> 
		/// 邮件过期天数
		/// </summary>
		public int MailDisableDayNum = 0; 
		
		/// <summary> 
		/// 广告时间间隔(秒)
		/// </summary>
		public int AdvertisingInterval = 0; 
		
		/// <summary> 
		/// 番外消耗货币道具id（星币）
		/// </summary>
		public int PurpleGoldsId = 0; 
		
		/// <summary> 
		/// 章节当前版本最大数量
		/// </summary>
		public int CurVersionsChapterMaxCount = 0; 
		
		/// <summary> 
		/// 章节文本每行字符最大字数
		/// </summary>
		public int ChapterStringNumber = 0; 
		
		/// <summary> 
		/// 番外当前版本最大数量（番外id）
		/// </summary>
		public int CurVersionsOADMaxCount = 0; 
		
		/// <summary> 
		/// 仓库总容量上限
		/// </summary>
		public int WarehouseTotal = 0; 
		
		/// <summary> 
		/// 仓库初始容量
		/// </summary>
		public int WarehouseDefault = 0; 
		
		/// <summary> 
		/// 仓库使用扩展包扩展容量数
		/// </summary>
		public ExtendBagIDCount UserExtendBag = new ExtendBagIDCount(); 
		
		/// <summary> 
		/// 庄园中女主移动速度
		/// </summary>
		public float ManorModelSpeed = 0f; 
		
		/// <summary> 
		/// 庄园中多少地块女主瞬移
		/// </summary>
		public int ManorQuickTileCount = 0; 
		
		/// <summary> 
		/// 庄园中女主播放前后动作的角度
		/// </summary>
		public float ManorModelAngleForwardAndBack = 0f; 
		
		/// <summary> 
		/// 庄园角色随机提示
		/// </summary>
		public List<int> ManorRoleBubbleRandom = new List<int>(); 
		
		/// <summary> 
		/// 庄园角色文本提示自动关闭时间
		/// </summary>
		public int ManorTimeShowBubble = 0; 
		
		/// <summary> 
		/// 庄园角色自动播放动画间隔(秒)
		/// </summary>
		public int ManorTimePlayAnimTimeInterval = 0; 
		
		/// <summary> 
		/// 庄园被偷取最大数量占比
		/// </summary>
		public float StolenRate = 0f; 
		
		/// <summary> 
		/// 庄园最少能偷数量
		/// </summary>
		public int MinStolen = 0; 
		
		/// <summary> 
		/// 庄园最多能偷数量
		/// </summary>
		public int MaxStolen = 0; 
		
		/// <summary> 
		/// 庄园化肥一袋减少时间(毫秒)
		/// </summary>
		public List<GoodIDCount> Fertilizers = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 庄园不同阶段对应不同的化肥
		/// </summary>
		public List<int> StageRelation = new List<int>(); 
		
		/// <summary> 
		/// 庄园每日看广告作物加速次数
		/// </summary>
		public int CropSpeedCount = 0; 
		
		/// <summary> 
		/// 庄园每日看广告作物加速倍数
		/// </summary>
		public List<int> CropSpeedMultiple = new List<int>(); 
		
		/// <summary> 
		/// 庄园日志保留条数
		/// </summary>
		public int ManorLogsNum = 0; 
		
		/// <summary> 
		/// 庄园地鼠每日重置时间(时/分/秒)
		/// </summary>
		public List<int> ResetrMarmotTime = new List<int>(); 
		
		/// <summary> 
		/// 庄园地鼠刷新间隔时间(毫秒)
		/// </summary>
		public int ManorMarmotRefresh = 0; 
		
		/// <summary> 
		/// 庄园地鼠每日刷新次数
		/// </summary>
		public int ManorMarmotCount = 0; 
		
		/// <summary> 
		/// 自己庄园地鼠生成概率
		/// </summary>
		public float ManorSelfMouseRate = 0f; 
		
		/// <summary> 
		/// 好友庄园地鼠生成概率
		/// </summary>
		public float ManorFriendMouseRate = 0f; 
		
		/// <summary> 
		/// 庄园地鼠奖励包裹id
		/// </summary>
		public List<GoodAward> ManorAward = new List<GoodAward>(); 
		
		/// <summary> 
		/// 庄园地鼠观看广告奖励倍数
		/// </summary>
		public int ManorlDiglettAwardMul = 0; 
		
		/// <summary> 
		/// 大富翁每日免费次数重置时间(时/分/秒)
		/// </summary>
		public List<int> ResetZillionaireCount = new List<int>(); 
		
		/// <summary> 
		/// 大富翁的每日免费次数
		/// </summary>
		public int DayZillionaireCount = 0; 
		
		/// <summary> 
		/// 大富翁入场卷id
		/// </summary>
		public int AdmissionGoodsId = 0; 
		
		/// <summary> 
		/// 大富翁体力id
		/// </summary>
		public int PhysicalPower = 0; 
		
		/// <summary> 
		/// 大富翁骰子低位随机(1~3)
		/// </summary>
		public List<int> LowDice = new List<int>(); 
		
		/// <summary> 
		/// 大富翁骰子高位随机(4~6)
		/// </summary>
		public List<int> HighDice = new List<int>(); 
		
		/// <summary> 
		/// 大富翁骰子纯随机(1~6)
		/// </summary>
		public List<int> PureDice = new List<int>(); 
		
		/// <summary> 
		/// 大富翁骰子低位随机消耗体力值
		/// </summary>
		public int LowDicePhysicalPower = 0; 
		
		/// <summary> 
		/// 大富翁骰子高位随机消耗体力值
		/// </summary>
		public int HighDicePhysicalPower = 0; 
		
		/// <summary> 
		/// 大富翁骰子纯随机消耗体力值
		/// </summary>
		public int PureDicePhysicalPower = 0; 
		
		/// <summary> 
		/// 大富翁金币计算公式中的基础变量
		/// </summary>
		public float ZillionaireBasicVariable = 0f; 
		
		/// <summary> 
		/// 大富翁抓娃娃及三选一免费抽奖广告次数
		/// </summary>
		public int RichManLuckyCount = 0; 
		
		/// <summary> 
		/// 大富翁抓娃娃随机奖励id
		/// </summary>
		public int ZillionairePropPackageID = 0; 
		
		/// <summary> 
		/// 晚会开启等级限制
		/// </summary>
		public int SoireeGrade = 0; 
		
		/// <summary> 
		/// 晚会开始时间(时/分/秒)
		/// </summary>
		public List<int> SoireeStartTime = new List<int>(); 
		
		/// <summary> 
		/// 晚会结束时间(时/分/秒)
		/// </summary>
		public List<int> SoireeEndTime = new List<int>(); 
		
		/// <summary> 
		/// 晚会剩余多少提醒玩家活动结束(分)
		/// </summary>
		public int SoireeResidueTime = 0; 
		
		/// <summary> 
		/// 晚会房间人数限制
		/// </summary>
		public int SoireeRoomLimit = 0; 
		
		/// <summary> 
		/// 晚会默认房间数
		/// </summary>
		public int SoireeDefaultRoom = 0; 
		
		/// <summary> 
		/// 晚会活动投注时间(分)
		/// </summary>
		public int SoireeBetTime = 0; 
		
		/// <summary> 
		/// 晚会获得经验时间间隔(分)
		/// </summary>
		public int SoireeExperience = 0; 
		
		/// <summary> 
		/// 晚会赛跑距离(米)
		/// </summary>
		public int SoireeTotalDistance = 0; 
		
		/// <summary> 
		/// 晚会乌龟默认速度(米/秒)
		/// </summary>
		public int SoireeTortoiseSpeed = 0; 
		
		/// <summary> 
		/// 晚会多少米除非一次事件(米)
		/// </summary>
		public int SoireeTouchEvent = 0; 
		
		/// <summary> 
		/// 晚会活动比赛最大时间
		/// </summary>
		public int SoireeGameTime = 0; 
		
		/// <summary> 
		/// 晚会积分商店类型
		/// </summary>
		public int IntegralGoodsMallTpye = 0; 
		
		/// <summary> 
		/// 每日可签到更新时间(时/分/秒)
		/// </summary>
		public List<int> SignInRenewalTime = new List<int>(); 
		
		/// <summary> 
		/// 每日签到奖励包裹id
		/// </summary>
		public List<GoodAward> SignInAward = new List<GoodAward>(); 
		
		/// <summary> 
		/// 每日登录获取好感值数量
		/// </summary>
		public GoodIDCount LoginGetFavorableValue = new GoodIDCount(); 
		
		/// <summary> 
		/// 每日登录获取好感值时间(时/分/秒)
		/// </summary>
		public List<int> GetFavorableTimeMorning = new List<int>(); 
		
		/// <summary> 
		/// 每日登录获取好感值时间(时/分/秒)
		/// </summary>
		public List<int> GetFavorableTimeAfternoon = new List<int>(); 
		
		/// <summary> 
		/// 每日登录获取好感值时间(时/分/秒)
		/// </summary>
		public List<int> GetFavorableTimeEvening = new List<int>(); 
		
		/// <summary> 
		/// 每日登录获取好感值广告领取倍数
		/// </summary>
		public int GetLoginFavorableAdvertMul = 0; 
		
		/// <summary> 
		/// 聊天信息长度（多少个字符）
		/// </summary>
		public int ChatMessageLength = 0; 
		
		/// <summary> 
		/// 聊天显示的最大信息数量
		/// </summary>
		public int WorldChatDataNumber = 0; 
		
		/// <summary> 
		/// 聊天信息发送cd
		/// </summary>
		public int ChatSendCD = 0; 
		
		/// <summary> 
		/// 聊天信息时间间隔
		/// </summary>
		public int ChatMessageInterval = 0; 
		
		/// <summary> 
		/// 聊天私聊最大人数
		/// </summary>
		public int ChatPrivateRoleMaxNumber = 0; 
		
		/// <summary> 
		/// 聊天私聊显示得最大信息数量
		/// </summary>
		public int PrivateChatDataNumber = 0; 
		
		/// <summary> 
		/// 每日任务重置时间(时/分/秒)
		/// </summary>
		public List<int> DailyUpdateTaskTime = new List<int>(); 
		
		/// <summary> 
		/// 订单重置时间(时/分/秒)
		/// </summary>
		public List<int> PublicRefreshTime = new List<int>(); 
		
		/// <summary> 
		/// 订单列表生成总数量
		/// </summary>
		public int DealCreatNum = 0; 
		
		/// <summary> 
		/// 高级订单奖励钻石数量
		/// </summary>
		public int HighDealAwardNum = 0; 
	
	

	} 

	// Defined in table: ManorCrop
	[System.Serializable]
	public partial class ManorCropDefine
	{
	
		
		/// <summary> 
		/// 农作物id
		/// </summary>
		public int CropId = 0; 
		
		/// <summary> 
		/// 发芽期(秒)
		/// </summary>
		public int GerminationPeriod = 0; 
		
		/// <summary> 
		/// 成长期(秒)
		/// </summary>
		public int GrowUp = 0; 
		
		/// <summary> 
		/// 成熟期(秒)
		/// </summary>
		public int AdultnessTime = 0; 
		
		/// <summary> 
		/// 种子id
		/// </summary>
		public int IdSeed = 0; 
		
		/// <summary> 
		/// 收获物id
		/// </summary>
		public int IdGainGameItem = 0; 
		
		/// <summary> 
		/// 收获结果数量
		/// </summary>
		public int ResultsNumber = 0; 
		
		/// <summary> 
		/// 订单单价
		/// </summary>
		public int OrderPrice = 0; 
		
		/// <summary> 
		/// 收获经验
		/// </summary>
		public int GainExperience = 0; 
		
		/// <summary> 
		/// prefab名称
		/// </summary>
		public string Model = ""; 
		
		/// <summary> 
		/// 作物类型
		/// </summary>
		public CropType CropType = CropType.None; 
		
		/// <summary> 
		/// 作物等级
		/// </summary>
		public int Grade = 0; 
		
		/// <summary> 
		/// 稀有度
		/// </summary>
		public TypeRarity Rarity = TypeRarity.None; 
	
	

	} 

	// Defined in table: ManorRegionWords
	[System.Serializable]
	public partial class ManorRegionWordsDefine
	{
	
		
		/// <summary> 
		/// 对话id
		/// </summary>
		public int DialogId = 0; 
		
		/// <summary> 
		/// 位置
		/// </summary>
		public int Pos = 0; 
		
		/// <summary> 
		/// 对话对应的多语言id
		/// </summary>
		public int RegionWords = 0; 
		
		/// <summary> 
		/// 半身像名称
		/// </summary>
		public string HalfPhoto = ""; 
		
		/// <summary> 
		/// 人物名称国际化id(章节文本功能表)
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 当前对话的下一句（如果是最后一条，没有下一句）
		/// </summary>
		public int NextDialogId = 0; 
		
		/// <summary> 
		/// 是否是当前区域的最后一条
		/// </summary>
		public bool isEnd = false; 
	
	

	} 

	// Defined in table: ManorRegionDialog
	[System.Serializable]
	public partial class ManorRegionDialogDefine
	{
	
		
		/// <summary> 
		/// 装饰物id
		/// </summary>
		public int DialogId = 0; 
		
		/// <summary> 
		/// 对应地块id
		/// </summary>
		public int regionId = 0; 
		
		/// <summary> 
		/// 注释
		/// </summary>
		public string notes = ""; 
		
		/// <summary> 
		/// 对话起始句
		/// </summary>
		public int BeginDialogId = 0; 
	
	

	} 

	// Defined in table: GuideLittleStep
	[System.Serializable]
	public partial class GuideLittleStepDefine
	{
	
		
		/// <summary> 
		/// 小步骤id
		/// </summary>
		public int Id = 0; 
		
		/// <summary> 
		/// 注释
		/// </summary>
		public string notes = ""; 
		
		/// <summary> 
		/// 触发条件id，都是并且关系
		/// </summary>
		public List<int> TriggerConditions = new List<int>(); 
		
		/// <summary> 
		/// 是否是面板动画
		/// </summary>
		public bool isPanelAnim = false; 
		
		/// <summary> 
		/// 面板动画prefab名称
		/// </summary>
		public string PrefabPanelAnim = ""; 
		
		/// <summary> 
		/// 是否手在右边
		/// </summary>
		public bool isRightFinger = true; 
		
		/// <summary> 
		/// 是否是3的庄园的相机渲染
		/// </summary>
		public bool is3dCamera = false; 
		
		/// <summary> 
		/// 要找的放（手+光圈的位置）
		/// </summary>
		public string SubPath = ""; 
		
		/// <summary> 
		/// 一些图片没有居中，所以要加偏移
		/// </summary>
		public Vec2 offset = new Vec2(); 
		
		/// <summary> 
		/// 手和光圈的缩放，默认值为1
		/// </summary>
		public float scaleHoleX = 1.0f; 
		
		/// <summary> 
		/// 手和光圈的缩放，默认值为1
		/// </summary>
		public float scaleHoleY = 1.0f; 
		
		/// <summary> 
		/// 小步骤是否完成，客户端用，策划不用填
		/// </summary>
		public bool IsFinish = false; 
	
	

	} 

	// Defined in table: GuideTriggerCondition
	[System.Serializable]
	public partial class GuideTriggerConditionDefine
	{
	
		
		/// <summary> 
		/// 引导触发条件id
		/// </summary>
		public int Id = 0; 
		
		/// <summary> 
		/// 注释
		/// </summary>
		public string notes = ""; 
		
		/// <summary> 
		/// 小步骤id
		/// </summary>
		public int LittleStepId = 0; 
		
		/// <summary> 
		/// 到达等级
		/// </summary>
		public int LevelReach = 0; 
		
		/// <summary> 
		/// 数量达到多少个
		/// </summary>
		public int FruitHave = 0; 
		
		/// <summary> 
		/// 果实累计收获多少个
		/// </summary>
		public int FruitTotalGain = 0; 
		
		/// <summary> 
		/// 是否完成
		/// </summary>
		public bool isCompelete = false; 
		
		/// <summary> 
		/// 客户端用，策划不用填
		/// </summary>
		public bool isFinish = false; 
		
		/// <summary> 
		/// 条件是否满足，策划不用填
		/// </summary>
		public bool isMet = false; 
	
	

	} 

	// Defined in table: ImpulseText
	[System.Serializable]
	public partial class ImpulseTextDefine
	{
	
		
		/// <summary> 
		/// 对话id
		/// </summary>
		public int ImpulseTextId = 0; 
		
		/// <summary> 
		/// 男主id
		/// </summary>
		public int HeroId = 0; 
		
		/// <summary> 
		/// 简体中文
		/// </summary>
		public string SimplifiedChinese = ""; 
		
		/// <summary> 
		/// 繁体中文
		/// </summary>
		public string TraditionalChinese = ""; 
		
		/// <summary> 
		/// 英文
		/// </summary>
		public string English = ""; 
	
	

	} 

	// Defined in table: ImpulseGift
	[System.Serializable]
	public partial class ImpulseGiftDefine
	{
	
		
		/// <summary> 
		/// 道具ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// NPC增加的好感值
		/// </summary>
		public int NPCAddFavorableValue = 0; 
		
		/// <summary> 
		/// 玩家增加的好感值
		/// </summary>
		public int PlayerAddFavorableValue = 0; 
	
	

	} 

	// Defined in table: DataAnalytics
	[System.Serializable]
	public partial class DataAnalyticsDefine
	{
	
		
		/// <summary> 
		/// id
		/// </summary>
		public int Id = 0; 
		
		/// <summary> 
		/// 事件主id
		/// </summary>
		public DotEventMainId EventMainId = DotEventMainId.AdEvent; 
		
		/// <summary> 
		/// 事件子id,用来调用的
		/// </summary>
		public DotEventId EventSubId = DotEventId.ManorPlantAdIncrease; 
		
		/// <summary> 
		/// 埋点内容
		/// </summary>
		public string EventName = ""; 
	
	

	} 

	// Defined in table: Guessing
	[System.Serializable]
	public partial class GuessingDefine
	{
	
		
		/// <summary> 
		/// 状态ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 效果持续多久(秒)
		/// </summary>
		public int ContinueTime = 0; 
		
		/// <summary> 
		/// 速度改变值
		/// </summary>
		public int AddSpeed = 0; 
		
		/// <summary> 
		/// 无效id
		/// </summary>
		public List<int> Invalid = new List<int>(); 
		
		/// <summary> 
		/// 状态图标名称
		/// </summary>
		public string IconName = ""; 
		
		/// <summary> 
		/// Prefab名称
		/// </summary>
		public string PrefabName = ""; 
		
		/// <summary> 
		/// 状态类型
		/// </summary>
		public int Type = 0; 
	
	

	} 

	// Defined in table: Costume
	[System.Serializable]
	public partial class CostumeDefine
	{
	
		
		/// <summary> 
		/// 服饰id
		/// </summary>
		public int CostumeId = 0; 
		
		/// <summary> 
		/// 角色id(不填表示为玩家服饰)
		/// </summary>
		public int RoleId = 0; 
		
		/// <summary> 
		/// 服饰类型
		/// </summary>
		public CostumeType Type = CostumeType.None; 
		
		/// <summary> 
		/// 冲突类型
		/// </summary>
		public List<CostumeType> ConflictTypes = new List<CostumeType>(); 
		
		/// <summary> 
		/// 使用贴图（贴图名称）
		/// </summary>
		public List<CostumeTextureInfo> UseTexture = new List<CostumeTextureInfo>(); 
		
		/// <summary> 
		/// 显示部位名称（部件参数）
		/// </summary>
		public List<string> ShowParts = new List<string>(); 
		
		/// <summary> 
		/// 隐藏部位名称
		/// </summary>
		public List<string> HideParts = new List<string>(); 
		
		/// <summary> 
		/// 列表ICON
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// 多语言名称id
		/// </summary>
		public int MultilingualNameID = 0; 
		
		/// <summary> 
		/// 多语言描述
		/// </summary>
		public int MultilingualDescID = 0; 
		
		/// <summary> 
		/// 服装获取途径
		/// </summary>
		public List<ItemAccessType> Access = new List<ItemAccessType>(); 
	
	

	} 

	// Defined in table: PlayerAvatar
	[System.Serializable]
	public partial class PlayerAvatarDefine
	{
	
		
		/// <summary> 
		/// id
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 图标资源名称
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// 是否默认解锁
		/// </summary>
		public bool IsDefUnlock = false; 
	
	

	} 

	// Defined in table: PlayerGrade
	[System.Serializable]
	public partial class PlayerGradeDefine
	{
	
		
		/// <summary> 
		/// 等级
		/// </summary>
		public int Grade = 0; 
		
		/// <summary> 
		/// 升级经验_到下一级的
		/// </summary>
		public int Upgrade = 0; 
		
		/// <summary> 
		/// 总经验_到下一级的，最后一级无线大
		/// </summary>
		public int TotalExperience = 0; 
		
		/// <summary> 
		/// 升级奖励
		/// </summary>
		public List<GoodIDCount> UpgradeAwards = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 升级增加仓库数
		/// </summary>
		public int WarehouseCount = 0; 
		
		/// <summary> 
		/// 晚会获得经验值
		/// </summary>
		public int SoireeExperience = 0; 
		
		/// <summary> 
		/// 订单消耗数量
		/// </summary>
		public int DealUsedNum = 0; 
	
	

	} 

	// Defined in table: ExtraStory
	[System.Serializable]
	public partial class ExtraStoryDefine
	{
	
		
		/// <summary> 
		/// 番外剧情id
		/// </summary>
		public int ExtraStoryId = 0; 
		
		/// <summary> 
		/// 番外名称（多语言）
		/// </summary>
		public int ExtraStoryName = 0; 
		
		/// <summary> 
		/// 购买价格（不填表示观看广告获得）
		/// </summary>
		public List<GoodIDCount> Price = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 购买需要广告次数（不填表示星币购买）
		/// </summary>
		public int AdvertisingNum = 0; 
		
		/// <summary> 
		/// 剧情图片icon
		/// </summary>
		public string picture = ""; 
		
		/// <summary> 
		/// 对应通关章节的id
		/// </summary>
		public int PassChapterID = 0; 
		
		/// <summary> 
		/// 对应预制体名称
		/// </summary>
		public string PrefabName = ""; 
	
	

	} 

	// Defined in table: OADDialogueText
	[System.Serializable]
	public partial class OADDialogueTextDefine
	{
	
		
		/// <summary> 
		/// 字段ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 下一句ID
		/// </summary>
		public int NextDialogId = 0; 
		
		/// <summary> 
		/// 文本每行最大字数
		///默认为0：使用常量配置数据
		///-1：不换行
		/// </summary>
		public int StringNumber = 0; 
		
		/// <summary> 
		/// 简体中文
		/// </summary>
		public string SimplifiedChinese = ""; 
		
		/// <summary> 
		/// 繁体中文
		/// </summary>
		public string TraditionalChinese = ""; 
		
		/// <summary> 
		/// 英文
		/// </summary>
		public string English = ""; 
	
	

	} 

	// Defined in table: Section
	[System.Serializable]
	public partial class SectionDefine
	{
	
		
		/// <summary> 
		/// 章节id
		/// </summary>
		public int SectionId = 0; 
		
		/// <summary> 
		/// 章节名称多语言
		/// </summary>
		public int SectionNumber = 0; 
		
		/// <summary> 
		/// 章节列表章节描述多语言
		/// </summary>
		public int SectionNameId = 0; 
		
		/// <summary> 
		/// 章节等级
		/// </summary>
		public int SectionGrade = 0; 
		
		/// <summary> 
		/// 章节解锁价格
		/// </summary>
		public List<GoodIDCount> UnlockPrice = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 下个章节id
		/// </summary>
		public int NextSectionId = 0; 
		
		/// <summary> 
		/// 章节标题（进入时的画面文本）
		/// </summary>
		public List<int> SectionTitle = new List<int>(); 
		
		/// <summary> 
		/// 图片名称
		/// </summary>
		public string Icon = ""; 
	
	

	} 

	// Defined in table: ChapterFunctionText
	[System.Serializable]
	public partial class ChapterFunctionTextDefine
	{
	
		
		/// <summary> 
		/// 字段ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 章节微信聊天头像
		/// </summary>
		public string IconImage = ""; 
		
		/// <summary> 
		/// 文本每行最大字数
		///默认为0：使用常量配置数据
		///-1：不换行
		/// </summary>
		public int StringNumber = 0; 
		
		/// <summary> 
		/// 简体中文
		/// </summary>
		public string SimplifiedChinese = ""; 
		
		/// <summary> 
		/// 繁体中文
		/// </summary>
		public string TraditionalChinese = ""; 
		
		/// <summary> 
		/// 英文
		/// </summary>
		public string English = ""; 
	
	

	} 

	// Defined in table: ChapterDialogueText
	[System.Serializable]
	public partial class ChapterDialogueTextDefine
	{
	
		
		/// <summary> 
		/// 字段ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 下一句ID
		/// </summary>
		public int NextDialogId = 0; 
		
		/// <summary> 
		/// 分支语句id列表
		/// </summary>
		public List<int> DialogIdList = new List<int>(); 
		
		/// <summary> 
		/// 是否是图片
		/// </summary>
		public bool IsImage = false; 
		
		/// <summary> 
		/// 是否需要点击
		/// </summary>
		public bool IsClick = false; 
		
		/// <summary> 
		/// 对话框类型
		/// </summary>
		public DialogueType BoxType = DialogueType.Normal; 
		
		/// <summary> 
		/// 对话框附加值：正常和幻想对话是否有角，
		///旁白和公众讲话左右 true左false右
		/// </summary>
		public bool BoxAdditional = true; 
		
		/// <summary> 
		/// 人物名字id
		/// </summary>
		public int NameID = 0; 
		
		/// <summary> 
		/// 人物对话头像
		/// </summary>
		public string RoleIcon = ""; 
		
		/// <summary> 
		/// 文本每行最大字数
		///默认为0：使用常量配置数据
		///-1：不换行
		/// </summary>
		public int StringNumber = 0; 
		
		/// <summary> 
		/// 简体中文
		/// </summary>
		public string SimplifiedChinese = ""; 
		
		/// <summary> 
		/// 繁体中文
		/// </summary>
		public string TraditionalChinese = ""; 
		
		/// <summary> 
		/// 英文
		/// </summary>
		public string English = ""; 
	
	

	} 

	// Defined in table: SignIn
	[System.Serializable]
	public partial class SignInDefine
	{
	
		
		/// <summary> 
		/// 阶段ID(天)
		/// </summary>
		public int PhaseID = 0; 
		
		/// <summary> 
		/// 阶段奖励ID
		/// </summary>
		public int PhaseAwardId = 0; 
		
		/// <summary> 
		/// 阶段奖励数量
		/// </summary>
		public int PhaseAwardNum = 0; 
	
	

	} 

	// Defined in table: Decorate
	[System.Serializable]
	public partial class DecorateDefine
	{
	
		
		/// <summary> 
		/// 装饰物id
		/// </summary>
		public int DecorateId = 0; 
		
		/// <summary> 
		/// 装饰物类型
		/// </summary>
		public TypeManorDecorate DecorateType = TypeManorDecorate.None; 
		
		/// <summary> 
		/// 注释
		/// </summary>
		public string notes = ""; 
		
		/// <summary> 
		/// 道具id
		/// </summary>
		public int idGameItem = 0; 
		
		/// <summary> 
		/// 场景上模型
		/// </summary>
		public List<string> Model = new List<string>(); 
		
		/// <summary> 
		/// 按住装饰物显示的箭头距离中心点的距离
		/// </summary>
		public float disArrowToPivot = 0f; 
		
		/// <summary> 
		/// 装饰物icon
		/// </summary>
		public List<string> DecorateIcon = new List<string>(); 
	
	

	} 

	// Defined in table: DecorativeFlowerGame
	[System.Serializable]
	public partial class DecorativeFlowerGameDefine
	{
	
		
		/// <summary> 
		/// 物品id
		/// </summary>
		public int ItemId = 0; 
		
		/// <summary> 
		/// 装饰物类型
		/// </summary>
		public int ItemType = 0; 
		
		/// <summary> 
		/// 名称注释
		/// </summary>
		public string ItemNotes = ""; 
		
		/// <summary> 
		/// 物品属于
		/// </summary>
		public int ItemBelongTo = 0; 
		
		/// <summary> 
		/// 道具id
		/// </summary>
		public int idGameItem = 0; 
		
		/// <summary> 
		/// 道具图片
		/// </summary>
		public string Icon = ""; 
	
	

	} 

	// Defined in table: Deal
	[System.Serializable]
	public partial class DealDefine
	{
	
		
		/// <summary> 
		/// 订单等级
		/// </summary>
		public int DealLevel = 0; 
		
		/// <summary> 
		/// 需求基础
		/// </summary>
		public float NeedsBasicValue = 0f; 
		
		/// <summary> 
		/// 订单等级升级需完成次数
		/// </summary>
		public int DealUpNum = 0; 
		
		/// <summary> 
		/// 刷新订单消耗道具
		/// </summary>
		public GoodIDCount RefreshDealUseGoods = new GoodIDCount(); 
		
		/// <summary> 
		/// 订单CD时间(毫秒）
		/// </summary>
		public int DealCDTime = 0; 
		
		/// <summary> 
		/// 订单生成消耗作物最大数量
		/// </summary>
		public int DealMaxCropTypeNum = 0; 
	
	

	} 

	// Defined in table: DealRole
	[System.Serializable]
	public partial class DealRoleDefine
	{
	
		
		/// <summary> 
		/// 订单人物id
		/// </summary>
		public int DealRoleID = 0; 
		
		/// <summary> 
		/// 人物头像
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// 人物名称(国际化表)
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 解锁章节
		/// </summary>
		public int UnlockChapter = 0; 
		
		/// <summary> 
		/// 需求列表
		/// </summary>
		public List<DealDemand> Demands = new List<DealDemand>(); 
	
	

	} 

	// Defined in table: GameItem
	[System.Serializable]
	public partial class GameItemDefine
	{
	
		
		/// <summary> 
		/// 道具ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 道具名字（多语言表）
		/// </summary>
		public int ItemName = 0; 
		
		/// <summary> 
		/// 道具图标
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// 道具类型
		/// </summary>
		public TypeGameItem ItemType = TypeGameItem.None; 
		
		/// <summary> 
		/// 背包类型
		/// </summary>
		public KnapsackType KnapsackType = KnapsackType.None; 
		
		/// <summary> 
		/// 稀有度
		/// </summary>
		public TypeRarity Rarity = TypeRarity.None; 
		
		/// <summary> 
		/// 物品等级
		/// </summary>
		public int Grade = 0; 
		
		/// <summary> 
		/// 物品描述
		/// </summary>
		public int Description = 0; 
		
		/// <summary> 
		/// 卖出单价（多个道具），用于背包中售出
		/// </summary>
		public List<DealClass> PriceSell = new List<DealClass>(); 
		
		/// <summary> 
		/// 物品使用（0不可使用，其它对应不同功能）
		/// </summary>
		public GoodsUseType Use = GoodsUseType.None; 
		
		/// <summary> 
		/// 获取时是否发公告
		/// </summary>
		public bool IsSendNote = false; 
		
		/// <summary> 
		/// 是否可获取
		/// </summary>
		public bool IsDisable = true; 
	
	

	} 

	// Defined in table: Mail
	[System.Serializable]
	public partial class MailDefine
	{
	
		
		/// <summary> 
		/// 邮件id
		/// </summary>
		public int MailId = 0; 
		
		/// <summary> 
		/// 邮件标题
		/// </summary>
		public int Title = 0; 
		
		/// <summary> 
		/// 邮件副标题
		/// </summary>
		public int Subtitle = 0; 
		
		/// <summary> 
		/// 邮件正文
		/// </summary>
		public int Message = 0; 
		
		/// <summary> 
		/// 邮件附件
		/// </summary>
		public List<GoodIDCount> MailAward = new List<GoodIDCount>(); 
		
		
		public long MailStartTime = 0; 
		
		
		public long MailEndTime = 0; 
	
	

	} 

	// Defined in table: GoldJewelBuy
	[System.Serializable]
	public partial class GoldJewelBuyDefine
	{
	
		
		/// <summary> 
		/// 档次id
		/// </summary>
		public int LevelId = 0; 
		
		/// <summary> 
		/// 对应物品id
		/// </summary>
		public int GoodsId = 0; 
		
		/// <summary> 
		/// 对应物品数量
		/// </summary>
		public int GoodsNum = 0; 
		
		/// <summary> 
		/// 对应物品价格
		/// </summary>
		public List<GoodIDCount> GoodsPrice = new List<GoodIDCount>(); 
		
		/// <summary> 
		/// 首充价格（RMB）
		/// </summary>
		public int FirstPrice = 0; 
		
		/// <summary> 
		/// 原价（RMB）
		/// </summary>
		public int OriginalPrice = 0; 
		
		/// <summary> 
		/// 充值图标
		/// </summary>
		public string Icon = ""; 
	
	

	} 

	// Defined in table: RandomName
	[System.Serializable]
	public partial class RandomNameDefine
	{
	
		
		/// <summary> 
		/// 姓
		/// </summary>
		public string FirstName = ""; 
		
		/// <summary> 
		/// 名
		/// </summary>
		public string SecondName = ""; 
	
	

	} 

}
